
motor_esc_f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000720c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  080072cc  080072cc  000172cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074b0  080074b0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080074b0  080074b0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074b0  080074b0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074b0  080074b0  000174b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074b4  080074b4  000174b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080074b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000010  080074c8  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  080074c8  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000084f1  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002259  00000000  00000000  00028529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  0002a788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab8  00000000  00000000  0002b358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e25b  00000000  00000000  0002be10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a24d  00000000  00000000  0003a06b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00042db4  00000000  00000000  000442b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008706c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cd8  00000000  00000000  000870bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080072b4 	.word	0x080072b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080072b4 	.word	0x080072b4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0008      	movs	r0, r1
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 f9ed 	bl	80007dc <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 f979 	bl	8000704 <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 f9df 	bl	80007dc <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 f9d5 	bl	80007dc <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 f985 	bl	8000750 <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 f97b 	bl	8000750 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_f2uiz>:
 8000468:	219e      	movs	r1, #158	; 0x9e
 800046a:	b510      	push	{r4, lr}
 800046c:	05c9      	lsls	r1, r1, #23
 800046e:	1c04      	adds	r4, r0, #0
 8000470:	f7ff fff0 	bl	8000454 <__aeabi_fcmpge>
 8000474:	2800      	cmp	r0, #0
 8000476:	d103      	bne.n	8000480 <__aeabi_f2uiz+0x18>
 8000478:	1c20      	adds	r0, r4, #0
 800047a:	f000 fba1 	bl	8000bc0 <__aeabi_f2iz>
 800047e:	bd10      	pop	{r4, pc}
 8000480:	219e      	movs	r1, #158	; 0x9e
 8000482:	1c20      	adds	r0, r4, #0
 8000484:	05c9      	lsls	r1, r1, #23
 8000486:	f000 f9ed 	bl	8000864 <__aeabi_fsub>
 800048a:	f000 fb99 	bl	8000bc0 <__aeabi_f2iz>
 800048e:	2380      	movs	r3, #128	; 0x80
 8000490:	061b      	lsls	r3, r3, #24
 8000492:	469c      	mov	ip, r3
 8000494:	4460      	add	r0, ip
 8000496:	e7f2      	b.n	800047e <__aeabi_f2uiz+0x16>

08000498 <__aeabi_d2uiz>:
 8000498:	b570      	push	{r4, r5, r6, lr}
 800049a:	2200      	movs	r2, #0
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <__aeabi_d2uiz+0x38>)
 800049e:	0004      	movs	r4, r0
 80004a0:	000d      	movs	r5, r1
 80004a2:	f002 f92d 	bl	8002700 <__aeabi_dcmpge>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d104      	bne.n	80004b4 <__aeabi_d2uiz+0x1c>
 80004aa:	0020      	movs	r0, r4
 80004ac:	0029      	movs	r1, r5
 80004ae:	f002 f867 	bl	8002580 <__aeabi_d2iz>
 80004b2:	bd70      	pop	{r4, r5, r6, pc}
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <__aeabi_d2uiz+0x38>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	0020      	movs	r0, r4
 80004ba:	0029      	movs	r1, r5
 80004bc:	f001 fcce 	bl	8001e5c <__aeabi_dsub>
 80004c0:	f002 f85e 	bl	8002580 <__aeabi_d2iz>
 80004c4:	2380      	movs	r3, #128	; 0x80
 80004c6:	061b      	lsls	r3, r3, #24
 80004c8:	469c      	mov	ip, r3
 80004ca:	4460      	add	r0, ip
 80004cc:	e7f1      	b.n	80004b2 <__aeabi_d2uiz+0x1a>
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	41e00000 	.word	0x41e00000

080004d4 <__aeabi_fdiv>:
 80004d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d6:	464f      	mov	r7, r9
 80004d8:	4646      	mov	r6, r8
 80004da:	46d6      	mov	lr, sl
 80004dc:	0245      	lsls	r5, r0, #9
 80004de:	b5c0      	push	{r6, r7, lr}
 80004e0:	0047      	lsls	r7, r0, #1
 80004e2:	1c0c      	adds	r4, r1, #0
 80004e4:	0a6d      	lsrs	r5, r5, #9
 80004e6:	0e3f      	lsrs	r7, r7, #24
 80004e8:	0fc6      	lsrs	r6, r0, #31
 80004ea:	2f00      	cmp	r7, #0
 80004ec:	d100      	bne.n	80004f0 <__aeabi_fdiv+0x1c>
 80004ee:	e070      	b.n	80005d2 <__aeabi_fdiv+0xfe>
 80004f0:	2fff      	cmp	r7, #255	; 0xff
 80004f2:	d100      	bne.n	80004f6 <__aeabi_fdiv+0x22>
 80004f4:	e075      	b.n	80005e2 <__aeabi_fdiv+0x10e>
 80004f6:	00eb      	lsls	r3, r5, #3
 80004f8:	2580      	movs	r5, #128	; 0x80
 80004fa:	04ed      	lsls	r5, r5, #19
 80004fc:	431d      	orrs	r5, r3
 80004fe:	2300      	movs	r3, #0
 8000500:	4699      	mov	r9, r3
 8000502:	469a      	mov	sl, r3
 8000504:	3f7f      	subs	r7, #127	; 0x7f
 8000506:	0260      	lsls	r0, r4, #9
 8000508:	0a43      	lsrs	r3, r0, #9
 800050a:	4698      	mov	r8, r3
 800050c:	0063      	lsls	r3, r4, #1
 800050e:	0e1b      	lsrs	r3, r3, #24
 8000510:	0fe4      	lsrs	r4, r4, #31
 8000512:	2b00      	cmp	r3, #0
 8000514:	d04e      	beq.n	80005b4 <__aeabi_fdiv+0xe0>
 8000516:	2bff      	cmp	r3, #255	; 0xff
 8000518:	d046      	beq.n	80005a8 <__aeabi_fdiv+0xd4>
 800051a:	4642      	mov	r2, r8
 800051c:	00d0      	lsls	r0, r2, #3
 800051e:	2280      	movs	r2, #128	; 0x80
 8000520:	04d2      	lsls	r2, r2, #19
 8000522:	4302      	orrs	r2, r0
 8000524:	4690      	mov	r8, r2
 8000526:	2200      	movs	r2, #0
 8000528:	3b7f      	subs	r3, #127	; 0x7f
 800052a:	0031      	movs	r1, r6
 800052c:	1aff      	subs	r7, r7, r3
 800052e:	464b      	mov	r3, r9
 8000530:	4061      	eors	r1, r4
 8000532:	b2c9      	uxtb	r1, r1
 8000534:	4313      	orrs	r3, r2
 8000536:	2b0f      	cmp	r3, #15
 8000538:	d900      	bls.n	800053c <__aeabi_fdiv+0x68>
 800053a:	e0b5      	b.n	80006a8 <__aeabi_fdiv+0x1d4>
 800053c:	486e      	ldr	r0, [pc, #440]	; (80006f8 <__aeabi_fdiv+0x224>)
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	58c3      	ldr	r3, [r0, r3]
 8000542:	469f      	mov	pc, r3
 8000544:	2300      	movs	r3, #0
 8000546:	4698      	mov	r8, r3
 8000548:	0026      	movs	r6, r4
 800054a:	4645      	mov	r5, r8
 800054c:	4692      	mov	sl, r2
 800054e:	4653      	mov	r3, sl
 8000550:	2b02      	cmp	r3, #2
 8000552:	d100      	bne.n	8000556 <__aeabi_fdiv+0x82>
 8000554:	e089      	b.n	800066a <__aeabi_fdiv+0x196>
 8000556:	2b03      	cmp	r3, #3
 8000558:	d100      	bne.n	800055c <__aeabi_fdiv+0x88>
 800055a:	e09e      	b.n	800069a <__aeabi_fdiv+0x1c6>
 800055c:	2b01      	cmp	r3, #1
 800055e:	d018      	beq.n	8000592 <__aeabi_fdiv+0xbe>
 8000560:	003b      	movs	r3, r7
 8000562:	337f      	adds	r3, #127	; 0x7f
 8000564:	2b00      	cmp	r3, #0
 8000566:	dd69      	ble.n	800063c <__aeabi_fdiv+0x168>
 8000568:	076a      	lsls	r2, r5, #29
 800056a:	d004      	beq.n	8000576 <__aeabi_fdiv+0xa2>
 800056c:	220f      	movs	r2, #15
 800056e:	402a      	ands	r2, r5
 8000570:	2a04      	cmp	r2, #4
 8000572:	d000      	beq.n	8000576 <__aeabi_fdiv+0xa2>
 8000574:	3504      	adds	r5, #4
 8000576:	012a      	lsls	r2, r5, #4
 8000578:	d503      	bpl.n	8000582 <__aeabi_fdiv+0xae>
 800057a:	4b60      	ldr	r3, [pc, #384]	; (80006fc <__aeabi_fdiv+0x228>)
 800057c:	401d      	ands	r5, r3
 800057e:	003b      	movs	r3, r7
 8000580:	3380      	adds	r3, #128	; 0x80
 8000582:	2bfe      	cmp	r3, #254	; 0xfe
 8000584:	dd00      	ble.n	8000588 <__aeabi_fdiv+0xb4>
 8000586:	e070      	b.n	800066a <__aeabi_fdiv+0x196>
 8000588:	01ad      	lsls	r5, r5, #6
 800058a:	0a6d      	lsrs	r5, r5, #9
 800058c:	b2d8      	uxtb	r0, r3
 800058e:	e002      	b.n	8000596 <__aeabi_fdiv+0xc2>
 8000590:	000e      	movs	r6, r1
 8000592:	2000      	movs	r0, #0
 8000594:	2500      	movs	r5, #0
 8000596:	05c0      	lsls	r0, r0, #23
 8000598:	4328      	orrs	r0, r5
 800059a:	07f6      	lsls	r6, r6, #31
 800059c:	4330      	orrs	r0, r6
 800059e:	bce0      	pop	{r5, r6, r7}
 80005a0:	46ba      	mov	sl, r7
 80005a2:	46b1      	mov	r9, r6
 80005a4:	46a8      	mov	r8, r5
 80005a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a8:	4643      	mov	r3, r8
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d13f      	bne.n	800062e <__aeabi_fdiv+0x15a>
 80005ae:	2202      	movs	r2, #2
 80005b0:	3fff      	subs	r7, #255	; 0xff
 80005b2:	e003      	b.n	80005bc <__aeabi_fdiv+0xe8>
 80005b4:	4643      	mov	r3, r8
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d12d      	bne.n	8000616 <__aeabi_fdiv+0x142>
 80005ba:	2201      	movs	r2, #1
 80005bc:	0031      	movs	r1, r6
 80005be:	464b      	mov	r3, r9
 80005c0:	4061      	eors	r1, r4
 80005c2:	b2c9      	uxtb	r1, r1
 80005c4:	4313      	orrs	r3, r2
 80005c6:	2b0f      	cmp	r3, #15
 80005c8:	d834      	bhi.n	8000634 <__aeabi_fdiv+0x160>
 80005ca:	484d      	ldr	r0, [pc, #308]	; (8000700 <__aeabi_fdiv+0x22c>)
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	58c3      	ldr	r3, [r0, r3]
 80005d0:	469f      	mov	pc, r3
 80005d2:	2d00      	cmp	r5, #0
 80005d4:	d113      	bne.n	80005fe <__aeabi_fdiv+0x12a>
 80005d6:	2304      	movs	r3, #4
 80005d8:	4699      	mov	r9, r3
 80005da:	3b03      	subs	r3, #3
 80005dc:	2700      	movs	r7, #0
 80005de:	469a      	mov	sl, r3
 80005e0:	e791      	b.n	8000506 <__aeabi_fdiv+0x32>
 80005e2:	2d00      	cmp	r5, #0
 80005e4:	d105      	bne.n	80005f2 <__aeabi_fdiv+0x11e>
 80005e6:	2308      	movs	r3, #8
 80005e8:	4699      	mov	r9, r3
 80005ea:	3b06      	subs	r3, #6
 80005ec:	27ff      	movs	r7, #255	; 0xff
 80005ee:	469a      	mov	sl, r3
 80005f0:	e789      	b.n	8000506 <__aeabi_fdiv+0x32>
 80005f2:	230c      	movs	r3, #12
 80005f4:	4699      	mov	r9, r3
 80005f6:	3b09      	subs	r3, #9
 80005f8:	27ff      	movs	r7, #255	; 0xff
 80005fa:	469a      	mov	sl, r3
 80005fc:	e783      	b.n	8000506 <__aeabi_fdiv+0x32>
 80005fe:	0028      	movs	r0, r5
 8000600:	f002 f888 	bl	8002714 <__clzsi2>
 8000604:	2776      	movs	r7, #118	; 0x76
 8000606:	1f43      	subs	r3, r0, #5
 8000608:	409d      	lsls	r5, r3
 800060a:	2300      	movs	r3, #0
 800060c:	427f      	negs	r7, r7
 800060e:	4699      	mov	r9, r3
 8000610:	469a      	mov	sl, r3
 8000612:	1a3f      	subs	r7, r7, r0
 8000614:	e777      	b.n	8000506 <__aeabi_fdiv+0x32>
 8000616:	4640      	mov	r0, r8
 8000618:	f002 f87c 	bl	8002714 <__clzsi2>
 800061c:	4642      	mov	r2, r8
 800061e:	1f43      	subs	r3, r0, #5
 8000620:	409a      	lsls	r2, r3
 8000622:	2376      	movs	r3, #118	; 0x76
 8000624:	425b      	negs	r3, r3
 8000626:	4690      	mov	r8, r2
 8000628:	1a1b      	subs	r3, r3, r0
 800062a:	2200      	movs	r2, #0
 800062c:	e77d      	b.n	800052a <__aeabi_fdiv+0x56>
 800062e:	23ff      	movs	r3, #255	; 0xff
 8000630:	2203      	movs	r2, #3
 8000632:	e77a      	b.n	800052a <__aeabi_fdiv+0x56>
 8000634:	000e      	movs	r6, r1
 8000636:	20ff      	movs	r0, #255	; 0xff
 8000638:	2500      	movs	r5, #0
 800063a:	e7ac      	b.n	8000596 <__aeabi_fdiv+0xc2>
 800063c:	2001      	movs	r0, #1
 800063e:	1ac0      	subs	r0, r0, r3
 8000640:	281b      	cmp	r0, #27
 8000642:	dca6      	bgt.n	8000592 <__aeabi_fdiv+0xbe>
 8000644:	379e      	adds	r7, #158	; 0x9e
 8000646:	002a      	movs	r2, r5
 8000648:	40bd      	lsls	r5, r7
 800064a:	40c2      	lsrs	r2, r0
 800064c:	1e6b      	subs	r3, r5, #1
 800064e:	419d      	sbcs	r5, r3
 8000650:	4315      	orrs	r5, r2
 8000652:	076b      	lsls	r3, r5, #29
 8000654:	d004      	beq.n	8000660 <__aeabi_fdiv+0x18c>
 8000656:	230f      	movs	r3, #15
 8000658:	402b      	ands	r3, r5
 800065a:	2b04      	cmp	r3, #4
 800065c:	d000      	beq.n	8000660 <__aeabi_fdiv+0x18c>
 800065e:	3504      	adds	r5, #4
 8000660:	016b      	lsls	r3, r5, #5
 8000662:	d544      	bpl.n	80006ee <__aeabi_fdiv+0x21a>
 8000664:	2001      	movs	r0, #1
 8000666:	2500      	movs	r5, #0
 8000668:	e795      	b.n	8000596 <__aeabi_fdiv+0xc2>
 800066a:	20ff      	movs	r0, #255	; 0xff
 800066c:	2500      	movs	r5, #0
 800066e:	e792      	b.n	8000596 <__aeabi_fdiv+0xc2>
 8000670:	2580      	movs	r5, #128	; 0x80
 8000672:	2600      	movs	r6, #0
 8000674:	20ff      	movs	r0, #255	; 0xff
 8000676:	03ed      	lsls	r5, r5, #15
 8000678:	e78d      	b.n	8000596 <__aeabi_fdiv+0xc2>
 800067a:	2300      	movs	r3, #0
 800067c:	4698      	mov	r8, r3
 800067e:	2080      	movs	r0, #128	; 0x80
 8000680:	03c0      	lsls	r0, r0, #15
 8000682:	4205      	tst	r5, r0
 8000684:	d009      	beq.n	800069a <__aeabi_fdiv+0x1c6>
 8000686:	4643      	mov	r3, r8
 8000688:	4203      	tst	r3, r0
 800068a:	d106      	bne.n	800069a <__aeabi_fdiv+0x1c6>
 800068c:	4645      	mov	r5, r8
 800068e:	4305      	orrs	r5, r0
 8000690:	026d      	lsls	r5, r5, #9
 8000692:	0026      	movs	r6, r4
 8000694:	20ff      	movs	r0, #255	; 0xff
 8000696:	0a6d      	lsrs	r5, r5, #9
 8000698:	e77d      	b.n	8000596 <__aeabi_fdiv+0xc2>
 800069a:	2080      	movs	r0, #128	; 0x80
 800069c:	03c0      	lsls	r0, r0, #15
 800069e:	4305      	orrs	r5, r0
 80006a0:	026d      	lsls	r5, r5, #9
 80006a2:	20ff      	movs	r0, #255	; 0xff
 80006a4:	0a6d      	lsrs	r5, r5, #9
 80006a6:	e776      	b.n	8000596 <__aeabi_fdiv+0xc2>
 80006a8:	4642      	mov	r2, r8
 80006aa:	016b      	lsls	r3, r5, #5
 80006ac:	0150      	lsls	r0, r2, #5
 80006ae:	4283      	cmp	r3, r0
 80006b0:	d219      	bcs.n	80006e6 <__aeabi_fdiv+0x212>
 80006b2:	221b      	movs	r2, #27
 80006b4:	2500      	movs	r5, #0
 80006b6:	3f01      	subs	r7, #1
 80006b8:	2601      	movs	r6, #1
 80006ba:	001c      	movs	r4, r3
 80006bc:	006d      	lsls	r5, r5, #1
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	2c00      	cmp	r4, #0
 80006c2:	db01      	blt.n	80006c8 <__aeabi_fdiv+0x1f4>
 80006c4:	4298      	cmp	r0, r3
 80006c6:	d801      	bhi.n	80006cc <__aeabi_fdiv+0x1f8>
 80006c8:	1a1b      	subs	r3, r3, r0
 80006ca:	4335      	orrs	r5, r6
 80006cc:	3a01      	subs	r2, #1
 80006ce:	2a00      	cmp	r2, #0
 80006d0:	d1f3      	bne.n	80006ba <__aeabi_fdiv+0x1e6>
 80006d2:	1e5a      	subs	r2, r3, #1
 80006d4:	4193      	sbcs	r3, r2
 80006d6:	431d      	orrs	r5, r3
 80006d8:	003b      	movs	r3, r7
 80006da:	337f      	adds	r3, #127	; 0x7f
 80006dc:	000e      	movs	r6, r1
 80006de:	2b00      	cmp	r3, #0
 80006e0:	dd00      	ble.n	80006e4 <__aeabi_fdiv+0x210>
 80006e2:	e741      	b.n	8000568 <__aeabi_fdiv+0x94>
 80006e4:	e7aa      	b.n	800063c <__aeabi_fdiv+0x168>
 80006e6:	221a      	movs	r2, #26
 80006e8:	2501      	movs	r5, #1
 80006ea:	1a1b      	subs	r3, r3, r0
 80006ec:	e7e4      	b.n	80006b8 <__aeabi_fdiv+0x1e4>
 80006ee:	01ad      	lsls	r5, r5, #6
 80006f0:	2000      	movs	r0, #0
 80006f2:	0a6d      	lsrs	r5, r5, #9
 80006f4:	e74f      	b.n	8000596 <__aeabi_fdiv+0xc2>
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	08007334 	.word	0x08007334
 80006fc:	f7ffffff 	.word	0xf7ffffff
 8000700:	08007374 	.word	0x08007374

08000704 <__eqsf2>:
 8000704:	b570      	push	{r4, r5, r6, lr}
 8000706:	0042      	lsls	r2, r0, #1
 8000708:	0245      	lsls	r5, r0, #9
 800070a:	024e      	lsls	r6, r1, #9
 800070c:	004c      	lsls	r4, r1, #1
 800070e:	0fc3      	lsrs	r3, r0, #31
 8000710:	0a6d      	lsrs	r5, r5, #9
 8000712:	2001      	movs	r0, #1
 8000714:	0e12      	lsrs	r2, r2, #24
 8000716:	0a76      	lsrs	r6, r6, #9
 8000718:	0e24      	lsrs	r4, r4, #24
 800071a:	0fc9      	lsrs	r1, r1, #31
 800071c:	2aff      	cmp	r2, #255	; 0xff
 800071e:	d006      	beq.n	800072e <__eqsf2+0x2a>
 8000720:	2cff      	cmp	r4, #255	; 0xff
 8000722:	d003      	beq.n	800072c <__eqsf2+0x28>
 8000724:	42a2      	cmp	r2, r4
 8000726:	d101      	bne.n	800072c <__eqsf2+0x28>
 8000728:	42b5      	cmp	r5, r6
 800072a:	d006      	beq.n	800073a <__eqsf2+0x36>
 800072c:	bd70      	pop	{r4, r5, r6, pc}
 800072e:	2d00      	cmp	r5, #0
 8000730:	d1fc      	bne.n	800072c <__eqsf2+0x28>
 8000732:	2cff      	cmp	r4, #255	; 0xff
 8000734:	d1fa      	bne.n	800072c <__eqsf2+0x28>
 8000736:	2e00      	cmp	r6, #0
 8000738:	d1f8      	bne.n	800072c <__eqsf2+0x28>
 800073a:	428b      	cmp	r3, r1
 800073c:	d006      	beq.n	800074c <__eqsf2+0x48>
 800073e:	2001      	movs	r0, #1
 8000740:	2a00      	cmp	r2, #0
 8000742:	d1f3      	bne.n	800072c <__eqsf2+0x28>
 8000744:	0028      	movs	r0, r5
 8000746:	1e43      	subs	r3, r0, #1
 8000748:	4198      	sbcs	r0, r3
 800074a:	e7ef      	b.n	800072c <__eqsf2+0x28>
 800074c:	2000      	movs	r0, #0
 800074e:	e7ed      	b.n	800072c <__eqsf2+0x28>

08000750 <__gesf2>:
 8000750:	b570      	push	{r4, r5, r6, lr}
 8000752:	0042      	lsls	r2, r0, #1
 8000754:	0245      	lsls	r5, r0, #9
 8000756:	024e      	lsls	r6, r1, #9
 8000758:	004c      	lsls	r4, r1, #1
 800075a:	0fc3      	lsrs	r3, r0, #31
 800075c:	0a6d      	lsrs	r5, r5, #9
 800075e:	0e12      	lsrs	r2, r2, #24
 8000760:	0a76      	lsrs	r6, r6, #9
 8000762:	0e24      	lsrs	r4, r4, #24
 8000764:	0fc8      	lsrs	r0, r1, #31
 8000766:	2aff      	cmp	r2, #255	; 0xff
 8000768:	d01b      	beq.n	80007a2 <__gesf2+0x52>
 800076a:	2cff      	cmp	r4, #255	; 0xff
 800076c:	d00e      	beq.n	800078c <__gesf2+0x3c>
 800076e:	2a00      	cmp	r2, #0
 8000770:	d11b      	bne.n	80007aa <__gesf2+0x5a>
 8000772:	2c00      	cmp	r4, #0
 8000774:	d101      	bne.n	800077a <__gesf2+0x2a>
 8000776:	2e00      	cmp	r6, #0
 8000778:	d01c      	beq.n	80007b4 <__gesf2+0x64>
 800077a:	2d00      	cmp	r5, #0
 800077c:	d00c      	beq.n	8000798 <__gesf2+0x48>
 800077e:	4283      	cmp	r3, r0
 8000780:	d01c      	beq.n	80007bc <__gesf2+0x6c>
 8000782:	2102      	movs	r1, #2
 8000784:	1e58      	subs	r0, r3, #1
 8000786:	4008      	ands	r0, r1
 8000788:	3801      	subs	r0, #1
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	2e00      	cmp	r6, #0
 800078e:	d122      	bne.n	80007d6 <__gesf2+0x86>
 8000790:	2a00      	cmp	r2, #0
 8000792:	d1f4      	bne.n	800077e <__gesf2+0x2e>
 8000794:	2d00      	cmp	r5, #0
 8000796:	d1f2      	bne.n	800077e <__gesf2+0x2e>
 8000798:	2800      	cmp	r0, #0
 800079a:	d1f6      	bne.n	800078a <__gesf2+0x3a>
 800079c:	2001      	movs	r0, #1
 800079e:	4240      	negs	r0, r0
 80007a0:	e7f3      	b.n	800078a <__gesf2+0x3a>
 80007a2:	2d00      	cmp	r5, #0
 80007a4:	d117      	bne.n	80007d6 <__gesf2+0x86>
 80007a6:	2cff      	cmp	r4, #255	; 0xff
 80007a8:	d0f0      	beq.n	800078c <__gesf2+0x3c>
 80007aa:	2c00      	cmp	r4, #0
 80007ac:	d1e7      	bne.n	800077e <__gesf2+0x2e>
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	d1e5      	bne.n	800077e <__gesf2+0x2e>
 80007b2:	e7e6      	b.n	8000782 <__gesf2+0x32>
 80007b4:	2000      	movs	r0, #0
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	d0e7      	beq.n	800078a <__gesf2+0x3a>
 80007ba:	e7e2      	b.n	8000782 <__gesf2+0x32>
 80007bc:	42a2      	cmp	r2, r4
 80007be:	dc05      	bgt.n	80007cc <__gesf2+0x7c>
 80007c0:	dbea      	blt.n	8000798 <__gesf2+0x48>
 80007c2:	42b5      	cmp	r5, r6
 80007c4:	d802      	bhi.n	80007cc <__gesf2+0x7c>
 80007c6:	d3e7      	bcc.n	8000798 <__gesf2+0x48>
 80007c8:	2000      	movs	r0, #0
 80007ca:	e7de      	b.n	800078a <__gesf2+0x3a>
 80007cc:	4243      	negs	r3, r0
 80007ce:	4158      	adcs	r0, r3
 80007d0:	0040      	lsls	r0, r0, #1
 80007d2:	3801      	subs	r0, #1
 80007d4:	e7d9      	b.n	800078a <__gesf2+0x3a>
 80007d6:	2002      	movs	r0, #2
 80007d8:	4240      	negs	r0, r0
 80007da:	e7d6      	b.n	800078a <__gesf2+0x3a>

080007dc <__lesf2>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	0042      	lsls	r2, r0, #1
 80007e0:	0245      	lsls	r5, r0, #9
 80007e2:	024e      	lsls	r6, r1, #9
 80007e4:	004c      	lsls	r4, r1, #1
 80007e6:	0fc3      	lsrs	r3, r0, #31
 80007e8:	0a6d      	lsrs	r5, r5, #9
 80007ea:	0e12      	lsrs	r2, r2, #24
 80007ec:	0a76      	lsrs	r6, r6, #9
 80007ee:	0e24      	lsrs	r4, r4, #24
 80007f0:	0fc8      	lsrs	r0, r1, #31
 80007f2:	2aff      	cmp	r2, #255	; 0xff
 80007f4:	d00b      	beq.n	800080e <__lesf2+0x32>
 80007f6:	2cff      	cmp	r4, #255	; 0xff
 80007f8:	d00d      	beq.n	8000816 <__lesf2+0x3a>
 80007fa:	2a00      	cmp	r2, #0
 80007fc:	d11f      	bne.n	800083e <__lesf2+0x62>
 80007fe:	2c00      	cmp	r4, #0
 8000800:	d116      	bne.n	8000830 <__lesf2+0x54>
 8000802:	2e00      	cmp	r6, #0
 8000804:	d114      	bne.n	8000830 <__lesf2+0x54>
 8000806:	2000      	movs	r0, #0
 8000808:	2d00      	cmp	r5, #0
 800080a:	d010      	beq.n	800082e <__lesf2+0x52>
 800080c:	e009      	b.n	8000822 <__lesf2+0x46>
 800080e:	2d00      	cmp	r5, #0
 8000810:	d10c      	bne.n	800082c <__lesf2+0x50>
 8000812:	2cff      	cmp	r4, #255	; 0xff
 8000814:	d113      	bne.n	800083e <__lesf2+0x62>
 8000816:	2e00      	cmp	r6, #0
 8000818:	d108      	bne.n	800082c <__lesf2+0x50>
 800081a:	2a00      	cmp	r2, #0
 800081c:	d008      	beq.n	8000830 <__lesf2+0x54>
 800081e:	4283      	cmp	r3, r0
 8000820:	d012      	beq.n	8000848 <__lesf2+0x6c>
 8000822:	2102      	movs	r1, #2
 8000824:	1e58      	subs	r0, r3, #1
 8000826:	4008      	ands	r0, r1
 8000828:	3801      	subs	r0, #1
 800082a:	e000      	b.n	800082e <__lesf2+0x52>
 800082c:	2002      	movs	r0, #2
 800082e:	bd70      	pop	{r4, r5, r6, pc}
 8000830:	2d00      	cmp	r5, #0
 8000832:	d1f4      	bne.n	800081e <__lesf2+0x42>
 8000834:	2800      	cmp	r0, #0
 8000836:	d1fa      	bne.n	800082e <__lesf2+0x52>
 8000838:	2001      	movs	r0, #1
 800083a:	4240      	negs	r0, r0
 800083c:	e7f7      	b.n	800082e <__lesf2+0x52>
 800083e:	2c00      	cmp	r4, #0
 8000840:	d1ed      	bne.n	800081e <__lesf2+0x42>
 8000842:	2e00      	cmp	r6, #0
 8000844:	d1eb      	bne.n	800081e <__lesf2+0x42>
 8000846:	e7ec      	b.n	8000822 <__lesf2+0x46>
 8000848:	42a2      	cmp	r2, r4
 800084a:	dc05      	bgt.n	8000858 <__lesf2+0x7c>
 800084c:	dbf2      	blt.n	8000834 <__lesf2+0x58>
 800084e:	42b5      	cmp	r5, r6
 8000850:	d802      	bhi.n	8000858 <__lesf2+0x7c>
 8000852:	d3ef      	bcc.n	8000834 <__lesf2+0x58>
 8000854:	2000      	movs	r0, #0
 8000856:	e7ea      	b.n	800082e <__lesf2+0x52>
 8000858:	4243      	negs	r3, r0
 800085a:	4158      	adcs	r0, r3
 800085c:	0040      	lsls	r0, r0, #1
 800085e:	3801      	subs	r0, #1
 8000860:	e7e5      	b.n	800082e <__lesf2+0x52>
 8000862:	46c0      	nop			; (mov r8, r8)

08000864 <__aeabi_fsub>:
 8000864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000866:	46ce      	mov	lr, r9
 8000868:	4647      	mov	r7, r8
 800086a:	0243      	lsls	r3, r0, #9
 800086c:	0a5b      	lsrs	r3, r3, #9
 800086e:	024e      	lsls	r6, r1, #9
 8000870:	00da      	lsls	r2, r3, #3
 8000872:	4694      	mov	ip, r2
 8000874:	0a72      	lsrs	r2, r6, #9
 8000876:	4691      	mov	r9, r2
 8000878:	0045      	lsls	r5, r0, #1
 800087a:	004a      	lsls	r2, r1, #1
 800087c:	b580      	push	{r7, lr}
 800087e:	0e2d      	lsrs	r5, r5, #24
 8000880:	001f      	movs	r7, r3
 8000882:	0fc4      	lsrs	r4, r0, #31
 8000884:	0e12      	lsrs	r2, r2, #24
 8000886:	0fc9      	lsrs	r1, r1, #31
 8000888:	09b6      	lsrs	r6, r6, #6
 800088a:	2aff      	cmp	r2, #255	; 0xff
 800088c:	d05b      	beq.n	8000946 <__aeabi_fsub+0xe2>
 800088e:	2001      	movs	r0, #1
 8000890:	4041      	eors	r1, r0
 8000892:	428c      	cmp	r4, r1
 8000894:	d039      	beq.n	800090a <__aeabi_fsub+0xa6>
 8000896:	1aa8      	subs	r0, r5, r2
 8000898:	2800      	cmp	r0, #0
 800089a:	dd5a      	ble.n	8000952 <__aeabi_fsub+0xee>
 800089c:	2a00      	cmp	r2, #0
 800089e:	d06a      	beq.n	8000976 <__aeabi_fsub+0x112>
 80008a0:	2dff      	cmp	r5, #255	; 0xff
 80008a2:	d100      	bne.n	80008a6 <__aeabi_fsub+0x42>
 80008a4:	e0d9      	b.n	8000a5a <__aeabi_fsub+0x1f6>
 80008a6:	2280      	movs	r2, #128	; 0x80
 80008a8:	04d2      	lsls	r2, r2, #19
 80008aa:	4316      	orrs	r6, r2
 80008ac:	281b      	cmp	r0, #27
 80008ae:	dc00      	bgt.n	80008b2 <__aeabi_fsub+0x4e>
 80008b0:	e0e9      	b.n	8000a86 <__aeabi_fsub+0x222>
 80008b2:	2001      	movs	r0, #1
 80008b4:	4663      	mov	r3, ip
 80008b6:	1a18      	subs	r0, r3, r0
 80008b8:	0143      	lsls	r3, r0, #5
 80008ba:	d400      	bmi.n	80008be <__aeabi_fsub+0x5a>
 80008bc:	e0b4      	b.n	8000a28 <__aeabi_fsub+0x1c4>
 80008be:	0180      	lsls	r0, r0, #6
 80008c0:	0987      	lsrs	r7, r0, #6
 80008c2:	0038      	movs	r0, r7
 80008c4:	f001 ff26 	bl	8002714 <__clzsi2>
 80008c8:	3805      	subs	r0, #5
 80008ca:	4087      	lsls	r7, r0
 80008cc:	4285      	cmp	r5, r0
 80008ce:	dc00      	bgt.n	80008d2 <__aeabi_fsub+0x6e>
 80008d0:	e0cc      	b.n	8000a6c <__aeabi_fsub+0x208>
 80008d2:	1a2d      	subs	r5, r5, r0
 80008d4:	48b5      	ldr	r0, [pc, #724]	; (8000bac <__aeabi_fsub+0x348>)
 80008d6:	4038      	ands	r0, r7
 80008d8:	0743      	lsls	r3, r0, #29
 80008da:	d004      	beq.n	80008e6 <__aeabi_fsub+0x82>
 80008dc:	230f      	movs	r3, #15
 80008de:	4003      	ands	r3, r0
 80008e0:	2b04      	cmp	r3, #4
 80008e2:	d000      	beq.n	80008e6 <__aeabi_fsub+0x82>
 80008e4:	3004      	adds	r0, #4
 80008e6:	0143      	lsls	r3, r0, #5
 80008e8:	d400      	bmi.n	80008ec <__aeabi_fsub+0x88>
 80008ea:	e0a0      	b.n	8000a2e <__aeabi_fsub+0x1ca>
 80008ec:	1c6a      	adds	r2, r5, #1
 80008ee:	2dfe      	cmp	r5, #254	; 0xfe
 80008f0:	d100      	bne.n	80008f4 <__aeabi_fsub+0x90>
 80008f2:	e08d      	b.n	8000a10 <__aeabi_fsub+0x1ac>
 80008f4:	0180      	lsls	r0, r0, #6
 80008f6:	0a47      	lsrs	r7, r0, #9
 80008f8:	b2d2      	uxtb	r2, r2
 80008fa:	05d0      	lsls	r0, r2, #23
 80008fc:	4338      	orrs	r0, r7
 80008fe:	07e4      	lsls	r4, r4, #31
 8000900:	4320      	orrs	r0, r4
 8000902:	bcc0      	pop	{r6, r7}
 8000904:	46b9      	mov	r9, r7
 8000906:	46b0      	mov	r8, r6
 8000908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800090a:	1aa8      	subs	r0, r5, r2
 800090c:	4680      	mov	r8, r0
 800090e:	2800      	cmp	r0, #0
 8000910:	dd45      	ble.n	800099e <__aeabi_fsub+0x13a>
 8000912:	2a00      	cmp	r2, #0
 8000914:	d070      	beq.n	80009f8 <__aeabi_fsub+0x194>
 8000916:	2dff      	cmp	r5, #255	; 0xff
 8000918:	d100      	bne.n	800091c <__aeabi_fsub+0xb8>
 800091a:	e09e      	b.n	8000a5a <__aeabi_fsub+0x1f6>
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	04db      	lsls	r3, r3, #19
 8000920:	431e      	orrs	r6, r3
 8000922:	4643      	mov	r3, r8
 8000924:	2b1b      	cmp	r3, #27
 8000926:	dc00      	bgt.n	800092a <__aeabi_fsub+0xc6>
 8000928:	e0d2      	b.n	8000ad0 <__aeabi_fsub+0x26c>
 800092a:	2001      	movs	r0, #1
 800092c:	4460      	add	r0, ip
 800092e:	0143      	lsls	r3, r0, #5
 8000930:	d57a      	bpl.n	8000a28 <__aeabi_fsub+0x1c4>
 8000932:	3501      	adds	r5, #1
 8000934:	2dff      	cmp	r5, #255	; 0xff
 8000936:	d06b      	beq.n	8000a10 <__aeabi_fsub+0x1ac>
 8000938:	2301      	movs	r3, #1
 800093a:	4a9d      	ldr	r2, [pc, #628]	; (8000bb0 <__aeabi_fsub+0x34c>)
 800093c:	4003      	ands	r3, r0
 800093e:	0840      	lsrs	r0, r0, #1
 8000940:	4010      	ands	r0, r2
 8000942:	4318      	orrs	r0, r3
 8000944:	e7c8      	b.n	80008d8 <__aeabi_fsub+0x74>
 8000946:	2e00      	cmp	r6, #0
 8000948:	d020      	beq.n	800098c <__aeabi_fsub+0x128>
 800094a:	428c      	cmp	r4, r1
 800094c:	d023      	beq.n	8000996 <__aeabi_fsub+0x132>
 800094e:	0028      	movs	r0, r5
 8000950:	38ff      	subs	r0, #255	; 0xff
 8000952:	2800      	cmp	r0, #0
 8000954:	d039      	beq.n	80009ca <__aeabi_fsub+0x166>
 8000956:	1b57      	subs	r7, r2, r5
 8000958:	2d00      	cmp	r5, #0
 800095a:	d000      	beq.n	800095e <__aeabi_fsub+0xfa>
 800095c:	e09d      	b.n	8000a9a <__aeabi_fsub+0x236>
 800095e:	4663      	mov	r3, ip
 8000960:	2b00      	cmp	r3, #0
 8000962:	d100      	bne.n	8000966 <__aeabi_fsub+0x102>
 8000964:	e0db      	b.n	8000b1e <__aeabi_fsub+0x2ba>
 8000966:	1e7b      	subs	r3, r7, #1
 8000968:	2f01      	cmp	r7, #1
 800096a:	d100      	bne.n	800096e <__aeabi_fsub+0x10a>
 800096c:	e10d      	b.n	8000b8a <__aeabi_fsub+0x326>
 800096e:	2fff      	cmp	r7, #255	; 0xff
 8000970:	d071      	beq.n	8000a56 <__aeabi_fsub+0x1f2>
 8000972:	001f      	movs	r7, r3
 8000974:	e098      	b.n	8000aa8 <__aeabi_fsub+0x244>
 8000976:	2e00      	cmp	r6, #0
 8000978:	d100      	bne.n	800097c <__aeabi_fsub+0x118>
 800097a:	e0a7      	b.n	8000acc <__aeabi_fsub+0x268>
 800097c:	1e42      	subs	r2, r0, #1
 800097e:	2801      	cmp	r0, #1
 8000980:	d100      	bne.n	8000984 <__aeabi_fsub+0x120>
 8000982:	e0e6      	b.n	8000b52 <__aeabi_fsub+0x2ee>
 8000984:	28ff      	cmp	r0, #255	; 0xff
 8000986:	d068      	beq.n	8000a5a <__aeabi_fsub+0x1f6>
 8000988:	0010      	movs	r0, r2
 800098a:	e78f      	b.n	80008ac <__aeabi_fsub+0x48>
 800098c:	2001      	movs	r0, #1
 800098e:	4041      	eors	r1, r0
 8000990:	42a1      	cmp	r1, r4
 8000992:	d000      	beq.n	8000996 <__aeabi_fsub+0x132>
 8000994:	e77f      	b.n	8000896 <__aeabi_fsub+0x32>
 8000996:	20ff      	movs	r0, #255	; 0xff
 8000998:	4240      	negs	r0, r0
 800099a:	4680      	mov	r8, r0
 800099c:	44a8      	add	r8, r5
 800099e:	4640      	mov	r0, r8
 80009a0:	2800      	cmp	r0, #0
 80009a2:	d038      	beq.n	8000a16 <__aeabi_fsub+0x1b2>
 80009a4:	1b51      	subs	r1, r2, r5
 80009a6:	2d00      	cmp	r5, #0
 80009a8:	d100      	bne.n	80009ac <__aeabi_fsub+0x148>
 80009aa:	e0ae      	b.n	8000b0a <__aeabi_fsub+0x2a6>
 80009ac:	2aff      	cmp	r2, #255	; 0xff
 80009ae:	d100      	bne.n	80009b2 <__aeabi_fsub+0x14e>
 80009b0:	e0df      	b.n	8000b72 <__aeabi_fsub+0x30e>
 80009b2:	2380      	movs	r3, #128	; 0x80
 80009b4:	4660      	mov	r0, ip
 80009b6:	04db      	lsls	r3, r3, #19
 80009b8:	4318      	orrs	r0, r3
 80009ba:	4684      	mov	ip, r0
 80009bc:	291b      	cmp	r1, #27
 80009be:	dc00      	bgt.n	80009c2 <__aeabi_fsub+0x15e>
 80009c0:	e0d9      	b.n	8000b76 <__aeabi_fsub+0x312>
 80009c2:	2001      	movs	r0, #1
 80009c4:	0015      	movs	r5, r2
 80009c6:	1980      	adds	r0, r0, r6
 80009c8:	e7b1      	b.n	800092e <__aeabi_fsub+0xca>
 80009ca:	20fe      	movs	r0, #254	; 0xfe
 80009cc:	1c6a      	adds	r2, r5, #1
 80009ce:	4210      	tst	r0, r2
 80009d0:	d171      	bne.n	8000ab6 <__aeabi_fsub+0x252>
 80009d2:	2d00      	cmp	r5, #0
 80009d4:	d000      	beq.n	80009d8 <__aeabi_fsub+0x174>
 80009d6:	e0a6      	b.n	8000b26 <__aeabi_fsub+0x2c2>
 80009d8:	4663      	mov	r3, ip
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d100      	bne.n	80009e0 <__aeabi_fsub+0x17c>
 80009de:	e0d9      	b.n	8000b94 <__aeabi_fsub+0x330>
 80009e0:	2200      	movs	r2, #0
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fsub+0x184>
 80009e6:	e788      	b.n	80008fa <__aeabi_fsub+0x96>
 80009e8:	1b98      	subs	r0, r3, r6
 80009ea:	0143      	lsls	r3, r0, #5
 80009ec:	d400      	bmi.n	80009f0 <__aeabi_fsub+0x18c>
 80009ee:	e0e1      	b.n	8000bb4 <__aeabi_fsub+0x350>
 80009f0:	4663      	mov	r3, ip
 80009f2:	000c      	movs	r4, r1
 80009f4:	1af0      	subs	r0, r6, r3
 80009f6:	e76f      	b.n	80008d8 <__aeabi_fsub+0x74>
 80009f8:	2e00      	cmp	r6, #0
 80009fa:	d100      	bne.n	80009fe <__aeabi_fsub+0x19a>
 80009fc:	e0b7      	b.n	8000b6e <__aeabi_fsub+0x30a>
 80009fe:	0002      	movs	r2, r0
 8000a00:	3a01      	subs	r2, #1
 8000a02:	2801      	cmp	r0, #1
 8000a04:	d100      	bne.n	8000a08 <__aeabi_fsub+0x1a4>
 8000a06:	e09c      	b.n	8000b42 <__aeabi_fsub+0x2de>
 8000a08:	28ff      	cmp	r0, #255	; 0xff
 8000a0a:	d026      	beq.n	8000a5a <__aeabi_fsub+0x1f6>
 8000a0c:	4690      	mov	r8, r2
 8000a0e:	e788      	b.n	8000922 <__aeabi_fsub+0xbe>
 8000a10:	22ff      	movs	r2, #255	; 0xff
 8000a12:	2700      	movs	r7, #0
 8000a14:	e771      	b.n	80008fa <__aeabi_fsub+0x96>
 8000a16:	20fe      	movs	r0, #254	; 0xfe
 8000a18:	1c6a      	adds	r2, r5, #1
 8000a1a:	4210      	tst	r0, r2
 8000a1c:	d064      	beq.n	8000ae8 <__aeabi_fsub+0x284>
 8000a1e:	2aff      	cmp	r2, #255	; 0xff
 8000a20:	d0f6      	beq.n	8000a10 <__aeabi_fsub+0x1ac>
 8000a22:	0015      	movs	r5, r2
 8000a24:	4466      	add	r6, ip
 8000a26:	0870      	lsrs	r0, r6, #1
 8000a28:	0743      	lsls	r3, r0, #29
 8000a2a:	d000      	beq.n	8000a2e <__aeabi_fsub+0x1ca>
 8000a2c:	e756      	b.n	80008dc <__aeabi_fsub+0x78>
 8000a2e:	08c3      	lsrs	r3, r0, #3
 8000a30:	2dff      	cmp	r5, #255	; 0xff
 8000a32:	d012      	beq.n	8000a5a <__aeabi_fsub+0x1f6>
 8000a34:	025b      	lsls	r3, r3, #9
 8000a36:	0a5f      	lsrs	r7, r3, #9
 8000a38:	b2ea      	uxtb	r2, r5
 8000a3a:	e75e      	b.n	80008fa <__aeabi_fsub+0x96>
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	2a00      	cmp	r2, #0
 8000a40:	d100      	bne.n	8000a44 <__aeabi_fsub+0x1e0>
 8000a42:	e096      	b.n	8000b72 <__aeabi_fsub+0x30e>
 8000a44:	2e00      	cmp	r6, #0
 8000a46:	d008      	beq.n	8000a5a <__aeabi_fsub+0x1f6>
 8000a48:	2280      	movs	r2, #128	; 0x80
 8000a4a:	03d2      	lsls	r2, r2, #15
 8000a4c:	4213      	tst	r3, r2
 8000a4e:	d004      	beq.n	8000a5a <__aeabi_fsub+0x1f6>
 8000a50:	4648      	mov	r0, r9
 8000a52:	4210      	tst	r0, r2
 8000a54:	d101      	bne.n	8000a5a <__aeabi_fsub+0x1f6>
 8000a56:	000c      	movs	r4, r1
 8000a58:	464b      	mov	r3, r9
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d0d8      	beq.n	8000a10 <__aeabi_fsub+0x1ac>
 8000a5e:	2780      	movs	r7, #128	; 0x80
 8000a60:	03ff      	lsls	r7, r7, #15
 8000a62:	431f      	orrs	r7, r3
 8000a64:	027f      	lsls	r7, r7, #9
 8000a66:	22ff      	movs	r2, #255	; 0xff
 8000a68:	0a7f      	lsrs	r7, r7, #9
 8000a6a:	e746      	b.n	80008fa <__aeabi_fsub+0x96>
 8000a6c:	2320      	movs	r3, #32
 8000a6e:	003a      	movs	r2, r7
 8000a70:	1b45      	subs	r5, r0, r5
 8000a72:	0038      	movs	r0, r7
 8000a74:	3501      	adds	r5, #1
 8000a76:	40ea      	lsrs	r2, r5
 8000a78:	1b5d      	subs	r5, r3, r5
 8000a7a:	40a8      	lsls	r0, r5
 8000a7c:	1e43      	subs	r3, r0, #1
 8000a7e:	4198      	sbcs	r0, r3
 8000a80:	2500      	movs	r5, #0
 8000a82:	4310      	orrs	r0, r2
 8000a84:	e728      	b.n	80008d8 <__aeabi_fsub+0x74>
 8000a86:	2320      	movs	r3, #32
 8000a88:	1a1b      	subs	r3, r3, r0
 8000a8a:	0032      	movs	r2, r6
 8000a8c:	409e      	lsls	r6, r3
 8000a8e:	40c2      	lsrs	r2, r0
 8000a90:	0030      	movs	r0, r6
 8000a92:	1e43      	subs	r3, r0, #1
 8000a94:	4198      	sbcs	r0, r3
 8000a96:	4310      	orrs	r0, r2
 8000a98:	e70c      	b.n	80008b4 <__aeabi_fsub+0x50>
 8000a9a:	2aff      	cmp	r2, #255	; 0xff
 8000a9c:	d0db      	beq.n	8000a56 <__aeabi_fsub+0x1f2>
 8000a9e:	2380      	movs	r3, #128	; 0x80
 8000aa0:	4660      	mov	r0, ip
 8000aa2:	04db      	lsls	r3, r3, #19
 8000aa4:	4318      	orrs	r0, r3
 8000aa6:	4684      	mov	ip, r0
 8000aa8:	2f1b      	cmp	r7, #27
 8000aaa:	dd56      	ble.n	8000b5a <__aeabi_fsub+0x2f6>
 8000aac:	2001      	movs	r0, #1
 8000aae:	000c      	movs	r4, r1
 8000ab0:	0015      	movs	r5, r2
 8000ab2:	1a30      	subs	r0, r6, r0
 8000ab4:	e700      	b.n	80008b8 <__aeabi_fsub+0x54>
 8000ab6:	4663      	mov	r3, ip
 8000ab8:	1b9f      	subs	r7, r3, r6
 8000aba:	017b      	lsls	r3, r7, #5
 8000abc:	d43d      	bmi.n	8000b3a <__aeabi_fsub+0x2d6>
 8000abe:	2f00      	cmp	r7, #0
 8000ac0:	d000      	beq.n	8000ac4 <__aeabi_fsub+0x260>
 8000ac2:	e6fe      	b.n	80008c2 <__aeabi_fsub+0x5e>
 8000ac4:	2400      	movs	r4, #0
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2700      	movs	r7, #0
 8000aca:	e716      	b.n	80008fa <__aeabi_fsub+0x96>
 8000acc:	0005      	movs	r5, r0
 8000ace:	e7af      	b.n	8000a30 <__aeabi_fsub+0x1cc>
 8000ad0:	0032      	movs	r2, r6
 8000ad2:	4643      	mov	r3, r8
 8000ad4:	4641      	mov	r1, r8
 8000ad6:	40da      	lsrs	r2, r3
 8000ad8:	2320      	movs	r3, #32
 8000ada:	1a5b      	subs	r3, r3, r1
 8000adc:	409e      	lsls	r6, r3
 8000ade:	0030      	movs	r0, r6
 8000ae0:	1e43      	subs	r3, r0, #1
 8000ae2:	4198      	sbcs	r0, r3
 8000ae4:	4310      	orrs	r0, r2
 8000ae6:	e721      	b.n	800092c <__aeabi_fsub+0xc8>
 8000ae8:	2d00      	cmp	r5, #0
 8000aea:	d1a7      	bne.n	8000a3c <__aeabi_fsub+0x1d8>
 8000aec:	4663      	mov	r3, ip
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d059      	beq.n	8000ba6 <__aeabi_fsub+0x342>
 8000af2:	2200      	movs	r2, #0
 8000af4:	2e00      	cmp	r6, #0
 8000af6:	d100      	bne.n	8000afa <__aeabi_fsub+0x296>
 8000af8:	e6ff      	b.n	80008fa <__aeabi_fsub+0x96>
 8000afa:	0030      	movs	r0, r6
 8000afc:	4460      	add	r0, ip
 8000afe:	0143      	lsls	r3, r0, #5
 8000b00:	d592      	bpl.n	8000a28 <__aeabi_fsub+0x1c4>
 8000b02:	4b2a      	ldr	r3, [pc, #168]	; (8000bac <__aeabi_fsub+0x348>)
 8000b04:	3501      	adds	r5, #1
 8000b06:	4018      	ands	r0, r3
 8000b08:	e78e      	b.n	8000a28 <__aeabi_fsub+0x1c4>
 8000b0a:	4663      	mov	r3, ip
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d047      	beq.n	8000ba0 <__aeabi_fsub+0x33c>
 8000b10:	1e4b      	subs	r3, r1, #1
 8000b12:	2901      	cmp	r1, #1
 8000b14:	d015      	beq.n	8000b42 <__aeabi_fsub+0x2de>
 8000b16:	29ff      	cmp	r1, #255	; 0xff
 8000b18:	d02b      	beq.n	8000b72 <__aeabi_fsub+0x30e>
 8000b1a:	0019      	movs	r1, r3
 8000b1c:	e74e      	b.n	80009bc <__aeabi_fsub+0x158>
 8000b1e:	000c      	movs	r4, r1
 8000b20:	464b      	mov	r3, r9
 8000b22:	003d      	movs	r5, r7
 8000b24:	e784      	b.n	8000a30 <__aeabi_fsub+0x1cc>
 8000b26:	4662      	mov	r2, ip
 8000b28:	2a00      	cmp	r2, #0
 8000b2a:	d18b      	bne.n	8000a44 <__aeabi_fsub+0x1e0>
 8000b2c:	2e00      	cmp	r6, #0
 8000b2e:	d192      	bne.n	8000a56 <__aeabi_fsub+0x1f2>
 8000b30:	2780      	movs	r7, #128	; 0x80
 8000b32:	2400      	movs	r4, #0
 8000b34:	22ff      	movs	r2, #255	; 0xff
 8000b36:	03ff      	lsls	r7, r7, #15
 8000b38:	e6df      	b.n	80008fa <__aeabi_fsub+0x96>
 8000b3a:	4663      	mov	r3, ip
 8000b3c:	000c      	movs	r4, r1
 8000b3e:	1af7      	subs	r7, r6, r3
 8000b40:	e6bf      	b.n	80008c2 <__aeabi_fsub+0x5e>
 8000b42:	0030      	movs	r0, r6
 8000b44:	4460      	add	r0, ip
 8000b46:	2501      	movs	r5, #1
 8000b48:	0143      	lsls	r3, r0, #5
 8000b4a:	d400      	bmi.n	8000b4e <__aeabi_fsub+0x2ea>
 8000b4c:	e76c      	b.n	8000a28 <__aeabi_fsub+0x1c4>
 8000b4e:	2502      	movs	r5, #2
 8000b50:	e6f2      	b.n	8000938 <__aeabi_fsub+0xd4>
 8000b52:	4663      	mov	r3, ip
 8000b54:	2501      	movs	r5, #1
 8000b56:	1b98      	subs	r0, r3, r6
 8000b58:	e6ae      	b.n	80008b8 <__aeabi_fsub+0x54>
 8000b5a:	2320      	movs	r3, #32
 8000b5c:	4664      	mov	r4, ip
 8000b5e:	4660      	mov	r0, ip
 8000b60:	40fc      	lsrs	r4, r7
 8000b62:	1bdf      	subs	r7, r3, r7
 8000b64:	40b8      	lsls	r0, r7
 8000b66:	1e43      	subs	r3, r0, #1
 8000b68:	4198      	sbcs	r0, r3
 8000b6a:	4320      	orrs	r0, r4
 8000b6c:	e79f      	b.n	8000aae <__aeabi_fsub+0x24a>
 8000b6e:	0005      	movs	r5, r0
 8000b70:	e75e      	b.n	8000a30 <__aeabi_fsub+0x1cc>
 8000b72:	464b      	mov	r3, r9
 8000b74:	e771      	b.n	8000a5a <__aeabi_fsub+0x1f6>
 8000b76:	2320      	movs	r3, #32
 8000b78:	4665      	mov	r5, ip
 8000b7a:	4660      	mov	r0, ip
 8000b7c:	40cd      	lsrs	r5, r1
 8000b7e:	1a59      	subs	r1, r3, r1
 8000b80:	4088      	lsls	r0, r1
 8000b82:	1e43      	subs	r3, r0, #1
 8000b84:	4198      	sbcs	r0, r3
 8000b86:	4328      	orrs	r0, r5
 8000b88:	e71c      	b.n	80009c4 <__aeabi_fsub+0x160>
 8000b8a:	4663      	mov	r3, ip
 8000b8c:	000c      	movs	r4, r1
 8000b8e:	2501      	movs	r5, #1
 8000b90:	1af0      	subs	r0, r6, r3
 8000b92:	e691      	b.n	80008b8 <__aeabi_fsub+0x54>
 8000b94:	2e00      	cmp	r6, #0
 8000b96:	d095      	beq.n	8000ac4 <__aeabi_fsub+0x260>
 8000b98:	000c      	movs	r4, r1
 8000b9a:	464f      	mov	r7, r9
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	e6ac      	b.n	80008fa <__aeabi_fsub+0x96>
 8000ba0:	464b      	mov	r3, r9
 8000ba2:	000d      	movs	r5, r1
 8000ba4:	e744      	b.n	8000a30 <__aeabi_fsub+0x1cc>
 8000ba6:	464f      	mov	r7, r9
 8000ba8:	2200      	movs	r2, #0
 8000baa:	e6a6      	b.n	80008fa <__aeabi_fsub+0x96>
 8000bac:	fbffffff 	.word	0xfbffffff
 8000bb0:	7dffffff 	.word	0x7dffffff
 8000bb4:	2800      	cmp	r0, #0
 8000bb6:	d000      	beq.n	8000bba <__aeabi_fsub+0x356>
 8000bb8:	e736      	b.n	8000a28 <__aeabi_fsub+0x1c4>
 8000bba:	2400      	movs	r4, #0
 8000bbc:	2700      	movs	r7, #0
 8000bbe:	e69c      	b.n	80008fa <__aeabi_fsub+0x96>

08000bc0 <__aeabi_f2iz>:
 8000bc0:	0241      	lsls	r1, r0, #9
 8000bc2:	0042      	lsls	r2, r0, #1
 8000bc4:	0fc3      	lsrs	r3, r0, #31
 8000bc6:	0a49      	lsrs	r1, r1, #9
 8000bc8:	2000      	movs	r0, #0
 8000bca:	0e12      	lsrs	r2, r2, #24
 8000bcc:	2a7e      	cmp	r2, #126	; 0x7e
 8000bce:	dd03      	ble.n	8000bd8 <__aeabi_f2iz+0x18>
 8000bd0:	2a9d      	cmp	r2, #157	; 0x9d
 8000bd2:	dd02      	ble.n	8000bda <__aeabi_f2iz+0x1a>
 8000bd4:	4a09      	ldr	r2, [pc, #36]	; (8000bfc <__aeabi_f2iz+0x3c>)
 8000bd6:	1898      	adds	r0, r3, r2
 8000bd8:	4770      	bx	lr
 8000bda:	2080      	movs	r0, #128	; 0x80
 8000bdc:	0400      	lsls	r0, r0, #16
 8000bde:	4301      	orrs	r1, r0
 8000be0:	2a95      	cmp	r2, #149	; 0x95
 8000be2:	dc07      	bgt.n	8000bf4 <__aeabi_f2iz+0x34>
 8000be4:	2096      	movs	r0, #150	; 0x96
 8000be6:	1a82      	subs	r2, r0, r2
 8000be8:	40d1      	lsrs	r1, r2
 8000bea:	4248      	negs	r0, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1f3      	bne.n	8000bd8 <__aeabi_f2iz+0x18>
 8000bf0:	0008      	movs	r0, r1
 8000bf2:	e7f1      	b.n	8000bd8 <__aeabi_f2iz+0x18>
 8000bf4:	3a96      	subs	r2, #150	; 0x96
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	e7f7      	b.n	8000bea <__aeabi_f2iz+0x2a>
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	7fffffff 	.word	0x7fffffff

08000c00 <__aeabi_i2f>:
 8000c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c02:	2800      	cmp	r0, #0
 8000c04:	d013      	beq.n	8000c2e <__aeabi_i2f+0x2e>
 8000c06:	17c3      	asrs	r3, r0, #31
 8000c08:	18c6      	adds	r6, r0, r3
 8000c0a:	405e      	eors	r6, r3
 8000c0c:	0fc4      	lsrs	r4, r0, #31
 8000c0e:	0030      	movs	r0, r6
 8000c10:	f001 fd80 	bl	8002714 <__clzsi2>
 8000c14:	239e      	movs	r3, #158	; 0x9e
 8000c16:	0005      	movs	r5, r0
 8000c18:	1a1b      	subs	r3, r3, r0
 8000c1a:	2b96      	cmp	r3, #150	; 0x96
 8000c1c:	dc0f      	bgt.n	8000c3e <__aeabi_i2f+0x3e>
 8000c1e:	2808      	cmp	r0, #8
 8000c20:	dd01      	ble.n	8000c26 <__aeabi_i2f+0x26>
 8000c22:	3d08      	subs	r5, #8
 8000c24:	40ae      	lsls	r6, r5
 8000c26:	0276      	lsls	r6, r6, #9
 8000c28:	0a76      	lsrs	r6, r6, #9
 8000c2a:	b2d8      	uxtb	r0, r3
 8000c2c:	e002      	b.n	8000c34 <__aeabi_i2f+0x34>
 8000c2e:	2400      	movs	r4, #0
 8000c30:	2000      	movs	r0, #0
 8000c32:	2600      	movs	r6, #0
 8000c34:	05c0      	lsls	r0, r0, #23
 8000c36:	4330      	orrs	r0, r6
 8000c38:	07e4      	lsls	r4, r4, #31
 8000c3a:	4320      	orrs	r0, r4
 8000c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c3e:	2b99      	cmp	r3, #153	; 0x99
 8000c40:	dd0c      	ble.n	8000c5c <__aeabi_i2f+0x5c>
 8000c42:	2205      	movs	r2, #5
 8000c44:	0031      	movs	r1, r6
 8000c46:	1a12      	subs	r2, r2, r0
 8000c48:	40d1      	lsrs	r1, r2
 8000c4a:	000a      	movs	r2, r1
 8000c4c:	0001      	movs	r1, r0
 8000c4e:	0030      	movs	r0, r6
 8000c50:	311b      	adds	r1, #27
 8000c52:	4088      	lsls	r0, r1
 8000c54:	1e41      	subs	r1, r0, #1
 8000c56:	4188      	sbcs	r0, r1
 8000c58:	4302      	orrs	r2, r0
 8000c5a:	0016      	movs	r6, r2
 8000c5c:	2d05      	cmp	r5, #5
 8000c5e:	dc12      	bgt.n	8000c86 <__aeabi_i2f+0x86>
 8000c60:	0031      	movs	r1, r6
 8000c62:	4f0d      	ldr	r7, [pc, #52]	; (8000c98 <__aeabi_i2f+0x98>)
 8000c64:	4039      	ands	r1, r7
 8000c66:	0772      	lsls	r2, r6, #29
 8000c68:	d009      	beq.n	8000c7e <__aeabi_i2f+0x7e>
 8000c6a:	200f      	movs	r0, #15
 8000c6c:	4030      	ands	r0, r6
 8000c6e:	2804      	cmp	r0, #4
 8000c70:	d005      	beq.n	8000c7e <__aeabi_i2f+0x7e>
 8000c72:	3104      	adds	r1, #4
 8000c74:	014a      	lsls	r2, r1, #5
 8000c76:	d502      	bpl.n	8000c7e <__aeabi_i2f+0x7e>
 8000c78:	239f      	movs	r3, #159	; 0x9f
 8000c7a:	4039      	ands	r1, r7
 8000c7c:	1b5b      	subs	r3, r3, r5
 8000c7e:	0189      	lsls	r1, r1, #6
 8000c80:	0a4e      	lsrs	r6, r1, #9
 8000c82:	b2d8      	uxtb	r0, r3
 8000c84:	e7d6      	b.n	8000c34 <__aeabi_i2f+0x34>
 8000c86:	1f6a      	subs	r2, r5, #5
 8000c88:	4096      	lsls	r6, r2
 8000c8a:	0031      	movs	r1, r6
 8000c8c:	4f02      	ldr	r7, [pc, #8]	; (8000c98 <__aeabi_i2f+0x98>)
 8000c8e:	4039      	ands	r1, r7
 8000c90:	0772      	lsls	r2, r6, #29
 8000c92:	d0f4      	beq.n	8000c7e <__aeabi_i2f+0x7e>
 8000c94:	e7e9      	b.n	8000c6a <__aeabi_i2f+0x6a>
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	fbffffff 	.word	0xfbffffff

08000c9c <__aeabi_ui2f>:
 8000c9c:	b570      	push	{r4, r5, r6, lr}
 8000c9e:	1e05      	subs	r5, r0, #0
 8000ca0:	d00e      	beq.n	8000cc0 <__aeabi_ui2f+0x24>
 8000ca2:	f001 fd37 	bl	8002714 <__clzsi2>
 8000ca6:	239e      	movs	r3, #158	; 0x9e
 8000ca8:	0004      	movs	r4, r0
 8000caa:	1a1b      	subs	r3, r3, r0
 8000cac:	2b96      	cmp	r3, #150	; 0x96
 8000cae:	dc0c      	bgt.n	8000cca <__aeabi_ui2f+0x2e>
 8000cb0:	2808      	cmp	r0, #8
 8000cb2:	dd01      	ble.n	8000cb8 <__aeabi_ui2f+0x1c>
 8000cb4:	3c08      	subs	r4, #8
 8000cb6:	40a5      	lsls	r5, r4
 8000cb8:	026d      	lsls	r5, r5, #9
 8000cba:	0a6d      	lsrs	r5, r5, #9
 8000cbc:	b2d8      	uxtb	r0, r3
 8000cbe:	e001      	b.n	8000cc4 <__aeabi_ui2f+0x28>
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	2500      	movs	r5, #0
 8000cc4:	05c0      	lsls	r0, r0, #23
 8000cc6:	4328      	orrs	r0, r5
 8000cc8:	bd70      	pop	{r4, r5, r6, pc}
 8000cca:	2b99      	cmp	r3, #153	; 0x99
 8000ccc:	dd09      	ble.n	8000ce2 <__aeabi_ui2f+0x46>
 8000cce:	0002      	movs	r2, r0
 8000cd0:	0029      	movs	r1, r5
 8000cd2:	321b      	adds	r2, #27
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	1e4a      	subs	r2, r1, #1
 8000cd8:	4191      	sbcs	r1, r2
 8000cda:	2205      	movs	r2, #5
 8000cdc:	1a12      	subs	r2, r2, r0
 8000cde:	40d5      	lsrs	r5, r2
 8000ce0:	430d      	orrs	r5, r1
 8000ce2:	2c05      	cmp	r4, #5
 8000ce4:	dc12      	bgt.n	8000d0c <__aeabi_ui2f+0x70>
 8000ce6:	0029      	movs	r1, r5
 8000ce8:	4e0c      	ldr	r6, [pc, #48]	; (8000d1c <__aeabi_ui2f+0x80>)
 8000cea:	4031      	ands	r1, r6
 8000cec:	076a      	lsls	r2, r5, #29
 8000cee:	d009      	beq.n	8000d04 <__aeabi_ui2f+0x68>
 8000cf0:	200f      	movs	r0, #15
 8000cf2:	4028      	ands	r0, r5
 8000cf4:	2804      	cmp	r0, #4
 8000cf6:	d005      	beq.n	8000d04 <__aeabi_ui2f+0x68>
 8000cf8:	3104      	adds	r1, #4
 8000cfa:	014a      	lsls	r2, r1, #5
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_ui2f+0x68>
 8000cfe:	239f      	movs	r3, #159	; 0x9f
 8000d00:	4031      	ands	r1, r6
 8000d02:	1b1b      	subs	r3, r3, r4
 8000d04:	0189      	lsls	r1, r1, #6
 8000d06:	0a4d      	lsrs	r5, r1, #9
 8000d08:	b2d8      	uxtb	r0, r3
 8000d0a:	e7db      	b.n	8000cc4 <__aeabi_ui2f+0x28>
 8000d0c:	1f62      	subs	r2, r4, #5
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	0029      	movs	r1, r5
 8000d12:	4e02      	ldr	r6, [pc, #8]	; (8000d1c <__aeabi_ui2f+0x80>)
 8000d14:	4031      	ands	r1, r6
 8000d16:	076a      	lsls	r2, r5, #29
 8000d18:	d0f4      	beq.n	8000d04 <__aeabi_ui2f+0x68>
 8000d1a:	e7e9      	b.n	8000cf0 <__aeabi_ui2f+0x54>
 8000d1c:	fbffffff 	.word	0xfbffffff

08000d20 <__aeabi_dadd>:
 8000d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d22:	464f      	mov	r7, r9
 8000d24:	4646      	mov	r6, r8
 8000d26:	46d6      	mov	lr, sl
 8000d28:	000d      	movs	r5, r1
 8000d2a:	0004      	movs	r4, r0
 8000d2c:	b5c0      	push	{r6, r7, lr}
 8000d2e:	001f      	movs	r7, r3
 8000d30:	0011      	movs	r1, r2
 8000d32:	0328      	lsls	r0, r5, #12
 8000d34:	0f62      	lsrs	r2, r4, #29
 8000d36:	0a40      	lsrs	r0, r0, #9
 8000d38:	4310      	orrs	r0, r2
 8000d3a:	007a      	lsls	r2, r7, #1
 8000d3c:	0d52      	lsrs	r2, r2, #21
 8000d3e:	00e3      	lsls	r3, r4, #3
 8000d40:	033c      	lsls	r4, r7, #12
 8000d42:	4691      	mov	r9, r2
 8000d44:	0a64      	lsrs	r4, r4, #9
 8000d46:	0ffa      	lsrs	r2, r7, #31
 8000d48:	0f4f      	lsrs	r7, r1, #29
 8000d4a:	006e      	lsls	r6, r5, #1
 8000d4c:	4327      	orrs	r7, r4
 8000d4e:	4692      	mov	sl, r2
 8000d50:	46b8      	mov	r8, r7
 8000d52:	0d76      	lsrs	r6, r6, #21
 8000d54:	0fed      	lsrs	r5, r5, #31
 8000d56:	00c9      	lsls	r1, r1, #3
 8000d58:	4295      	cmp	r5, r2
 8000d5a:	d100      	bne.n	8000d5e <__aeabi_dadd+0x3e>
 8000d5c:	e099      	b.n	8000e92 <__aeabi_dadd+0x172>
 8000d5e:	464c      	mov	r4, r9
 8000d60:	1b34      	subs	r4, r6, r4
 8000d62:	46a4      	mov	ip, r4
 8000d64:	2c00      	cmp	r4, #0
 8000d66:	dc00      	bgt.n	8000d6a <__aeabi_dadd+0x4a>
 8000d68:	e07c      	b.n	8000e64 <__aeabi_dadd+0x144>
 8000d6a:	464a      	mov	r2, r9
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_dadd+0x52>
 8000d70:	e0b8      	b.n	8000ee4 <__aeabi_dadd+0x1c4>
 8000d72:	4ac5      	ldr	r2, [pc, #788]	; (8001088 <__aeabi_dadd+0x368>)
 8000d74:	4296      	cmp	r6, r2
 8000d76:	d100      	bne.n	8000d7a <__aeabi_dadd+0x5a>
 8000d78:	e11c      	b.n	8000fb4 <__aeabi_dadd+0x294>
 8000d7a:	2280      	movs	r2, #128	; 0x80
 8000d7c:	003c      	movs	r4, r7
 8000d7e:	0412      	lsls	r2, r2, #16
 8000d80:	4314      	orrs	r4, r2
 8000d82:	46a0      	mov	r8, r4
 8000d84:	4662      	mov	r2, ip
 8000d86:	2a38      	cmp	r2, #56	; 0x38
 8000d88:	dd00      	ble.n	8000d8c <__aeabi_dadd+0x6c>
 8000d8a:	e161      	b.n	8001050 <__aeabi_dadd+0x330>
 8000d8c:	2a1f      	cmp	r2, #31
 8000d8e:	dd00      	ble.n	8000d92 <__aeabi_dadd+0x72>
 8000d90:	e1cc      	b.n	800112c <__aeabi_dadd+0x40c>
 8000d92:	4664      	mov	r4, ip
 8000d94:	2220      	movs	r2, #32
 8000d96:	1b12      	subs	r2, r2, r4
 8000d98:	4644      	mov	r4, r8
 8000d9a:	4094      	lsls	r4, r2
 8000d9c:	000f      	movs	r7, r1
 8000d9e:	46a1      	mov	r9, r4
 8000da0:	4664      	mov	r4, ip
 8000da2:	4091      	lsls	r1, r2
 8000da4:	40e7      	lsrs	r7, r4
 8000da6:	464c      	mov	r4, r9
 8000da8:	1e4a      	subs	r2, r1, #1
 8000daa:	4191      	sbcs	r1, r2
 8000dac:	433c      	orrs	r4, r7
 8000dae:	4642      	mov	r2, r8
 8000db0:	4321      	orrs	r1, r4
 8000db2:	4664      	mov	r4, ip
 8000db4:	40e2      	lsrs	r2, r4
 8000db6:	1a80      	subs	r0, r0, r2
 8000db8:	1a5c      	subs	r4, r3, r1
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	419b      	sbcs	r3, r3
 8000dbe:	425f      	negs	r7, r3
 8000dc0:	1bc7      	subs	r7, r0, r7
 8000dc2:	023b      	lsls	r3, r7, #8
 8000dc4:	d400      	bmi.n	8000dc8 <__aeabi_dadd+0xa8>
 8000dc6:	e0d0      	b.n	8000f6a <__aeabi_dadd+0x24a>
 8000dc8:	027f      	lsls	r7, r7, #9
 8000dca:	0a7f      	lsrs	r7, r7, #9
 8000dcc:	2f00      	cmp	r7, #0
 8000dce:	d100      	bne.n	8000dd2 <__aeabi_dadd+0xb2>
 8000dd0:	e0ff      	b.n	8000fd2 <__aeabi_dadd+0x2b2>
 8000dd2:	0038      	movs	r0, r7
 8000dd4:	f001 fc9e 	bl	8002714 <__clzsi2>
 8000dd8:	0001      	movs	r1, r0
 8000dda:	3908      	subs	r1, #8
 8000ddc:	2320      	movs	r3, #32
 8000dde:	0022      	movs	r2, r4
 8000de0:	1a5b      	subs	r3, r3, r1
 8000de2:	408f      	lsls	r7, r1
 8000de4:	40da      	lsrs	r2, r3
 8000de6:	408c      	lsls	r4, r1
 8000de8:	4317      	orrs	r7, r2
 8000dea:	42b1      	cmp	r1, r6
 8000dec:	da00      	bge.n	8000df0 <__aeabi_dadd+0xd0>
 8000dee:	e0ff      	b.n	8000ff0 <__aeabi_dadd+0x2d0>
 8000df0:	1b89      	subs	r1, r1, r6
 8000df2:	1c4b      	adds	r3, r1, #1
 8000df4:	2b1f      	cmp	r3, #31
 8000df6:	dd00      	ble.n	8000dfa <__aeabi_dadd+0xda>
 8000df8:	e0a8      	b.n	8000f4c <__aeabi_dadd+0x22c>
 8000dfa:	2220      	movs	r2, #32
 8000dfc:	0039      	movs	r1, r7
 8000dfe:	1ad2      	subs	r2, r2, r3
 8000e00:	0020      	movs	r0, r4
 8000e02:	4094      	lsls	r4, r2
 8000e04:	4091      	lsls	r1, r2
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	1e62      	subs	r2, r4, #1
 8000e0a:	4194      	sbcs	r4, r2
 8000e0c:	40df      	lsrs	r7, r3
 8000e0e:	2600      	movs	r6, #0
 8000e10:	4301      	orrs	r1, r0
 8000e12:	430c      	orrs	r4, r1
 8000e14:	0763      	lsls	r3, r4, #29
 8000e16:	d009      	beq.n	8000e2c <__aeabi_dadd+0x10c>
 8000e18:	230f      	movs	r3, #15
 8000e1a:	4023      	ands	r3, r4
 8000e1c:	2b04      	cmp	r3, #4
 8000e1e:	d005      	beq.n	8000e2c <__aeabi_dadd+0x10c>
 8000e20:	1d23      	adds	r3, r4, #4
 8000e22:	42a3      	cmp	r3, r4
 8000e24:	41a4      	sbcs	r4, r4
 8000e26:	4264      	negs	r4, r4
 8000e28:	193f      	adds	r7, r7, r4
 8000e2a:	001c      	movs	r4, r3
 8000e2c:	023b      	lsls	r3, r7, #8
 8000e2e:	d400      	bmi.n	8000e32 <__aeabi_dadd+0x112>
 8000e30:	e09e      	b.n	8000f70 <__aeabi_dadd+0x250>
 8000e32:	4b95      	ldr	r3, [pc, #596]	; (8001088 <__aeabi_dadd+0x368>)
 8000e34:	3601      	adds	r6, #1
 8000e36:	429e      	cmp	r6, r3
 8000e38:	d100      	bne.n	8000e3c <__aeabi_dadd+0x11c>
 8000e3a:	e0b7      	b.n	8000fac <__aeabi_dadd+0x28c>
 8000e3c:	4a93      	ldr	r2, [pc, #588]	; (800108c <__aeabi_dadd+0x36c>)
 8000e3e:	08e4      	lsrs	r4, r4, #3
 8000e40:	4017      	ands	r7, r2
 8000e42:	077b      	lsls	r3, r7, #29
 8000e44:	0571      	lsls	r1, r6, #21
 8000e46:	027f      	lsls	r7, r7, #9
 8000e48:	4323      	orrs	r3, r4
 8000e4a:	0b3f      	lsrs	r7, r7, #12
 8000e4c:	0d4a      	lsrs	r2, r1, #21
 8000e4e:	0512      	lsls	r2, r2, #20
 8000e50:	433a      	orrs	r2, r7
 8000e52:	07ed      	lsls	r5, r5, #31
 8000e54:	432a      	orrs	r2, r5
 8000e56:	0018      	movs	r0, r3
 8000e58:	0011      	movs	r1, r2
 8000e5a:	bce0      	pop	{r5, r6, r7}
 8000e5c:	46ba      	mov	sl, r7
 8000e5e:	46b1      	mov	r9, r6
 8000e60:	46a8      	mov	r8, r5
 8000e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e64:	2c00      	cmp	r4, #0
 8000e66:	d04b      	beq.n	8000f00 <__aeabi_dadd+0x1e0>
 8000e68:	464c      	mov	r4, r9
 8000e6a:	1ba4      	subs	r4, r4, r6
 8000e6c:	46a4      	mov	ip, r4
 8000e6e:	2e00      	cmp	r6, #0
 8000e70:	d000      	beq.n	8000e74 <__aeabi_dadd+0x154>
 8000e72:	e123      	b.n	80010bc <__aeabi_dadd+0x39c>
 8000e74:	0004      	movs	r4, r0
 8000e76:	431c      	orrs	r4, r3
 8000e78:	d100      	bne.n	8000e7c <__aeabi_dadd+0x15c>
 8000e7a:	e1af      	b.n	80011dc <__aeabi_dadd+0x4bc>
 8000e7c:	4662      	mov	r2, ip
 8000e7e:	1e54      	subs	r4, r2, #1
 8000e80:	2a01      	cmp	r2, #1
 8000e82:	d100      	bne.n	8000e86 <__aeabi_dadd+0x166>
 8000e84:	e215      	b.n	80012b2 <__aeabi_dadd+0x592>
 8000e86:	4d80      	ldr	r5, [pc, #512]	; (8001088 <__aeabi_dadd+0x368>)
 8000e88:	45ac      	cmp	ip, r5
 8000e8a:	d100      	bne.n	8000e8e <__aeabi_dadd+0x16e>
 8000e8c:	e1c8      	b.n	8001220 <__aeabi_dadd+0x500>
 8000e8e:	46a4      	mov	ip, r4
 8000e90:	e11b      	b.n	80010ca <__aeabi_dadd+0x3aa>
 8000e92:	464a      	mov	r2, r9
 8000e94:	1ab2      	subs	r2, r6, r2
 8000e96:	4694      	mov	ip, r2
 8000e98:	2a00      	cmp	r2, #0
 8000e9a:	dc00      	bgt.n	8000e9e <__aeabi_dadd+0x17e>
 8000e9c:	e0ac      	b.n	8000ff8 <__aeabi_dadd+0x2d8>
 8000e9e:	464a      	mov	r2, r9
 8000ea0:	2a00      	cmp	r2, #0
 8000ea2:	d043      	beq.n	8000f2c <__aeabi_dadd+0x20c>
 8000ea4:	4a78      	ldr	r2, [pc, #480]	; (8001088 <__aeabi_dadd+0x368>)
 8000ea6:	4296      	cmp	r6, r2
 8000ea8:	d100      	bne.n	8000eac <__aeabi_dadd+0x18c>
 8000eaa:	e1af      	b.n	800120c <__aeabi_dadd+0x4ec>
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	003c      	movs	r4, r7
 8000eb0:	0412      	lsls	r2, r2, #16
 8000eb2:	4314      	orrs	r4, r2
 8000eb4:	46a0      	mov	r8, r4
 8000eb6:	4662      	mov	r2, ip
 8000eb8:	2a38      	cmp	r2, #56	; 0x38
 8000eba:	dc67      	bgt.n	8000f8c <__aeabi_dadd+0x26c>
 8000ebc:	2a1f      	cmp	r2, #31
 8000ebe:	dc00      	bgt.n	8000ec2 <__aeabi_dadd+0x1a2>
 8000ec0:	e15f      	b.n	8001182 <__aeabi_dadd+0x462>
 8000ec2:	4647      	mov	r7, r8
 8000ec4:	3a20      	subs	r2, #32
 8000ec6:	40d7      	lsrs	r7, r2
 8000ec8:	4662      	mov	r2, ip
 8000eca:	2a20      	cmp	r2, #32
 8000ecc:	d005      	beq.n	8000eda <__aeabi_dadd+0x1ba>
 8000ece:	4664      	mov	r4, ip
 8000ed0:	2240      	movs	r2, #64	; 0x40
 8000ed2:	1b12      	subs	r2, r2, r4
 8000ed4:	4644      	mov	r4, r8
 8000ed6:	4094      	lsls	r4, r2
 8000ed8:	4321      	orrs	r1, r4
 8000eda:	1e4a      	subs	r2, r1, #1
 8000edc:	4191      	sbcs	r1, r2
 8000ede:	000c      	movs	r4, r1
 8000ee0:	433c      	orrs	r4, r7
 8000ee2:	e057      	b.n	8000f94 <__aeabi_dadd+0x274>
 8000ee4:	003a      	movs	r2, r7
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	d100      	bne.n	8000eec <__aeabi_dadd+0x1cc>
 8000eea:	e105      	b.n	80010f8 <__aeabi_dadd+0x3d8>
 8000eec:	0022      	movs	r2, r4
 8000eee:	3a01      	subs	r2, #1
 8000ef0:	2c01      	cmp	r4, #1
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_dadd+0x1d6>
 8000ef4:	e182      	b.n	80011fc <__aeabi_dadd+0x4dc>
 8000ef6:	4c64      	ldr	r4, [pc, #400]	; (8001088 <__aeabi_dadd+0x368>)
 8000ef8:	45a4      	cmp	ip, r4
 8000efa:	d05b      	beq.n	8000fb4 <__aeabi_dadd+0x294>
 8000efc:	4694      	mov	ip, r2
 8000efe:	e741      	b.n	8000d84 <__aeabi_dadd+0x64>
 8000f00:	4c63      	ldr	r4, [pc, #396]	; (8001090 <__aeabi_dadd+0x370>)
 8000f02:	1c77      	adds	r7, r6, #1
 8000f04:	4227      	tst	r7, r4
 8000f06:	d000      	beq.n	8000f0a <__aeabi_dadd+0x1ea>
 8000f08:	e0c4      	b.n	8001094 <__aeabi_dadd+0x374>
 8000f0a:	0004      	movs	r4, r0
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	2e00      	cmp	r6, #0
 8000f10:	d000      	beq.n	8000f14 <__aeabi_dadd+0x1f4>
 8000f12:	e169      	b.n	80011e8 <__aeabi_dadd+0x4c8>
 8000f14:	2c00      	cmp	r4, #0
 8000f16:	d100      	bne.n	8000f1a <__aeabi_dadd+0x1fa>
 8000f18:	e1bf      	b.n	800129a <__aeabi_dadd+0x57a>
 8000f1a:	4644      	mov	r4, r8
 8000f1c:	430c      	orrs	r4, r1
 8000f1e:	d000      	beq.n	8000f22 <__aeabi_dadd+0x202>
 8000f20:	e1d0      	b.n	80012c4 <__aeabi_dadd+0x5a4>
 8000f22:	0742      	lsls	r2, r0, #29
 8000f24:	08db      	lsrs	r3, r3, #3
 8000f26:	4313      	orrs	r3, r2
 8000f28:	08c0      	lsrs	r0, r0, #3
 8000f2a:	e029      	b.n	8000f80 <__aeabi_dadd+0x260>
 8000f2c:	003a      	movs	r2, r7
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	d100      	bne.n	8000f34 <__aeabi_dadd+0x214>
 8000f32:	e170      	b.n	8001216 <__aeabi_dadd+0x4f6>
 8000f34:	4662      	mov	r2, ip
 8000f36:	4664      	mov	r4, ip
 8000f38:	3a01      	subs	r2, #1
 8000f3a:	2c01      	cmp	r4, #1
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_dadd+0x220>
 8000f3e:	e0e0      	b.n	8001102 <__aeabi_dadd+0x3e2>
 8000f40:	4c51      	ldr	r4, [pc, #324]	; (8001088 <__aeabi_dadd+0x368>)
 8000f42:	45a4      	cmp	ip, r4
 8000f44:	d100      	bne.n	8000f48 <__aeabi_dadd+0x228>
 8000f46:	e161      	b.n	800120c <__aeabi_dadd+0x4ec>
 8000f48:	4694      	mov	ip, r2
 8000f4a:	e7b4      	b.n	8000eb6 <__aeabi_dadd+0x196>
 8000f4c:	003a      	movs	r2, r7
 8000f4e:	391f      	subs	r1, #31
 8000f50:	40ca      	lsrs	r2, r1
 8000f52:	0011      	movs	r1, r2
 8000f54:	2b20      	cmp	r3, #32
 8000f56:	d003      	beq.n	8000f60 <__aeabi_dadd+0x240>
 8000f58:	2240      	movs	r2, #64	; 0x40
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	409f      	lsls	r7, r3
 8000f5e:	433c      	orrs	r4, r7
 8000f60:	1e63      	subs	r3, r4, #1
 8000f62:	419c      	sbcs	r4, r3
 8000f64:	2700      	movs	r7, #0
 8000f66:	2600      	movs	r6, #0
 8000f68:	430c      	orrs	r4, r1
 8000f6a:	0763      	lsls	r3, r4, #29
 8000f6c:	d000      	beq.n	8000f70 <__aeabi_dadd+0x250>
 8000f6e:	e753      	b.n	8000e18 <__aeabi_dadd+0xf8>
 8000f70:	46b4      	mov	ip, r6
 8000f72:	08e4      	lsrs	r4, r4, #3
 8000f74:	077b      	lsls	r3, r7, #29
 8000f76:	4323      	orrs	r3, r4
 8000f78:	08f8      	lsrs	r0, r7, #3
 8000f7a:	4a43      	ldr	r2, [pc, #268]	; (8001088 <__aeabi_dadd+0x368>)
 8000f7c:	4594      	cmp	ip, r2
 8000f7e:	d01d      	beq.n	8000fbc <__aeabi_dadd+0x29c>
 8000f80:	4662      	mov	r2, ip
 8000f82:	0307      	lsls	r7, r0, #12
 8000f84:	0552      	lsls	r2, r2, #21
 8000f86:	0b3f      	lsrs	r7, r7, #12
 8000f88:	0d52      	lsrs	r2, r2, #21
 8000f8a:	e760      	b.n	8000e4e <__aeabi_dadd+0x12e>
 8000f8c:	4644      	mov	r4, r8
 8000f8e:	430c      	orrs	r4, r1
 8000f90:	1e62      	subs	r2, r4, #1
 8000f92:	4194      	sbcs	r4, r2
 8000f94:	18e4      	adds	r4, r4, r3
 8000f96:	429c      	cmp	r4, r3
 8000f98:	419b      	sbcs	r3, r3
 8000f9a:	425f      	negs	r7, r3
 8000f9c:	183f      	adds	r7, r7, r0
 8000f9e:	023b      	lsls	r3, r7, #8
 8000fa0:	d5e3      	bpl.n	8000f6a <__aeabi_dadd+0x24a>
 8000fa2:	4b39      	ldr	r3, [pc, #228]	; (8001088 <__aeabi_dadd+0x368>)
 8000fa4:	3601      	adds	r6, #1
 8000fa6:	429e      	cmp	r6, r3
 8000fa8:	d000      	beq.n	8000fac <__aeabi_dadd+0x28c>
 8000faa:	e0b5      	b.n	8001118 <__aeabi_dadd+0x3f8>
 8000fac:	0032      	movs	r2, r6
 8000fae:	2700      	movs	r7, #0
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e74c      	b.n	8000e4e <__aeabi_dadd+0x12e>
 8000fb4:	0742      	lsls	r2, r0, #29
 8000fb6:	08db      	lsrs	r3, r3, #3
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	08c0      	lsrs	r0, r0, #3
 8000fbc:	001a      	movs	r2, r3
 8000fbe:	4302      	orrs	r2, r0
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_dadd+0x2a4>
 8000fc2:	e1e1      	b.n	8001388 <__aeabi_dadd+0x668>
 8000fc4:	2780      	movs	r7, #128	; 0x80
 8000fc6:	033f      	lsls	r7, r7, #12
 8000fc8:	4307      	orrs	r7, r0
 8000fca:	033f      	lsls	r7, r7, #12
 8000fcc:	4a2e      	ldr	r2, [pc, #184]	; (8001088 <__aeabi_dadd+0x368>)
 8000fce:	0b3f      	lsrs	r7, r7, #12
 8000fd0:	e73d      	b.n	8000e4e <__aeabi_dadd+0x12e>
 8000fd2:	0020      	movs	r0, r4
 8000fd4:	f001 fb9e 	bl	8002714 <__clzsi2>
 8000fd8:	0001      	movs	r1, r0
 8000fda:	3118      	adds	r1, #24
 8000fdc:	291f      	cmp	r1, #31
 8000fde:	dc00      	bgt.n	8000fe2 <__aeabi_dadd+0x2c2>
 8000fe0:	e6fc      	b.n	8000ddc <__aeabi_dadd+0xbc>
 8000fe2:	3808      	subs	r0, #8
 8000fe4:	4084      	lsls	r4, r0
 8000fe6:	0027      	movs	r7, r4
 8000fe8:	2400      	movs	r4, #0
 8000fea:	42b1      	cmp	r1, r6
 8000fec:	db00      	blt.n	8000ff0 <__aeabi_dadd+0x2d0>
 8000fee:	e6ff      	b.n	8000df0 <__aeabi_dadd+0xd0>
 8000ff0:	4a26      	ldr	r2, [pc, #152]	; (800108c <__aeabi_dadd+0x36c>)
 8000ff2:	1a76      	subs	r6, r6, r1
 8000ff4:	4017      	ands	r7, r2
 8000ff6:	e70d      	b.n	8000e14 <__aeabi_dadd+0xf4>
 8000ff8:	2a00      	cmp	r2, #0
 8000ffa:	d02f      	beq.n	800105c <__aeabi_dadd+0x33c>
 8000ffc:	464a      	mov	r2, r9
 8000ffe:	1b92      	subs	r2, r2, r6
 8001000:	4694      	mov	ip, r2
 8001002:	2e00      	cmp	r6, #0
 8001004:	d100      	bne.n	8001008 <__aeabi_dadd+0x2e8>
 8001006:	e0ad      	b.n	8001164 <__aeabi_dadd+0x444>
 8001008:	4a1f      	ldr	r2, [pc, #124]	; (8001088 <__aeabi_dadd+0x368>)
 800100a:	4591      	cmp	r9, r2
 800100c:	d100      	bne.n	8001010 <__aeabi_dadd+0x2f0>
 800100e:	e10f      	b.n	8001230 <__aeabi_dadd+0x510>
 8001010:	2280      	movs	r2, #128	; 0x80
 8001012:	0412      	lsls	r2, r2, #16
 8001014:	4310      	orrs	r0, r2
 8001016:	4662      	mov	r2, ip
 8001018:	2a38      	cmp	r2, #56	; 0x38
 800101a:	dd00      	ble.n	800101e <__aeabi_dadd+0x2fe>
 800101c:	e10f      	b.n	800123e <__aeabi_dadd+0x51e>
 800101e:	2a1f      	cmp	r2, #31
 8001020:	dd00      	ble.n	8001024 <__aeabi_dadd+0x304>
 8001022:	e180      	b.n	8001326 <__aeabi_dadd+0x606>
 8001024:	4664      	mov	r4, ip
 8001026:	2220      	movs	r2, #32
 8001028:	001e      	movs	r6, r3
 800102a:	1b12      	subs	r2, r2, r4
 800102c:	4667      	mov	r7, ip
 800102e:	0004      	movs	r4, r0
 8001030:	4093      	lsls	r3, r2
 8001032:	4094      	lsls	r4, r2
 8001034:	40fe      	lsrs	r6, r7
 8001036:	1e5a      	subs	r2, r3, #1
 8001038:	4193      	sbcs	r3, r2
 800103a:	40f8      	lsrs	r0, r7
 800103c:	4334      	orrs	r4, r6
 800103e:	431c      	orrs	r4, r3
 8001040:	4480      	add	r8, r0
 8001042:	1864      	adds	r4, r4, r1
 8001044:	428c      	cmp	r4, r1
 8001046:	41bf      	sbcs	r7, r7
 8001048:	427f      	negs	r7, r7
 800104a:	464e      	mov	r6, r9
 800104c:	4447      	add	r7, r8
 800104e:	e7a6      	b.n	8000f9e <__aeabi_dadd+0x27e>
 8001050:	4642      	mov	r2, r8
 8001052:	430a      	orrs	r2, r1
 8001054:	0011      	movs	r1, r2
 8001056:	1e4a      	subs	r2, r1, #1
 8001058:	4191      	sbcs	r1, r2
 800105a:	e6ad      	b.n	8000db8 <__aeabi_dadd+0x98>
 800105c:	4c0c      	ldr	r4, [pc, #48]	; (8001090 <__aeabi_dadd+0x370>)
 800105e:	1c72      	adds	r2, r6, #1
 8001060:	4222      	tst	r2, r4
 8001062:	d000      	beq.n	8001066 <__aeabi_dadd+0x346>
 8001064:	e0a1      	b.n	80011aa <__aeabi_dadd+0x48a>
 8001066:	0002      	movs	r2, r0
 8001068:	431a      	orrs	r2, r3
 800106a:	2e00      	cmp	r6, #0
 800106c:	d000      	beq.n	8001070 <__aeabi_dadd+0x350>
 800106e:	e0fa      	b.n	8001266 <__aeabi_dadd+0x546>
 8001070:	2a00      	cmp	r2, #0
 8001072:	d100      	bne.n	8001076 <__aeabi_dadd+0x356>
 8001074:	e145      	b.n	8001302 <__aeabi_dadd+0x5e2>
 8001076:	003a      	movs	r2, r7
 8001078:	430a      	orrs	r2, r1
 800107a:	d000      	beq.n	800107e <__aeabi_dadd+0x35e>
 800107c:	e146      	b.n	800130c <__aeabi_dadd+0x5ec>
 800107e:	0742      	lsls	r2, r0, #29
 8001080:	08db      	lsrs	r3, r3, #3
 8001082:	4313      	orrs	r3, r2
 8001084:	08c0      	lsrs	r0, r0, #3
 8001086:	e77b      	b.n	8000f80 <__aeabi_dadd+0x260>
 8001088:	000007ff 	.word	0x000007ff
 800108c:	ff7fffff 	.word	0xff7fffff
 8001090:	000007fe 	.word	0x000007fe
 8001094:	4647      	mov	r7, r8
 8001096:	1a5c      	subs	r4, r3, r1
 8001098:	1bc2      	subs	r2, r0, r7
 800109a:	42a3      	cmp	r3, r4
 800109c:	41bf      	sbcs	r7, r7
 800109e:	427f      	negs	r7, r7
 80010a0:	46b9      	mov	r9, r7
 80010a2:	0017      	movs	r7, r2
 80010a4:	464a      	mov	r2, r9
 80010a6:	1abf      	subs	r7, r7, r2
 80010a8:	023a      	lsls	r2, r7, #8
 80010aa:	d500      	bpl.n	80010ae <__aeabi_dadd+0x38e>
 80010ac:	e08d      	b.n	80011ca <__aeabi_dadd+0x4aa>
 80010ae:	0023      	movs	r3, r4
 80010b0:	433b      	orrs	r3, r7
 80010b2:	d000      	beq.n	80010b6 <__aeabi_dadd+0x396>
 80010b4:	e68a      	b.n	8000dcc <__aeabi_dadd+0xac>
 80010b6:	2000      	movs	r0, #0
 80010b8:	2500      	movs	r5, #0
 80010ba:	e761      	b.n	8000f80 <__aeabi_dadd+0x260>
 80010bc:	4cb4      	ldr	r4, [pc, #720]	; (8001390 <__aeabi_dadd+0x670>)
 80010be:	45a1      	cmp	r9, r4
 80010c0:	d100      	bne.n	80010c4 <__aeabi_dadd+0x3a4>
 80010c2:	e0ad      	b.n	8001220 <__aeabi_dadd+0x500>
 80010c4:	2480      	movs	r4, #128	; 0x80
 80010c6:	0424      	lsls	r4, r4, #16
 80010c8:	4320      	orrs	r0, r4
 80010ca:	4664      	mov	r4, ip
 80010cc:	2c38      	cmp	r4, #56	; 0x38
 80010ce:	dc3d      	bgt.n	800114c <__aeabi_dadd+0x42c>
 80010d0:	4662      	mov	r2, ip
 80010d2:	2c1f      	cmp	r4, #31
 80010d4:	dd00      	ble.n	80010d8 <__aeabi_dadd+0x3b8>
 80010d6:	e0b7      	b.n	8001248 <__aeabi_dadd+0x528>
 80010d8:	2520      	movs	r5, #32
 80010da:	001e      	movs	r6, r3
 80010dc:	1b2d      	subs	r5, r5, r4
 80010de:	0004      	movs	r4, r0
 80010e0:	40ab      	lsls	r3, r5
 80010e2:	40ac      	lsls	r4, r5
 80010e4:	40d6      	lsrs	r6, r2
 80010e6:	40d0      	lsrs	r0, r2
 80010e8:	4642      	mov	r2, r8
 80010ea:	1e5d      	subs	r5, r3, #1
 80010ec:	41ab      	sbcs	r3, r5
 80010ee:	4334      	orrs	r4, r6
 80010f0:	1a12      	subs	r2, r2, r0
 80010f2:	4690      	mov	r8, r2
 80010f4:	4323      	orrs	r3, r4
 80010f6:	e02c      	b.n	8001152 <__aeabi_dadd+0x432>
 80010f8:	0742      	lsls	r2, r0, #29
 80010fa:	08db      	lsrs	r3, r3, #3
 80010fc:	4313      	orrs	r3, r2
 80010fe:	08c0      	lsrs	r0, r0, #3
 8001100:	e73b      	b.n	8000f7a <__aeabi_dadd+0x25a>
 8001102:	185c      	adds	r4, r3, r1
 8001104:	429c      	cmp	r4, r3
 8001106:	419b      	sbcs	r3, r3
 8001108:	4440      	add	r0, r8
 800110a:	425b      	negs	r3, r3
 800110c:	18c7      	adds	r7, r0, r3
 800110e:	2601      	movs	r6, #1
 8001110:	023b      	lsls	r3, r7, #8
 8001112:	d400      	bmi.n	8001116 <__aeabi_dadd+0x3f6>
 8001114:	e729      	b.n	8000f6a <__aeabi_dadd+0x24a>
 8001116:	2602      	movs	r6, #2
 8001118:	4a9e      	ldr	r2, [pc, #632]	; (8001394 <__aeabi_dadd+0x674>)
 800111a:	0863      	lsrs	r3, r4, #1
 800111c:	4017      	ands	r7, r2
 800111e:	2201      	movs	r2, #1
 8001120:	4014      	ands	r4, r2
 8001122:	431c      	orrs	r4, r3
 8001124:	07fb      	lsls	r3, r7, #31
 8001126:	431c      	orrs	r4, r3
 8001128:	087f      	lsrs	r7, r7, #1
 800112a:	e673      	b.n	8000e14 <__aeabi_dadd+0xf4>
 800112c:	4644      	mov	r4, r8
 800112e:	3a20      	subs	r2, #32
 8001130:	40d4      	lsrs	r4, r2
 8001132:	4662      	mov	r2, ip
 8001134:	2a20      	cmp	r2, #32
 8001136:	d005      	beq.n	8001144 <__aeabi_dadd+0x424>
 8001138:	4667      	mov	r7, ip
 800113a:	2240      	movs	r2, #64	; 0x40
 800113c:	1bd2      	subs	r2, r2, r7
 800113e:	4647      	mov	r7, r8
 8001140:	4097      	lsls	r7, r2
 8001142:	4339      	orrs	r1, r7
 8001144:	1e4a      	subs	r2, r1, #1
 8001146:	4191      	sbcs	r1, r2
 8001148:	4321      	orrs	r1, r4
 800114a:	e635      	b.n	8000db8 <__aeabi_dadd+0x98>
 800114c:	4303      	orrs	r3, r0
 800114e:	1e58      	subs	r0, r3, #1
 8001150:	4183      	sbcs	r3, r0
 8001152:	1acc      	subs	r4, r1, r3
 8001154:	42a1      	cmp	r1, r4
 8001156:	41bf      	sbcs	r7, r7
 8001158:	4643      	mov	r3, r8
 800115a:	427f      	negs	r7, r7
 800115c:	4655      	mov	r5, sl
 800115e:	464e      	mov	r6, r9
 8001160:	1bdf      	subs	r7, r3, r7
 8001162:	e62e      	b.n	8000dc2 <__aeabi_dadd+0xa2>
 8001164:	0002      	movs	r2, r0
 8001166:	431a      	orrs	r2, r3
 8001168:	d100      	bne.n	800116c <__aeabi_dadd+0x44c>
 800116a:	e0bd      	b.n	80012e8 <__aeabi_dadd+0x5c8>
 800116c:	4662      	mov	r2, ip
 800116e:	4664      	mov	r4, ip
 8001170:	3a01      	subs	r2, #1
 8001172:	2c01      	cmp	r4, #1
 8001174:	d100      	bne.n	8001178 <__aeabi_dadd+0x458>
 8001176:	e0e5      	b.n	8001344 <__aeabi_dadd+0x624>
 8001178:	4c85      	ldr	r4, [pc, #532]	; (8001390 <__aeabi_dadd+0x670>)
 800117a:	45a4      	cmp	ip, r4
 800117c:	d058      	beq.n	8001230 <__aeabi_dadd+0x510>
 800117e:	4694      	mov	ip, r2
 8001180:	e749      	b.n	8001016 <__aeabi_dadd+0x2f6>
 8001182:	4664      	mov	r4, ip
 8001184:	2220      	movs	r2, #32
 8001186:	1b12      	subs	r2, r2, r4
 8001188:	4644      	mov	r4, r8
 800118a:	4094      	lsls	r4, r2
 800118c:	000f      	movs	r7, r1
 800118e:	46a1      	mov	r9, r4
 8001190:	4664      	mov	r4, ip
 8001192:	4091      	lsls	r1, r2
 8001194:	40e7      	lsrs	r7, r4
 8001196:	464c      	mov	r4, r9
 8001198:	1e4a      	subs	r2, r1, #1
 800119a:	4191      	sbcs	r1, r2
 800119c:	433c      	orrs	r4, r7
 800119e:	4642      	mov	r2, r8
 80011a0:	430c      	orrs	r4, r1
 80011a2:	4661      	mov	r1, ip
 80011a4:	40ca      	lsrs	r2, r1
 80011a6:	1880      	adds	r0, r0, r2
 80011a8:	e6f4      	b.n	8000f94 <__aeabi_dadd+0x274>
 80011aa:	4c79      	ldr	r4, [pc, #484]	; (8001390 <__aeabi_dadd+0x670>)
 80011ac:	42a2      	cmp	r2, r4
 80011ae:	d100      	bne.n	80011b2 <__aeabi_dadd+0x492>
 80011b0:	e6fd      	b.n	8000fae <__aeabi_dadd+0x28e>
 80011b2:	1859      	adds	r1, r3, r1
 80011b4:	4299      	cmp	r1, r3
 80011b6:	419b      	sbcs	r3, r3
 80011b8:	4440      	add	r0, r8
 80011ba:	425f      	negs	r7, r3
 80011bc:	19c7      	adds	r7, r0, r7
 80011be:	07fc      	lsls	r4, r7, #31
 80011c0:	0849      	lsrs	r1, r1, #1
 80011c2:	0016      	movs	r6, r2
 80011c4:	430c      	orrs	r4, r1
 80011c6:	087f      	lsrs	r7, r7, #1
 80011c8:	e6cf      	b.n	8000f6a <__aeabi_dadd+0x24a>
 80011ca:	1acc      	subs	r4, r1, r3
 80011cc:	42a1      	cmp	r1, r4
 80011ce:	41bf      	sbcs	r7, r7
 80011d0:	4643      	mov	r3, r8
 80011d2:	427f      	negs	r7, r7
 80011d4:	1a18      	subs	r0, r3, r0
 80011d6:	4655      	mov	r5, sl
 80011d8:	1bc7      	subs	r7, r0, r7
 80011da:	e5f7      	b.n	8000dcc <__aeabi_dadd+0xac>
 80011dc:	08c9      	lsrs	r1, r1, #3
 80011de:	077b      	lsls	r3, r7, #29
 80011e0:	4655      	mov	r5, sl
 80011e2:	430b      	orrs	r3, r1
 80011e4:	08f8      	lsrs	r0, r7, #3
 80011e6:	e6c8      	b.n	8000f7a <__aeabi_dadd+0x25a>
 80011e8:	2c00      	cmp	r4, #0
 80011ea:	d000      	beq.n	80011ee <__aeabi_dadd+0x4ce>
 80011ec:	e081      	b.n	80012f2 <__aeabi_dadd+0x5d2>
 80011ee:	4643      	mov	r3, r8
 80011f0:	430b      	orrs	r3, r1
 80011f2:	d115      	bne.n	8001220 <__aeabi_dadd+0x500>
 80011f4:	2080      	movs	r0, #128	; 0x80
 80011f6:	2500      	movs	r5, #0
 80011f8:	0300      	lsls	r0, r0, #12
 80011fa:	e6e3      	b.n	8000fc4 <__aeabi_dadd+0x2a4>
 80011fc:	1a5c      	subs	r4, r3, r1
 80011fe:	42a3      	cmp	r3, r4
 8001200:	419b      	sbcs	r3, r3
 8001202:	1bc7      	subs	r7, r0, r7
 8001204:	425b      	negs	r3, r3
 8001206:	2601      	movs	r6, #1
 8001208:	1aff      	subs	r7, r7, r3
 800120a:	e5da      	b.n	8000dc2 <__aeabi_dadd+0xa2>
 800120c:	0742      	lsls	r2, r0, #29
 800120e:	08db      	lsrs	r3, r3, #3
 8001210:	4313      	orrs	r3, r2
 8001212:	08c0      	lsrs	r0, r0, #3
 8001214:	e6d2      	b.n	8000fbc <__aeabi_dadd+0x29c>
 8001216:	0742      	lsls	r2, r0, #29
 8001218:	08db      	lsrs	r3, r3, #3
 800121a:	4313      	orrs	r3, r2
 800121c:	08c0      	lsrs	r0, r0, #3
 800121e:	e6ac      	b.n	8000f7a <__aeabi_dadd+0x25a>
 8001220:	4643      	mov	r3, r8
 8001222:	4642      	mov	r2, r8
 8001224:	08c9      	lsrs	r1, r1, #3
 8001226:	075b      	lsls	r3, r3, #29
 8001228:	4655      	mov	r5, sl
 800122a:	430b      	orrs	r3, r1
 800122c:	08d0      	lsrs	r0, r2, #3
 800122e:	e6c5      	b.n	8000fbc <__aeabi_dadd+0x29c>
 8001230:	4643      	mov	r3, r8
 8001232:	4642      	mov	r2, r8
 8001234:	075b      	lsls	r3, r3, #29
 8001236:	08c9      	lsrs	r1, r1, #3
 8001238:	430b      	orrs	r3, r1
 800123a:	08d0      	lsrs	r0, r2, #3
 800123c:	e6be      	b.n	8000fbc <__aeabi_dadd+0x29c>
 800123e:	4303      	orrs	r3, r0
 8001240:	001c      	movs	r4, r3
 8001242:	1e63      	subs	r3, r4, #1
 8001244:	419c      	sbcs	r4, r3
 8001246:	e6fc      	b.n	8001042 <__aeabi_dadd+0x322>
 8001248:	0002      	movs	r2, r0
 800124a:	3c20      	subs	r4, #32
 800124c:	40e2      	lsrs	r2, r4
 800124e:	0014      	movs	r4, r2
 8001250:	4662      	mov	r2, ip
 8001252:	2a20      	cmp	r2, #32
 8001254:	d003      	beq.n	800125e <__aeabi_dadd+0x53e>
 8001256:	2540      	movs	r5, #64	; 0x40
 8001258:	1aad      	subs	r5, r5, r2
 800125a:	40a8      	lsls	r0, r5
 800125c:	4303      	orrs	r3, r0
 800125e:	1e58      	subs	r0, r3, #1
 8001260:	4183      	sbcs	r3, r0
 8001262:	4323      	orrs	r3, r4
 8001264:	e775      	b.n	8001152 <__aeabi_dadd+0x432>
 8001266:	2a00      	cmp	r2, #0
 8001268:	d0e2      	beq.n	8001230 <__aeabi_dadd+0x510>
 800126a:	003a      	movs	r2, r7
 800126c:	430a      	orrs	r2, r1
 800126e:	d0cd      	beq.n	800120c <__aeabi_dadd+0x4ec>
 8001270:	0742      	lsls	r2, r0, #29
 8001272:	08db      	lsrs	r3, r3, #3
 8001274:	4313      	orrs	r3, r2
 8001276:	2280      	movs	r2, #128	; 0x80
 8001278:	08c0      	lsrs	r0, r0, #3
 800127a:	0312      	lsls	r2, r2, #12
 800127c:	4210      	tst	r0, r2
 800127e:	d006      	beq.n	800128e <__aeabi_dadd+0x56e>
 8001280:	08fc      	lsrs	r4, r7, #3
 8001282:	4214      	tst	r4, r2
 8001284:	d103      	bne.n	800128e <__aeabi_dadd+0x56e>
 8001286:	0020      	movs	r0, r4
 8001288:	08cb      	lsrs	r3, r1, #3
 800128a:	077a      	lsls	r2, r7, #29
 800128c:	4313      	orrs	r3, r2
 800128e:	0f5a      	lsrs	r2, r3, #29
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	0752      	lsls	r2, r2, #29
 8001294:	08db      	lsrs	r3, r3, #3
 8001296:	4313      	orrs	r3, r2
 8001298:	e690      	b.n	8000fbc <__aeabi_dadd+0x29c>
 800129a:	4643      	mov	r3, r8
 800129c:	430b      	orrs	r3, r1
 800129e:	d100      	bne.n	80012a2 <__aeabi_dadd+0x582>
 80012a0:	e709      	b.n	80010b6 <__aeabi_dadd+0x396>
 80012a2:	4643      	mov	r3, r8
 80012a4:	4642      	mov	r2, r8
 80012a6:	08c9      	lsrs	r1, r1, #3
 80012a8:	075b      	lsls	r3, r3, #29
 80012aa:	4655      	mov	r5, sl
 80012ac:	430b      	orrs	r3, r1
 80012ae:	08d0      	lsrs	r0, r2, #3
 80012b0:	e666      	b.n	8000f80 <__aeabi_dadd+0x260>
 80012b2:	1acc      	subs	r4, r1, r3
 80012b4:	42a1      	cmp	r1, r4
 80012b6:	4189      	sbcs	r1, r1
 80012b8:	1a3f      	subs	r7, r7, r0
 80012ba:	4249      	negs	r1, r1
 80012bc:	4655      	mov	r5, sl
 80012be:	2601      	movs	r6, #1
 80012c0:	1a7f      	subs	r7, r7, r1
 80012c2:	e57e      	b.n	8000dc2 <__aeabi_dadd+0xa2>
 80012c4:	4642      	mov	r2, r8
 80012c6:	1a5c      	subs	r4, r3, r1
 80012c8:	1a87      	subs	r7, r0, r2
 80012ca:	42a3      	cmp	r3, r4
 80012cc:	4192      	sbcs	r2, r2
 80012ce:	4252      	negs	r2, r2
 80012d0:	1abf      	subs	r7, r7, r2
 80012d2:	023a      	lsls	r2, r7, #8
 80012d4:	d53d      	bpl.n	8001352 <__aeabi_dadd+0x632>
 80012d6:	1acc      	subs	r4, r1, r3
 80012d8:	42a1      	cmp	r1, r4
 80012da:	4189      	sbcs	r1, r1
 80012dc:	4643      	mov	r3, r8
 80012de:	4249      	negs	r1, r1
 80012e0:	1a1f      	subs	r7, r3, r0
 80012e2:	4655      	mov	r5, sl
 80012e4:	1a7f      	subs	r7, r7, r1
 80012e6:	e595      	b.n	8000e14 <__aeabi_dadd+0xf4>
 80012e8:	077b      	lsls	r3, r7, #29
 80012ea:	08c9      	lsrs	r1, r1, #3
 80012ec:	430b      	orrs	r3, r1
 80012ee:	08f8      	lsrs	r0, r7, #3
 80012f0:	e643      	b.n	8000f7a <__aeabi_dadd+0x25a>
 80012f2:	4644      	mov	r4, r8
 80012f4:	08db      	lsrs	r3, r3, #3
 80012f6:	430c      	orrs	r4, r1
 80012f8:	d130      	bne.n	800135c <__aeabi_dadd+0x63c>
 80012fa:	0742      	lsls	r2, r0, #29
 80012fc:	4313      	orrs	r3, r2
 80012fe:	08c0      	lsrs	r0, r0, #3
 8001300:	e65c      	b.n	8000fbc <__aeabi_dadd+0x29c>
 8001302:	077b      	lsls	r3, r7, #29
 8001304:	08c9      	lsrs	r1, r1, #3
 8001306:	430b      	orrs	r3, r1
 8001308:	08f8      	lsrs	r0, r7, #3
 800130a:	e639      	b.n	8000f80 <__aeabi_dadd+0x260>
 800130c:	185c      	adds	r4, r3, r1
 800130e:	429c      	cmp	r4, r3
 8001310:	419b      	sbcs	r3, r3
 8001312:	4440      	add	r0, r8
 8001314:	425b      	negs	r3, r3
 8001316:	18c7      	adds	r7, r0, r3
 8001318:	023b      	lsls	r3, r7, #8
 800131a:	d400      	bmi.n	800131e <__aeabi_dadd+0x5fe>
 800131c:	e625      	b.n	8000f6a <__aeabi_dadd+0x24a>
 800131e:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <__aeabi_dadd+0x674>)
 8001320:	2601      	movs	r6, #1
 8001322:	401f      	ands	r7, r3
 8001324:	e621      	b.n	8000f6a <__aeabi_dadd+0x24a>
 8001326:	0004      	movs	r4, r0
 8001328:	3a20      	subs	r2, #32
 800132a:	40d4      	lsrs	r4, r2
 800132c:	4662      	mov	r2, ip
 800132e:	2a20      	cmp	r2, #32
 8001330:	d004      	beq.n	800133c <__aeabi_dadd+0x61c>
 8001332:	2240      	movs	r2, #64	; 0x40
 8001334:	4666      	mov	r6, ip
 8001336:	1b92      	subs	r2, r2, r6
 8001338:	4090      	lsls	r0, r2
 800133a:	4303      	orrs	r3, r0
 800133c:	1e5a      	subs	r2, r3, #1
 800133e:	4193      	sbcs	r3, r2
 8001340:	431c      	orrs	r4, r3
 8001342:	e67e      	b.n	8001042 <__aeabi_dadd+0x322>
 8001344:	185c      	adds	r4, r3, r1
 8001346:	428c      	cmp	r4, r1
 8001348:	4189      	sbcs	r1, r1
 800134a:	4440      	add	r0, r8
 800134c:	4249      	negs	r1, r1
 800134e:	1847      	adds	r7, r0, r1
 8001350:	e6dd      	b.n	800110e <__aeabi_dadd+0x3ee>
 8001352:	0023      	movs	r3, r4
 8001354:	433b      	orrs	r3, r7
 8001356:	d100      	bne.n	800135a <__aeabi_dadd+0x63a>
 8001358:	e6ad      	b.n	80010b6 <__aeabi_dadd+0x396>
 800135a:	e606      	b.n	8000f6a <__aeabi_dadd+0x24a>
 800135c:	0744      	lsls	r4, r0, #29
 800135e:	4323      	orrs	r3, r4
 8001360:	2480      	movs	r4, #128	; 0x80
 8001362:	08c0      	lsrs	r0, r0, #3
 8001364:	0324      	lsls	r4, r4, #12
 8001366:	4220      	tst	r0, r4
 8001368:	d008      	beq.n	800137c <__aeabi_dadd+0x65c>
 800136a:	4642      	mov	r2, r8
 800136c:	08d6      	lsrs	r6, r2, #3
 800136e:	4226      	tst	r6, r4
 8001370:	d104      	bne.n	800137c <__aeabi_dadd+0x65c>
 8001372:	4655      	mov	r5, sl
 8001374:	0030      	movs	r0, r6
 8001376:	08cb      	lsrs	r3, r1, #3
 8001378:	0751      	lsls	r1, r2, #29
 800137a:	430b      	orrs	r3, r1
 800137c:	0f5a      	lsrs	r2, r3, #29
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	08db      	lsrs	r3, r3, #3
 8001382:	0752      	lsls	r2, r2, #29
 8001384:	4313      	orrs	r3, r2
 8001386:	e619      	b.n	8000fbc <__aeabi_dadd+0x29c>
 8001388:	2300      	movs	r3, #0
 800138a:	4a01      	ldr	r2, [pc, #4]	; (8001390 <__aeabi_dadd+0x670>)
 800138c:	001f      	movs	r7, r3
 800138e:	e55e      	b.n	8000e4e <__aeabi_dadd+0x12e>
 8001390:	000007ff 	.word	0x000007ff
 8001394:	ff7fffff 	.word	0xff7fffff

08001398 <__aeabi_ddiv>:
 8001398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139a:	4657      	mov	r7, sl
 800139c:	464e      	mov	r6, r9
 800139e:	4645      	mov	r5, r8
 80013a0:	46de      	mov	lr, fp
 80013a2:	b5e0      	push	{r5, r6, r7, lr}
 80013a4:	4681      	mov	r9, r0
 80013a6:	0005      	movs	r5, r0
 80013a8:	030c      	lsls	r4, r1, #12
 80013aa:	0048      	lsls	r0, r1, #1
 80013ac:	4692      	mov	sl, r2
 80013ae:	001f      	movs	r7, r3
 80013b0:	b085      	sub	sp, #20
 80013b2:	0b24      	lsrs	r4, r4, #12
 80013b4:	0d40      	lsrs	r0, r0, #21
 80013b6:	0fce      	lsrs	r6, r1, #31
 80013b8:	2800      	cmp	r0, #0
 80013ba:	d100      	bne.n	80013be <__aeabi_ddiv+0x26>
 80013bc:	e156      	b.n	800166c <__aeabi_ddiv+0x2d4>
 80013be:	4bd4      	ldr	r3, [pc, #848]	; (8001710 <__aeabi_ddiv+0x378>)
 80013c0:	4298      	cmp	r0, r3
 80013c2:	d100      	bne.n	80013c6 <__aeabi_ddiv+0x2e>
 80013c4:	e172      	b.n	80016ac <__aeabi_ddiv+0x314>
 80013c6:	0f6b      	lsrs	r3, r5, #29
 80013c8:	00e4      	lsls	r4, r4, #3
 80013ca:	431c      	orrs	r4, r3
 80013cc:	2380      	movs	r3, #128	; 0x80
 80013ce:	041b      	lsls	r3, r3, #16
 80013d0:	4323      	orrs	r3, r4
 80013d2:	4698      	mov	r8, r3
 80013d4:	4bcf      	ldr	r3, [pc, #828]	; (8001714 <__aeabi_ddiv+0x37c>)
 80013d6:	00ed      	lsls	r5, r5, #3
 80013d8:	469b      	mov	fp, r3
 80013da:	2300      	movs	r3, #0
 80013dc:	4699      	mov	r9, r3
 80013de:	4483      	add	fp, r0
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	033c      	lsls	r4, r7, #12
 80013e4:	007b      	lsls	r3, r7, #1
 80013e6:	4650      	mov	r0, sl
 80013e8:	0b24      	lsrs	r4, r4, #12
 80013ea:	0d5b      	lsrs	r3, r3, #21
 80013ec:	0fff      	lsrs	r7, r7, #31
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d100      	bne.n	80013f4 <__aeabi_ddiv+0x5c>
 80013f2:	e11f      	b.n	8001634 <__aeabi_ddiv+0x29c>
 80013f4:	4ac6      	ldr	r2, [pc, #792]	; (8001710 <__aeabi_ddiv+0x378>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d100      	bne.n	80013fc <__aeabi_ddiv+0x64>
 80013fa:	e162      	b.n	80016c2 <__aeabi_ddiv+0x32a>
 80013fc:	49c5      	ldr	r1, [pc, #788]	; (8001714 <__aeabi_ddiv+0x37c>)
 80013fe:	0f42      	lsrs	r2, r0, #29
 8001400:	468c      	mov	ip, r1
 8001402:	00e4      	lsls	r4, r4, #3
 8001404:	4659      	mov	r1, fp
 8001406:	4314      	orrs	r4, r2
 8001408:	2280      	movs	r2, #128	; 0x80
 800140a:	4463      	add	r3, ip
 800140c:	0412      	lsls	r2, r2, #16
 800140e:	1acb      	subs	r3, r1, r3
 8001410:	4314      	orrs	r4, r2
 8001412:	469b      	mov	fp, r3
 8001414:	00c2      	lsls	r2, r0, #3
 8001416:	2000      	movs	r0, #0
 8001418:	0033      	movs	r3, r6
 800141a:	407b      	eors	r3, r7
 800141c:	469a      	mov	sl, r3
 800141e:	464b      	mov	r3, r9
 8001420:	2b0f      	cmp	r3, #15
 8001422:	d827      	bhi.n	8001474 <__aeabi_ddiv+0xdc>
 8001424:	49bc      	ldr	r1, [pc, #752]	; (8001718 <__aeabi_ddiv+0x380>)
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	58cb      	ldr	r3, [r1, r3]
 800142a:	469f      	mov	pc, r3
 800142c:	46b2      	mov	sl, r6
 800142e:	9b00      	ldr	r3, [sp, #0]
 8001430:	2b02      	cmp	r3, #2
 8001432:	d016      	beq.n	8001462 <__aeabi_ddiv+0xca>
 8001434:	2b03      	cmp	r3, #3
 8001436:	d100      	bne.n	800143a <__aeabi_ddiv+0xa2>
 8001438:	e28e      	b.n	8001958 <__aeabi_ddiv+0x5c0>
 800143a:	2b01      	cmp	r3, #1
 800143c:	d000      	beq.n	8001440 <__aeabi_ddiv+0xa8>
 800143e:	e0d9      	b.n	80015f4 <__aeabi_ddiv+0x25c>
 8001440:	2300      	movs	r3, #0
 8001442:	2400      	movs	r4, #0
 8001444:	2500      	movs	r5, #0
 8001446:	4652      	mov	r2, sl
 8001448:	051b      	lsls	r3, r3, #20
 800144a:	4323      	orrs	r3, r4
 800144c:	07d2      	lsls	r2, r2, #31
 800144e:	4313      	orrs	r3, r2
 8001450:	0028      	movs	r0, r5
 8001452:	0019      	movs	r1, r3
 8001454:	b005      	add	sp, #20
 8001456:	bcf0      	pop	{r4, r5, r6, r7}
 8001458:	46bb      	mov	fp, r7
 800145a:	46b2      	mov	sl, r6
 800145c:	46a9      	mov	r9, r5
 800145e:	46a0      	mov	r8, r4
 8001460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001462:	2400      	movs	r4, #0
 8001464:	2500      	movs	r5, #0
 8001466:	4baa      	ldr	r3, [pc, #680]	; (8001710 <__aeabi_ddiv+0x378>)
 8001468:	e7ed      	b.n	8001446 <__aeabi_ddiv+0xae>
 800146a:	46ba      	mov	sl, r7
 800146c:	46a0      	mov	r8, r4
 800146e:	0015      	movs	r5, r2
 8001470:	9000      	str	r0, [sp, #0]
 8001472:	e7dc      	b.n	800142e <__aeabi_ddiv+0x96>
 8001474:	4544      	cmp	r4, r8
 8001476:	d200      	bcs.n	800147a <__aeabi_ddiv+0xe2>
 8001478:	e1c7      	b.n	800180a <__aeabi_ddiv+0x472>
 800147a:	d100      	bne.n	800147e <__aeabi_ddiv+0xe6>
 800147c:	e1c2      	b.n	8001804 <__aeabi_ddiv+0x46c>
 800147e:	2301      	movs	r3, #1
 8001480:	425b      	negs	r3, r3
 8001482:	469c      	mov	ip, r3
 8001484:	002e      	movs	r6, r5
 8001486:	4640      	mov	r0, r8
 8001488:	2500      	movs	r5, #0
 800148a:	44e3      	add	fp, ip
 800148c:	0223      	lsls	r3, r4, #8
 800148e:	0e14      	lsrs	r4, r2, #24
 8001490:	431c      	orrs	r4, r3
 8001492:	0c1b      	lsrs	r3, r3, #16
 8001494:	4699      	mov	r9, r3
 8001496:	0423      	lsls	r3, r4, #16
 8001498:	0c1f      	lsrs	r7, r3, #16
 800149a:	0212      	lsls	r2, r2, #8
 800149c:	4649      	mov	r1, r9
 800149e:	9200      	str	r2, [sp, #0]
 80014a0:	9701      	str	r7, [sp, #4]
 80014a2:	f7fe feb7 	bl	8000214 <__aeabi_uidivmod>
 80014a6:	0002      	movs	r2, r0
 80014a8:	437a      	muls	r2, r7
 80014aa:	040b      	lsls	r3, r1, #16
 80014ac:	0c31      	lsrs	r1, r6, #16
 80014ae:	4680      	mov	r8, r0
 80014b0:	4319      	orrs	r1, r3
 80014b2:	428a      	cmp	r2, r1
 80014b4:	d907      	bls.n	80014c6 <__aeabi_ddiv+0x12e>
 80014b6:	2301      	movs	r3, #1
 80014b8:	425b      	negs	r3, r3
 80014ba:	469c      	mov	ip, r3
 80014bc:	1909      	adds	r1, r1, r4
 80014be:	44e0      	add	r8, ip
 80014c0:	428c      	cmp	r4, r1
 80014c2:	d800      	bhi.n	80014c6 <__aeabi_ddiv+0x12e>
 80014c4:	e207      	b.n	80018d6 <__aeabi_ddiv+0x53e>
 80014c6:	1a88      	subs	r0, r1, r2
 80014c8:	4649      	mov	r1, r9
 80014ca:	f7fe fea3 	bl	8000214 <__aeabi_uidivmod>
 80014ce:	0409      	lsls	r1, r1, #16
 80014d0:	468c      	mov	ip, r1
 80014d2:	0431      	lsls	r1, r6, #16
 80014d4:	4666      	mov	r6, ip
 80014d6:	9a01      	ldr	r2, [sp, #4]
 80014d8:	0c09      	lsrs	r1, r1, #16
 80014da:	4342      	muls	r2, r0
 80014dc:	0003      	movs	r3, r0
 80014de:	4331      	orrs	r1, r6
 80014e0:	428a      	cmp	r2, r1
 80014e2:	d904      	bls.n	80014ee <__aeabi_ddiv+0x156>
 80014e4:	1909      	adds	r1, r1, r4
 80014e6:	3b01      	subs	r3, #1
 80014e8:	428c      	cmp	r4, r1
 80014ea:	d800      	bhi.n	80014ee <__aeabi_ddiv+0x156>
 80014ec:	e1ed      	b.n	80018ca <__aeabi_ddiv+0x532>
 80014ee:	1a88      	subs	r0, r1, r2
 80014f0:	4642      	mov	r2, r8
 80014f2:	0412      	lsls	r2, r2, #16
 80014f4:	431a      	orrs	r2, r3
 80014f6:	4690      	mov	r8, r2
 80014f8:	4641      	mov	r1, r8
 80014fa:	9b00      	ldr	r3, [sp, #0]
 80014fc:	040e      	lsls	r6, r1, #16
 80014fe:	0c1b      	lsrs	r3, r3, #16
 8001500:	001f      	movs	r7, r3
 8001502:	9302      	str	r3, [sp, #8]
 8001504:	9b00      	ldr	r3, [sp, #0]
 8001506:	0c36      	lsrs	r6, r6, #16
 8001508:	041b      	lsls	r3, r3, #16
 800150a:	0c19      	lsrs	r1, r3, #16
 800150c:	000b      	movs	r3, r1
 800150e:	4373      	muls	r3, r6
 8001510:	0c12      	lsrs	r2, r2, #16
 8001512:	437e      	muls	r6, r7
 8001514:	9103      	str	r1, [sp, #12]
 8001516:	4351      	muls	r1, r2
 8001518:	437a      	muls	r2, r7
 800151a:	0c1f      	lsrs	r7, r3, #16
 800151c:	46bc      	mov	ip, r7
 800151e:	1876      	adds	r6, r6, r1
 8001520:	4466      	add	r6, ip
 8001522:	42b1      	cmp	r1, r6
 8001524:	d903      	bls.n	800152e <__aeabi_ddiv+0x196>
 8001526:	2180      	movs	r1, #128	; 0x80
 8001528:	0249      	lsls	r1, r1, #9
 800152a:	468c      	mov	ip, r1
 800152c:	4462      	add	r2, ip
 800152e:	0c31      	lsrs	r1, r6, #16
 8001530:	188a      	adds	r2, r1, r2
 8001532:	0431      	lsls	r1, r6, #16
 8001534:	041e      	lsls	r6, r3, #16
 8001536:	0c36      	lsrs	r6, r6, #16
 8001538:	198e      	adds	r6, r1, r6
 800153a:	4290      	cmp	r0, r2
 800153c:	d302      	bcc.n	8001544 <__aeabi_ddiv+0x1ac>
 800153e:	d112      	bne.n	8001566 <__aeabi_ddiv+0x1ce>
 8001540:	42b5      	cmp	r5, r6
 8001542:	d210      	bcs.n	8001566 <__aeabi_ddiv+0x1ce>
 8001544:	4643      	mov	r3, r8
 8001546:	1e59      	subs	r1, r3, #1
 8001548:	9b00      	ldr	r3, [sp, #0]
 800154a:	469c      	mov	ip, r3
 800154c:	4465      	add	r5, ip
 800154e:	001f      	movs	r7, r3
 8001550:	429d      	cmp	r5, r3
 8001552:	419b      	sbcs	r3, r3
 8001554:	425b      	negs	r3, r3
 8001556:	191b      	adds	r3, r3, r4
 8001558:	18c0      	adds	r0, r0, r3
 800155a:	4284      	cmp	r4, r0
 800155c:	d200      	bcs.n	8001560 <__aeabi_ddiv+0x1c8>
 800155e:	e1a0      	b.n	80018a2 <__aeabi_ddiv+0x50a>
 8001560:	d100      	bne.n	8001564 <__aeabi_ddiv+0x1cc>
 8001562:	e19b      	b.n	800189c <__aeabi_ddiv+0x504>
 8001564:	4688      	mov	r8, r1
 8001566:	1bae      	subs	r6, r5, r6
 8001568:	42b5      	cmp	r5, r6
 800156a:	41ad      	sbcs	r5, r5
 800156c:	1a80      	subs	r0, r0, r2
 800156e:	426d      	negs	r5, r5
 8001570:	1b40      	subs	r0, r0, r5
 8001572:	4284      	cmp	r4, r0
 8001574:	d100      	bne.n	8001578 <__aeabi_ddiv+0x1e0>
 8001576:	e1d5      	b.n	8001924 <__aeabi_ddiv+0x58c>
 8001578:	4649      	mov	r1, r9
 800157a:	f7fe fe4b 	bl	8000214 <__aeabi_uidivmod>
 800157e:	9a01      	ldr	r2, [sp, #4]
 8001580:	040b      	lsls	r3, r1, #16
 8001582:	4342      	muls	r2, r0
 8001584:	0c31      	lsrs	r1, r6, #16
 8001586:	0005      	movs	r5, r0
 8001588:	4319      	orrs	r1, r3
 800158a:	428a      	cmp	r2, r1
 800158c:	d900      	bls.n	8001590 <__aeabi_ddiv+0x1f8>
 800158e:	e16c      	b.n	800186a <__aeabi_ddiv+0x4d2>
 8001590:	1a88      	subs	r0, r1, r2
 8001592:	4649      	mov	r1, r9
 8001594:	f7fe fe3e 	bl	8000214 <__aeabi_uidivmod>
 8001598:	9a01      	ldr	r2, [sp, #4]
 800159a:	0436      	lsls	r6, r6, #16
 800159c:	4342      	muls	r2, r0
 800159e:	0409      	lsls	r1, r1, #16
 80015a0:	0c36      	lsrs	r6, r6, #16
 80015a2:	0003      	movs	r3, r0
 80015a4:	430e      	orrs	r6, r1
 80015a6:	42b2      	cmp	r2, r6
 80015a8:	d900      	bls.n	80015ac <__aeabi_ddiv+0x214>
 80015aa:	e153      	b.n	8001854 <__aeabi_ddiv+0x4bc>
 80015ac:	9803      	ldr	r0, [sp, #12]
 80015ae:	1ab6      	subs	r6, r6, r2
 80015b0:	0002      	movs	r2, r0
 80015b2:	042d      	lsls	r5, r5, #16
 80015b4:	431d      	orrs	r5, r3
 80015b6:	9f02      	ldr	r7, [sp, #8]
 80015b8:	042b      	lsls	r3, r5, #16
 80015ba:	0c1b      	lsrs	r3, r3, #16
 80015bc:	435a      	muls	r2, r3
 80015be:	437b      	muls	r3, r7
 80015c0:	469c      	mov	ip, r3
 80015c2:	0c29      	lsrs	r1, r5, #16
 80015c4:	4348      	muls	r0, r1
 80015c6:	0c13      	lsrs	r3, r2, #16
 80015c8:	4484      	add	ip, r0
 80015ca:	4463      	add	r3, ip
 80015cc:	4379      	muls	r1, r7
 80015ce:	4298      	cmp	r0, r3
 80015d0:	d903      	bls.n	80015da <__aeabi_ddiv+0x242>
 80015d2:	2080      	movs	r0, #128	; 0x80
 80015d4:	0240      	lsls	r0, r0, #9
 80015d6:	4684      	mov	ip, r0
 80015d8:	4461      	add	r1, ip
 80015da:	0c18      	lsrs	r0, r3, #16
 80015dc:	0412      	lsls	r2, r2, #16
 80015de:	041b      	lsls	r3, r3, #16
 80015e0:	0c12      	lsrs	r2, r2, #16
 80015e2:	1841      	adds	r1, r0, r1
 80015e4:	189b      	adds	r3, r3, r2
 80015e6:	428e      	cmp	r6, r1
 80015e8:	d200      	bcs.n	80015ec <__aeabi_ddiv+0x254>
 80015ea:	e0ff      	b.n	80017ec <__aeabi_ddiv+0x454>
 80015ec:	d100      	bne.n	80015f0 <__aeabi_ddiv+0x258>
 80015ee:	e0fa      	b.n	80017e6 <__aeabi_ddiv+0x44e>
 80015f0:	2301      	movs	r3, #1
 80015f2:	431d      	orrs	r5, r3
 80015f4:	4a49      	ldr	r2, [pc, #292]	; (800171c <__aeabi_ddiv+0x384>)
 80015f6:	445a      	add	r2, fp
 80015f8:	2a00      	cmp	r2, #0
 80015fa:	dc00      	bgt.n	80015fe <__aeabi_ddiv+0x266>
 80015fc:	e0aa      	b.n	8001754 <__aeabi_ddiv+0x3bc>
 80015fe:	076b      	lsls	r3, r5, #29
 8001600:	d000      	beq.n	8001604 <__aeabi_ddiv+0x26c>
 8001602:	e13d      	b.n	8001880 <__aeabi_ddiv+0x4e8>
 8001604:	08ed      	lsrs	r5, r5, #3
 8001606:	4643      	mov	r3, r8
 8001608:	01db      	lsls	r3, r3, #7
 800160a:	d506      	bpl.n	800161a <__aeabi_ddiv+0x282>
 800160c:	4642      	mov	r2, r8
 800160e:	4b44      	ldr	r3, [pc, #272]	; (8001720 <__aeabi_ddiv+0x388>)
 8001610:	401a      	ands	r2, r3
 8001612:	4690      	mov	r8, r2
 8001614:	2280      	movs	r2, #128	; 0x80
 8001616:	00d2      	lsls	r2, r2, #3
 8001618:	445a      	add	r2, fp
 800161a:	4b42      	ldr	r3, [pc, #264]	; (8001724 <__aeabi_ddiv+0x38c>)
 800161c:	429a      	cmp	r2, r3
 800161e:	dd00      	ble.n	8001622 <__aeabi_ddiv+0x28a>
 8001620:	e71f      	b.n	8001462 <__aeabi_ddiv+0xca>
 8001622:	4643      	mov	r3, r8
 8001624:	075b      	lsls	r3, r3, #29
 8001626:	431d      	orrs	r5, r3
 8001628:	4643      	mov	r3, r8
 800162a:	0552      	lsls	r2, r2, #21
 800162c:	025c      	lsls	r4, r3, #9
 800162e:	0b24      	lsrs	r4, r4, #12
 8001630:	0d53      	lsrs	r3, r2, #21
 8001632:	e708      	b.n	8001446 <__aeabi_ddiv+0xae>
 8001634:	4652      	mov	r2, sl
 8001636:	4322      	orrs	r2, r4
 8001638:	d100      	bne.n	800163c <__aeabi_ddiv+0x2a4>
 800163a:	e07b      	b.n	8001734 <__aeabi_ddiv+0x39c>
 800163c:	2c00      	cmp	r4, #0
 800163e:	d100      	bne.n	8001642 <__aeabi_ddiv+0x2aa>
 8001640:	e0fa      	b.n	8001838 <__aeabi_ddiv+0x4a0>
 8001642:	0020      	movs	r0, r4
 8001644:	f001 f866 	bl	8002714 <__clzsi2>
 8001648:	0002      	movs	r2, r0
 800164a:	3a0b      	subs	r2, #11
 800164c:	231d      	movs	r3, #29
 800164e:	0001      	movs	r1, r0
 8001650:	1a9b      	subs	r3, r3, r2
 8001652:	4652      	mov	r2, sl
 8001654:	3908      	subs	r1, #8
 8001656:	40da      	lsrs	r2, r3
 8001658:	408c      	lsls	r4, r1
 800165a:	4314      	orrs	r4, r2
 800165c:	4652      	mov	r2, sl
 800165e:	408a      	lsls	r2, r1
 8001660:	4b31      	ldr	r3, [pc, #196]	; (8001728 <__aeabi_ddiv+0x390>)
 8001662:	4458      	add	r0, fp
 8001664:	469b      	mov	fp, r3
 8001666:	4483      	add	fp, r0
 8001668:	2000      	movs	r0, #0
 800166a:	e6d5      	b.n	8001418 <__aeabi_ddiv+0x80>
 800166c:	464b      	mov	r3, r9
 800166e:	4323      	orrs	r3, r4
 8001670:	4698      	mov	r8, r3
 8001672:	d044      	beq.n	80016fe <__aeabi_ddiv+0x366>
 8001674:	2c00      	cmp	r4, #0
 8001676:	d100      	bne.n	800167a <__aeabi_ddiv+0x2e2>
 8001678:	e0ce      	b.n	8001818 <__aeabi_ddiv+0x480>
 800167a:	0020      	movs	r0, r4
 800167c:	f001 f84a 	bl	8002714 <__clzsi2>
 8001680:	0001      	movs	r1, r0
 8001682:	0002      	movs	r2, r0
 8001684:	390b      	subs	r1, #11
 8001686:	231d      	movs	r3, #29
 8001688:	1a5b      	subs	r3, r3, r1
 800168a:	4649      	mov	r1, r9
 800168c:	0010      	movs	r0, r2
 800168e:	40d9      	lsrs	r1, r3
 8001690:	3808      	subs	r0, #8
 8001692:	4084      	lsls	r4, r0
 8001694:	000b      	movs	r3, r1
 8001696:	464d      	mov	r5, r9
 8001698:	4323      	orrs	r3, r4
 800169a:	4698      	mov	r8, r3
 800169c:	4085      	lsls	r5, r0
 800169e:	4823      	ldr	r0, [pc, #140]	; (800172c <__aeabi_ddiv+0x394>)
 80016a0:	1a83      	subs	r3, r0, r2
 80016a2:	469b      	mov	fp, r3
 80016a4:	2300      	movs	r3, #0
 80016a6:	4699      	mov	r9, r3
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	e69a      	b.n	80013e2 <__aeabi_ddiv+0x4a>
 80016ac:	464b      	mov	r3, r9
 80016ae:	4323      	orrs	r3, r4
 80016b0:	4698      	mov	r8, r3
 80016b2:	d11d      	bne.n	80016f0 <__aeabi_ddiv+0x358>
 80016b4:	2308      	movs	r3, #8
 80016b6:	4699      	mov	r9, r3
 80016b8:	3b06      	subs	r3, #6
 80016ba:	2500      	movs	r5, #0
 80016bc:	4683      	mov	fp, r0
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	e68f      	b.n	80013e2 <__aeabi_ddiv+0x4a>
 80016c2:	4652      	mov	r2, sl
 80016c4:	4322      	orrs	r2, r4
 80016c6:	d109      	bne.n	80016dc <__aeabi_ddiv+0x344>
 80016c8:	2302      	movs	r3, #2
 80016ca:	4649      	mov	r1, r9
 80016cc:	4319      	orrs	r1, r3
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <__aeabi_ddiv+0x398>)
 80016d0:	4689      	mov	r9, r1
 80016d2:	469c      	mov	ip, r3
 80016d4:	2400      	movs	r4, #0
 80016d6:	2002      	movs	r0, #2
 80016d8:	44e3      	add	fp, ip
 80016da:	e69d      	b.n	8001418 <__aeabi_ddiv+0x80>
 80016dc:	2303      	movs	r3, #3
 80016de:	464a      	mov	r2, r9
 80016e0:	431a      	orrs	r2, r3
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <__aeabi_ddiv+0x398>)
 80016e4:	4691      	mov	r9, r2
 80016e6:	469c      	mov	ip, r3
 80016e8:	4652      	mov	r2, sl
 80016ea:	2003      	movs	r0, #3
 80016ec:	44e3      	add	fp, ip
 80016ee:	e693      	b.n	8001418 <__aeabi_ddiv+0x80>
 80016f0:	230c      	movs	r3, #12
 80016f2:	4699      	mov	r9, r3
 80016f4:	3b09      	subs	r3, #9
 80016f6:	46a0      	mov	r8, r4
 80016f8:	4683      	mov	fp, r0
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	e671      	b.n	80013e2 <__aeabi_ddiv+0x4a>
 80016fe:	2304      	movs	r3, #4
 8001700:	4699      	mov	r9, r3
 8001702:	2300      	movs	r3, #0
 8001704:	469b      	mov	fp, r3
 8001706:	3301      	adds	r3, #1
 8001708:	2500      	movs	r5, #0
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	e669      	b.n	80013e2 <__aeabi_ddiv+0x4a>
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	000007ff 	.word	0x000007ff
 8001714:	fffffc01 	.word	0xfffffc01
 8001718:	080073b4 	.word	0x080073b4
 800171c:	000003ff 	.word	0x000003ff
 8001720:	feffffff 	.word	0xfeffffff
 8001724:	000007fe 	.word	0x000007fe
 8001728:	000003f3 	.word	0x000003f3
 800172c:	fffffc0d 	.word	0xfffffc0d
 8001730:	fffff801 	.word	0xfffff801
 8001734:	4649      	mov	r1, r9
 8001736:	2301      	movs	r3, #1
 8001738:	4319      	orrs	r1, r3
 800173a:	4689      	mov	r9, r1
 800173c:	2400      	movs	r4, #0
 800173e:	2001      	movs	r0, #1
 8001740:	e66a      	b.n	8001418 <__aeabi_ddiv+0x80>
 8001742:	2300      	movs	r3, #0
 8001744:	2480      	movs	r4, #128	; 0x80
 8001746:	469a      	mov	sl, r3
 8001748:	2500      	movs	r5, #0
 800174a:	4b8a      	ldr	r3, [pc, #552]	; (8001974 <__aeabi_ddiv+0x5dc>)
 800174c:	0324      	lsls	r4, r4, #12
 800174e:	e67a      	b.n	8001446 <__aeabi_ddiv+0xae>
 8001750:	2501      	movs	r5, #1
 8001752:	426d      	negs	r5, r5
 8001754:	2301      	movs	r3, #1
 8001756:	1a9b      	subs	r3, r3, r2
 8001758:	2b38      	cmp	r3, #56	; 0x38
 800175a:	dd00      	ble.n	800175e <__aeabi_ddiv+0x3c6>
 800175c:	e670      	b.n	8001440 <__aeabi_ddiv+0xa8>
 800175e:	2b1f      	cmp	r3, #31
 8001760:	dc00      	bgt.n	8001764 <__aeabi_ddiv+0x3cc>
 8001762:	e0bf      	b.n	80018e4 <__aeabi_ddiv+0x54c>
 8001764:	211f      	movs	r1, #31
 8001766:	4249      	negs	r1, r1
 8001768:	1a8a      	subs	r2, r1, r2
 800176a:	4641      	mov	r1, r8
 800176c:	40d1      	lsrs	r1, r2
 800176e:	000a      	movs	r2, r1
 8001770:	2b20      	cmp	r3, #32
 8001772:	d004      	beq.n	800177e <__aeabi_ddiv+0x3e6>
 8001774:	4641      	mov	r1, r8
 8001776:	4b80      	ldr	r3, [pc, #512]	; (8001978 <__aeabi_ddiv+0x5e0>)
 8001778:	445b      	add	r3, fp
 800177a:	4099      	lsls	r1, r3
 800177c:	430d      	orrs	r5, r1
 800177e:	1e6b      	subs	r3, r5, #1
 8001780:	419d      	sbcs	r5, r3
 8001782:	2307      	movs	r3, #7
 8001784:	432a      	orrs	r2, r5
 8001786:	001d      	movs	r5, r3
 8001788:	2400      	movs	r4, #0
 800178a:	4015      	ands	r5, r2
 800178c:	4213      	tst	r3, r2
 800178e:	d100      	bne.n	8001792 <__aeabi_ddiv+0x3fa>
 8001790:	e0d4      	b.n	800193c <__aeabi_ddiv+0x5a4>
 8001792:	210f      	movs	r1, #15
 8001794:	2300      	movs	r3, #0
 8001796:	4011      	ands	r1, r2
 8001798:	2904      	cmp	r1, #4
 800179a:	d100      	bne.n	800179e <__aeabi_ddiv+0x406>
 800179c:	e0cb      	b.n	8001936 <__aeabi_ddiv+0x59e>
 800179e:	1d11      	adds	r1, r2, #4
 80017a0:	4291      	cmp	r1, r2
 80017a2:	4192      	sbcs	r2, r2
 80017a4:	4252      	negs	r2, r2
 80017a6:	189b      	adds	r3, r3, r2
 80017a8:	000a      	movs	r2, r1
 80017aa:	0219      	lsls	r1, r3, #8
 80017ac:	d400      	bmi.n	80017b0 <__aeabi_ddiv+0x418>
 80017ae:	e0c2      	b.n	8001936 <__aeabi_ddiv+0x59e>
 80017b0:	2301      	movs	r3, #1
 80017b2:	2400      	movs	r4, #0
 80017b4:	2500      	movs	r5, #0
 80017b6:	e646      	b.n	8001446 <__aeabi_ddiv+0xae>
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	4641      	mov	r1, r8
 80017bc:	031b      	lsls	r3, r3, #12
 80017be:	4219      	tst	r1, r3
 80017c0:	d008      	beq.n	80017d4 <__aeabi_ddiv+0x43c>
 80017c2:	421c      	tst	r4, r3
 80017c4:	d106      	bne.n	80017d4 <__aeabi_ddiv+0x43c>
 80017c6:	431c      	orrs	r4, r3
 80017c8:	0324      	lsls	r4, r4, #12
 80017ca:	46ba      	mov	sl, r7
 80017cc:	0015      	movs	r5, r2
 80017ce:	4b69      	ldr	r3, [pc, #420]	; (8001974 <__aeabi_ddiv+0x5dc>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e638      	b.n	8001446 <__aeabi_ddiv+0xae>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	4643      	mov	r3, r8
 80017d8:	0324      	lsls	r4, r4, #12
 80017da:	431c      	orrs	r4, r3
 80017dc:	0324      	lsls	r4, r4, #12
 80017de:	46b2      	mov	sl, r6
 80017e0:	4b64      	ldr	r3, [pc, #400]	; (8001974 <__aeabi_ddiv+0x5dc>)
 80017e2:	0b24      	lsrs	r4, r4, #12
 80017e4:	e62f      	b.n	8001446 <__aeabi_ddiv+0xae>
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d100      	bne.n	80017ec <__aeabi_ddiv+0x454>
 80017ea:	e703      	b.n	80015f4 <__aeabi_ddiv+0x25c>
 80017ec:	19a6      	adds	r6, r4, r6
 80017ee:	1e68      	subs	r0, r5, #1
 80017f0:	42a6      	cmp	r6, r4
 80017f2:	d200      	bcs.n	80017f6 <__aeabi_ddiv+0x45e>
 80017f4:	e08d      	b.n	8001912 <__aeabi_ddiv+0x57a>
 80017f6:	428e      	cmp	r6, r1
 80017f8:	d200      	bcs.n	80017fc <__aeabi_ddiv+0x464>
 80017fa:	e0a3      	b.n	8001944 <__aeabi_ddiv+0x5ac>
 80017fc:	d100      	bne.n	8001800 <__aeabi_ddiv+0x468>
 80017fe:	e0b3      	b.n	8001968 <__aeabi_ddiv+0x5d0>
 8001800:	0005      	movs	r5, r0
 8001802:	e6f5      	b.n	80015f0 <__aeabi_ddiv+0x258>
 8001804:	42aa      	cmp	r2, r5
 8001806:	d900      	bls.n	800180a <__aeabi_ddiv+0x472>
 8001808:	e639      	b.n	800147e <__aeabi_ddiv+0xe6>
 800180a:	4643      	mov	r3, r8
 800180c:	07de      	lsls	r6, r3, #31
 800180e:	0858      	lsrs	r0, r3, #1
 8001810:	086b      	lsrs	r3, r5, #1
 8001812:	431e      	orrs	r6, r3
 8001814:	07ed      	lsls	r5, r5, #31
 8001816:	e639      	b.n	800148c <__aeabi_ddiv+0xf4>
 8001818:	4648      	mov	r0, r9
 800181a:	f000 ff7b 	bl	8002714 <__clzsi2>
 800181e:	0001      	movs	r1, r0
 8001820:	0002      	movs	r2, r0
 8001822:	3115      	adds	r1, #21
 8001824:	3220      	adds	r2, #32
 8001826:	291c      	cmp	r1, #28
 8001828:	dc00      	bgt.n	800182c <__aeabi_ddiv+0x494>
 800182a:	e72c      	b.n	8001686 <__aeabi_ddiv+0x2ee>
 800182c:	464b      	mov	r3, r9
 800182e:	3808      	subs	r0, #8
 8001830:	4083      	lsls	r3, r0
 8001832:	2500      	movs	r5, #0
 8001834:	4698      	mov	r8, r3
 8001836:	e732      	b.n	800169e <__aeabi_ddiv+0x306>
 8001838:	f000 ff6c 	bl	8002714 <__clzsi2>
 800183c:	0003      	movs	r3, r0
 800183e:	001a      	movs	r2, r3
 8001840:	3215      	adds	r2, #21
 8001842:	3020      	adds	r0, #32
 8001844:	2a1c      	cmp	r2, #28
 8001846:	dc00      	bgt.n	800184a <__aeabi_ddiv+0x4b2>
 8001848:	e700      	b.n	800164c <__aeabi_ddiv+0x2b4>
 800184a:	4654      	mov	r4, sl
 800184c:	3b08      	subs	r3, #8
 800184e:	2200      	movs	r2, #0
 8001850:	409c      	lsls	r4, r3
 8001852:	e705      	b.n	8001660 <__aeabi_ddiv+0x2c8>
 8001854:	1936      	adds	r6, r6, r4
 8001856:	3b01      	subs	r3, #1
 8001858:	42b4      	cmp	r4, r6
 800185a:	d900      	bls.n	800185e <__aeabi_ddiv+0x4c6>
 800185c:	e6a6      	b.n	80015ac <__aeabi_ddiv+0x214>
 800185e:	42b2      	cmp	r2, r6
 8001860:	d800      	bhi.n	8001864 <__aeabi_ddiv+0x4cc>
 8001862:	e6a3      	b.n	80015ac <__aeabi_ddiv+0x214>
 8001864:	1e83      	subs	r3, r0, #2
 8001866:	1936      	adds	r6, r6, r4
 8001868:	e6a0      	b.n	80015ac <__aeabi_ddiv+0x214>
 800186a:	1909      	adds	r1, r1, r4
 800186c:	3d01      	subs	r5, #1
 800186e:	428c      	cmp	r4, r1
 8001870:	d900      	bls.n	8001874 <__aeabi_ddiv+0x4dc>
 8001872:	e68d      	b.n	8001590 <__aeabi_ddiv+0x1f8>
 8001874:	428a      	cmp	r2, r1
 8001876:	d800      	bhi.n	800187a <__aeabi_ddiv+0x4e2>
 8001878:	e68a      	b.n	8001590 <__aeabi_ddiv+0x1f8>
 800187a:	1e85      	subs	r5, r0, #2
 800187c:	1909      	adds	r1, r1, r4
 800187e:	e687      	b.n	8001590 <__aeabi_ddiv+0x1f8>
 8001880:	230f      	movs	r3, #15
 8001882:	402b      	ands	r3, r5
 8001884:	2b04      	cmp	r3, #4
 8001886:	d100      	bne.n	800188a <__aeabi_ddiv+0x4f2>
 8001888:	e6bc      	b.n	8001604 <__aeabi_ddiv+0x26c>
 800188a:	2305      	movs	r3, #5
 800188c:	425b      	negs	r3, r3
 800188e:	42ab      	cmp	r3, r5
 8001890:	419b      	sbcs	r3, r3
 8001892:	3504      	adds	r5, #4
 8001894:	425b      	negs	r3, r3
 8001896:	08ed      	lsrs	r5, r5, #3
 8001898:	4498      	add	r8, r3
 800189a:	e6b4      	b.n	8001606 <__aeabi_ddiv+0x26e>
 800189c:	42af      	cmp	r7, r5
 800189e:	d900      	bls.n	80018a2 <__aeabi_ddiv+0x50a>
 80018a0:	e660      	b.n	8001564 <__aeabi_ddiv+0x1cc>
 80018a2:	4282      	cmp	r2, r0
 80018a4:	d804      	bhi.n	80018b0 <__aeabi_ddiv+0x518>
 80018a6:	d000      	beq.n	80018aa <__aeabi_ddiv+0x512>
 80018a8:	e65c      	b.n	8001564 <__aeabi_ddiv+0x1cc>
 80018aa:	42ae      	cmp	r6, r5
 80018ac:	d800      	bhi.n	80018b0 <__aeabi_ddiv+0x518>
 80018ae:	e659      	b.n	8001564 <__aeabi_ddiv+0x1cc>
 80018b0:	2302      	movs	r3, #2
 80018b2:	425b      	negs	r3, r3
 80018b4:	469c      	mov	ip, r3
 80018b6:	9b00      	ldr	r3, [sp, #0]
 80018b8:	44e0      	add	r8, ip
 80018ba:	469c      	mov	ip, r3
 80018bc:	4465      	add	r5, ip
 80018be:	429d      	cmp	r5, r3
 80018c0:	419b      	sbcs	r3, r3
 80018c2:	425b      	negs	r3, r3
 80018c4:	191b      	adds	r3, r3, r4
 80018c6:	18c0      	adds	r0, r0, r3
 80018c8:	e64d      	b.n	8001566 <__aeabi_ddiv+0x1ce>
 80018ca:	428a      	cmp	r2, r1
 80018cc:	d800      	bhi.n	80018d0 <__aeabi_ddiv+0x538>
 80018ce:	e60e      	b.n	80014ee <__aeabi_ddiv+0x156>
 80018d0:	1e83      	subs	r3, r0, #2
 80018d2:	1909      	adds	r1, r1, r4
 80018d4:	e60b      	b.n	80014ee <__aeabi_ddiv+0x156>
 80018d6:	428a      	cmp	r2, r1
 80018d8:	d800      	bhi.n	80018dc <__aeabi_ddiv+0x544>
 80018da:	e5f4      	b.n	80014c6 <__aeabi_ddiv+0x12e>
 80018dc:	1e83      	subs	r3, r0, #2
 80018de:	4698      	mov	r8, r3
 80018e0:	1909      	adds	r1, r1, r4
 80018e2:	e5f0      	b.n	80014c6 <__aeabi_ddiv+0x12e>
 80018e4:	4925      	ldr	r1, [pc, #148]	; (800197c <__aeabi_ddiv+0x5e4>)
 80018e6:	0028      	movs	r0, r5
 80018e8:	4459      	add	r1, fp
 80018ea:	408d      	lsls	r5, r1
 80018ec:	4642      	mov	r2, r8
 80018ee:	408a      	lsls	r2, r1
 80018f0:	1e69      	subs	r1, r5, #1
 80018f2:	418d      	sbcs	r5, r1
 80018f4:	4641      	mov	r1, r8
 80018f6:	40d8      	lsrs	r0, r3
 80018f8:	40d9      	lsrs	r1, r3
 80018fa:	4302      	orrs	r2, r0
 80018fc:	432a      	orrs	r2, r5
 80018fe:	000b      	movs	r3, r1
 8001900:	0751      	lsls	r1, r2, #29
 8001902:	d100      	bne.n	8001906 <__aeabi_ddiv+0x56e>
 8001904:	e751      	b.n	80017aa <__aeabi_ddiv+0x412>
 8001906:	210f      	movs	r1, #15
 8001908:	4011      	ands	r1, r2
 800190a:	2904      	cmp	r1, #4
 800190c:	d000      	beq.n	8001910 <__aeabi_ddiv+0x578>
 800190e:	e746      	b.n	800179e <__aeabi_ddiv+0x406>
 8001910:	e74b      	b.n	80017aa <__aeabi_ddiv+0x412>
 8001912:	0005      	movs	r5, r0
 8001914:	428e      	cmp	r6, r1
 8001916:	d000      	beq.n	800191a <__aeabi_ddiv+0x582>
 8001918:	e66a      	b.n	80015f0 <__aeabi_ddiv+0x258>
 800191a:	9a00      	ldr	r2, [sp, #0]
 800191c:	4293      	cmp	r3, r2
 800191e:	d000      	beq.n	8001922 <__aeabi_ddiv+0x58a>
 8001920:	e666      	b.n	80015f0 <__aeabi_ddiv+0x258>
 8001922:	e667      	b.n	80015f4 <__aeabi_ddiv+0x25c>
 8001924:	4a16      	ldr	r2, [pc, #88]	; (8001980 <__aeabi_ddiv+0x5e8>)
 8001926:	445a      	add	r2, fp
 8001928:	2a00      	cmp	r2, #0
 800192a:	dc00      	bgt.n	800192e <__aeabi_ddiv+0x596>
 800192c:	e710      	b.n	8001750 <__aeabi_ddiv+0x3b8>
 800192e:	2301      	movs	r3, #1
 8001930:	2500      	movs	r5, #0
 8001932:	4498      	add	r8, r3
 8001934:	e667      	b.n	8001606 <__aeabi_ddiv+0x26e>
 8001936:	075d      	lsls	r5, r3, #29
 8001938:	025b      	lsls	r3, r3, #9
 800193a:	0b1c      	lsrs	r4, r3, #12
 800193c:	08d2      	lsrs	r2, r2, #3
 800193e:	2300      	movs	r3, #0
 8001940:	4315      	orrs	r5, r2
 8001942:	e580      	b.n	8001446 <__aeabi_ddiv+0xae>
 8001944:	9800      	ldr	r0, [sp, #0]
 8001946:	3d02      	subs	r5, #2
 8001948:	0042      	lsls	r2, r0, #1
 800194a:	4282      	cmp	r2, r0
 800194c:	41bf      	sbcs	r7, r7
 800194e:	427f      	negs	r7, r7
 8001950:	193c      	adds	r4, r7, r4
 8001952:	1936      	adds	r6, r6, r4
 8001954:	9200      	str	r2, [sp, #0]
 8001956:	e7dd      	b.n	8001914 <__aeabi_ddiv+0x57c>
 8001958:	2480      	movs	r4, #128	; 0x80
 800195a:	4643      	mov	r3, r8
 800195c:	0324      	lsls	r4, r4, #12
 800195e:	431c      	orrs	r4, r3
 8001960:	0324      	lsls	r4, r4, #12
 8001962:	4b04      	ldr	r3, [pc, #16]	; (8001974 <__aeabi_ddiv+0x5dc>)
 8001964:	0b24      	lsrs	r4, r4, #12
 8001966:	e56e      	b.n	8001446 <__aeabi_ddiv+0xae>
 8001968:	9a00      	ldr	r2, [sp, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d3ea      	bcc.n	8001944 <__aeabi_ddiv+0x5ac>
 800196e:	0005      	movs	r5, r0
 8001970:	e7d3      	b.n	800191a <__aeabi_ddiv+0x582>
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	000007ff 	.word	0x000007ff
 8001978:	0000043e 	.word	0x0000043e
 800197c:	0000041e 	.word	0x0000041e
 8001980:	000003ff 	.word	0x000003ff

08001984 <__aeabi_dmul>:
 8001984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001986:	4657      	mov	r7, sl
 8001988:	464e      	mov	r6, r9
 800198a:	4645      	mov	r5, r8
 800198c:	46de      	mov	lr, fp
 800198e:	b5e0      	push	{r5, r6, r7, lr}
 8001990:	4698      	mov	r8, r3
 8001992:	030c      	lsls	r4, r1, #12
 8001994:	004b      	lsls	r3, r1, #1
 8001996:	0006      	movs	r6, r0
 8001998:	4692      	mov	sl, r2
 800199a:	b087      	sub	sp, #28
 800199c:	0b24      	lsrs	r4, r4, #12
 800199e:	0d5b      	lsrs	r3, r3, #21
 80019a0:	0fcf      	lsrs	r7, r1, #31
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d100      	bne.n	80019a8 <__aeabi_dmul+0x24>
 80019a6:	e15c      	b.n	8001c62 <__aeabi_dmul+0x2de>
 80019a8:	4ad9      	ldr	r2, [pc, #868]	; (8001d10 <__aeabi_dmul+0x38c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d100      	bne.n	80019b0 <__aeabi_dmul+0x2c>
 80019ae:	e175      	b.n	8001c9c <__aeabi_dmul+0x318>
 80019b0:	0f42      	lsrs	r2, r0, #29
 80019b2:	00e4      	lsls	r4, r4, #3
 80019b4:	4314      	orrs	r4, r2
 80019b6:	2280      	movs	r2, #128	; 0x80
 80019b8:	0412      	lsls	r2, r2, #16
 80019ba:	4314      	orrs	r4, r2
 80019bc:	4ad5      	ldr	r2, [pc, #852]	; (8001d14 <__aeabi_dmul+0x390>)
 80019be:	00c5      	lsls	r5, r0, #3
 80019c0:	4694      	mov	ip, r2
 80019c2:	4463      	add	r3, ip
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	2300      	movs	r3, #0
 80019c8:	4699      	mov	r9, r3
 80019ca:	469b      	mov	fp, r3
 80019cc:	4643      	mov	r3, r8
 80019ce:	4642      	mov	r2, r8
 80019d0:	031e      	lsls	r6, r3, #12
 80019d2:	0fd2      	lsrs	r2, r2, #31
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4650      	mov	r0, sl
 80019d8:	4690      	mov	r8, r2
 80019da:	0b36      	lsrs	r6, r6, #12
 80019dc:	0d5b      	lsrs	r3, r3, #21
 80019de:	d100      	bne.n	80019e2 <__aeabi_dmul+0x5e>
 80019e0:	e120      	b.n	8001c24 <__aeabi_dmul+0x2a0>
 80019e2:	4acb      	ldr	r2, [pc, #812]	; (8001d10 <__aeabi_dmul+0x38c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d100      	bne.n	80019ea <__aeabi_dmul+0x66>
 80019e8:	e162      	b.n	8001cb0 <__aeabi_dmul+0x32c>
 80019ea:	49ca      	ldr	r1, [pc, #808]	; (8001d14 <__aeabi_dmul+0x390>)
 80019ec:	0f42      	lsrs	r2, r0, #29
 80019ee:	468c      	mov	ip, r1
 80019f0:	9900      	ldr	r1, [sp, #0]
 80019f2:	4463      	add	r3, ip
 80019f4:	00f6      	lsls	r6, r6, #3
 80019f6:	468c      	mov	ip, r1
 80019f8:	4316      	orrs	r6, r2
 80019fa:	2280      	movs	r2, #128	; 0x80
 80019fc:	449c      	add	ip, r3
 80019fe:	0412      	lsls	r2, r2, #16
 8001a00:	4663      	mov	r3, ip
 8001a02:	4316      	orrs	r6, r2
 8001a04:	00c2      	lsls	r2, r0, #3
 8001a06:	2000      	movs	r0, #0
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	9900      	ldr	r1, [sp, #0]
 8001a0c:	4643      	mov	r3, r8
 8001a0e:	3101      	adds	r1, #1
 8001a10:	468c      	mov	ip, r1
 8001a12:	4649      	mov	r1, r9
 8001a14:	407b      	eors	r3, r7
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	290f      	cmp	r1, #15
 8001a1a:	d826      	bhi.n	8001a6a <__aeabi_dmul+0xe6>
 8001a1c:	4bbe      	ldr	r3, [pc, #760]	; (8001d18 <__aeabi_dmul+0x394>)
 8001a1e:	0089      	lsls	r1, r1, #2
 8001a20:	5859      	ldr	r1, [r3, r1]
 8001a22:	468f      	mov	pc, r1
 8001a24:	4643      	mov	r3, r8
 8001a26:	9301      	str	r3, [sp, #4]
 8001a28:	0034      	movs	r4, r6
 8001a2a:	0015      	movs	r5, r2
 8001a2c:	4683      	mov	fp, r0
 8001a2e:	465b      	mov	r3, fp
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d016      	beq.n	8001a62 <__aeabi_dmul+0xde>
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d100      	bne.n	8001a3a <__aeabi_dmul+0xb6>
 8001a38:	e203      	b.n	8001e42 <__aeabi_dmul+0x4be>
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d000      	beq.n	8001a40 <__aeabi_dmul+0xbc>
 8001a3e:	e0cd      	b.n	8001bdc <__aeabi_dmul+0x258>
 8001a40:	2200      	movs	r2, #0
 8001a42:	2400      	movs	r4, #0
 8001a44:	2500      	movs	r5, #0
 8001a46:	9b01      	ldr	r3, [sp, #4]
 8001a48:	0512      	lsls	r2, r2, #20
 8001a4a:	4322      	orrs	r2, r4
 8001a4c:	07db      	lsls	r3, r3, #31
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	0028      	movs	r0, r5
 8001a52:	0011      	movs	r1, r2
 8001a54:	b007      	add	sp, #28
 8001a56:	bcf0      	pop	{r4, r5, r6, r7}
 8001a58:	46bb      	mov	fp, r7
 8001a5a:	46b2      	mov	sl, r6
 8001a5c:	46a9      	mov	r9, r5
 8001a5e:	46a0      	mov	r8, r4
 8001a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a62:	2400      	movs	r4, #0
 8001a64:	2500      	movs	r5, #0
 8001a66:	4aaa      	ldr	r2, [pc, #680]	; (8001d10 <__aeabi_dmul+0x38c>)
 8001a68:	e7ed      	b.n	8001a46 <__aeabi_dmul+0xc2>
 8001a6a:	0c28      	lsrs	r0, r5, #16
 8001a6c:	042d      	lsls	r5, r5, #16
 8001a6e:	0c2d      	lsrs	r5, r5, #16
 8001a70:	002b      	movs	r3, r5
 8001a72:	0c11      	lsrs	r1, r2, #16
 8001a74:	0412      	lsls	r2, r2, #16
 8001a76:	0c12      	lsrs	r2, r2, #16
 8001a78:	4353      	muls	r3, r2
 8001a7a:	4698      	mov	r8, r3
 8001a7c:	0013      	movs	r3, r2
 8001a7e:	002f      	movs	r7, r5
 8001a80:	4343      	muls	r3, r0
 8001a82:	4699      	mov	r9, r3
 8001a84:	434f      	muls	r7, r1
 8001a86:	444f      	add	r7, r9
 8001a88:	46bb      	mov	fp, r7
 8001a8a:	4647      	mov	r7, r8
 8001a8c:	000b      	movs	r3, r1
 8001a8e:	0c3f      	lsrs	r7, r7, #16
 8001a90:	46ba      	mov	sl, r7
 8001a92:	4343      	muls	r3, r0
 8001a94:	44da      	add	sl, fp
 8001a96:	9302      	str	r3, [sp, #8]
 8001a98:	45d1      	cmp	r9, sl
 8001a9a:	d904      	bls.n	8001aa6 <__aeabi_dmul+0x122>
 8001a9c:	2780      	movs	r7, #128	; 0x80
 8001a9e:	027f      	lsls	r7, r7, #9
 8001aa0:	46b9      	mov	r9, r7
 8001aa2:	444b      	add	r3, r9
 8001aa4:	9302      	str	r3, [sp, #8]
 8001aa6:	4653      	mov	r3, sl
 8001aa8:	0c1b      	lsrs	r3, r3, #16
 8001aaa:	469b      	mov	fp, r3
 8001aac:	4653      	mov	r3, sl
 8001aae:	041f      	lsls	r7, r3, #16
 8001ab0:	4643      	mov	r3, r8
 8001ab2:	041b      	lsls	r3, r3, #16
 8001ab4:	0c1b      	lsrs	r3, r3, #16
 8001ab6:	4698      	mov	r8, r3
 8001ab8:	003b      	movs	r3, r7
 8001aba:	4443      	add	r3, r8
 8001abc:	9304      	str	r3, [sp, #16]
 8001abe:	0c33      	lsrs	r3, r6, #16
 8001ac0:	0436      	lsls	r6, r6, #16
 8001ac2:	0c36      	lsrs	r6, r6, #16
 8001ac4:	4698      	mov	r8, r3
 8001ac6:	0033      	movs	r3, r6
 8001ac8:	4343      	muls	r3, r0
 8001aca:	4699      	mov	r9, r3
 8001acc:	4643      	mov	r3, r8
 8001ace:	4343      	muls	r3, r0
 8001ad0:	002f      	movs	r7, r5
 8001ad2:	469a      	mov	sl, r3
 8001ad4:	4643      	mov	r3, r8
 8001ad6:	4377      	muls	r7, r6
 8001ad8:	435d      	muls	r5, r3
 8001ada:	0c38      	lsrs	r0, r7, #16
 8001adc:	444d      	add	r5, r9
 8001ade:	1945      	adds	r5, r0, r5
 8001ae0:	45a9      	cmp	r9, r5
 8001ae2:	d903      	bls.n	8001aec <__aeabi_dmul+0x168>
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	025b      	lsls	r3, r3, #9
 8001ae8:	4699      	mov	r9, r3
 8001aea:	44ca      	add	sl, r9
 8001aec:	043f      	lsls	r7, r7, #16
 8001aee:	0c28      	lsrs	r0, r5, #16
 8001af0:	0c3f      	lsrs	r7, r7, #16
 8001af2:	042d      	lsls	r5, r5, #16
 8001af4:	19ed      	adds	r5, r5, r7
 8001af6:	0c27      	lsrs	r7, r4, #16
 8001af8:	0424      	lsls	r4, r4, #16
 8001afa:	0c24      	lsrs	r4, r4, #16
 8001afc:	0003      	movs	r3, r0
 8001afe:	0020      	movs	r0, r4
 8001b00:	4350      	muls	r0, r2
 8001b02:	437a      	muls	r2, r7
 8001b04:	4691      	mov	r9, r2
 8001b06:	003a      	movs	r2, r7
 8001b08:	4453      	add	r3, sl
 8001b0a:	9305      	str	r3, [sp, #20]
 8001b0c:	0c03      	lsrs	r3, r0, #16
 8001b0e:	469a      	mov	sl, r3
 8001b10:	434a      	muls	r2, r1
 8001b12:	4361      	muls	r1, r4
 8001b14:	4449      	add	r1, r9
 8001b16:	4451      	add	r1, sl
 8001b18:	44ab      	add	fp, r5
 8001b1a:	4589      	cmp	r9, r1
 8001b1c:	d903      	bls.n	8001b26 <__aeabi_dmul+0x1a2>
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	025b      	lsls	r3, r3, #9
 8001b22:	4699      	mov	r9, r3
 8001b24:	444a      	add	r2, r9
 8001b26:	0400      	lsls	r0, r0, #16
 8001b28:	0c0b      	lsrs	r3, r1, #16
 8001b2a:	0c00      	lsrs	r0, r0, #16
 8001b2c:	0409      	lsls	r1, r1, #16
 8001b2e:	1809      	adds	r1, r1, r0
 8001b30:	0020      	movs	r0, r4
 8001b32:	4699      	mov	r9, r3
 8001b34:	4643      	mov	r3, r8
 8001b36:	4370      	muls	r0, r6
 8001b38:	435c      	muls	r4, r3
 8001b3a:	437e      	muls	r6, r7
 8001b3c:	435f      	muls	r7, r3
 8001b3e:	0c03      	lsrs	r3, r0, #16
 8001b40:	4698      	mov	r8, r3
 8001b42:	19a4      	adds	r4, r4, r6
 8001b44:	4444      	add	r4, r8
 8001b46:	444a      	add	r2, r9
 8001b48:	9703      	str	r7, [sp, #12]
 8001b4a:	42a6      	cmp	r6, r4
 8001b4c:	d904      	bls.n	8001b58 <__aeabi_dmul+0x1d4>
 8001b4e:	2380      	movs	r3, #128	; 0x80
 8001b50:	025b      	lsls	r3, r3, #9
 8001b52:	4698      	mov	r8, r3
 8001b54:	4447      	add	r7, r8
 8001b56:	9703      	str	r7, [sp, #12]
 8001b58:	0423      	lsls	r3, r4, #16
 8001b5a:	9e02      	ldr	r6, [sp, #8]
 8001b5c:	469a      	mov	sl, r3
 8001b5e:	9b05      	ldr	r3, [sp, #20]
 8001b60:	445e      	add	r6, fp
 8001b62:	4698      	mov	r8, r3
 8001b64:	42ae      	cmp	r6, r5
 8001b66:	41ad      	sbcs	r5, r5
 8001b68:	1876      	adds	r6, r6, r1
 8001b6a:	428e      	cmp	r6, r1
 8001b6c:	4189      	sbcs	r1, r1
 8001b6e:	0400      	lsls	r0, r0, #16
 8001b70:	0c00      	lsrs	r0, r0, #16
 8001b72:	4450      	add	r0, sl
 8001b74:	4440      	add	r0, r8
 8001b76:	426d      	negs	r5, r5
 8001b78:	1947      	adds	r7, r0, r5
 8001b7a:	46b8      	mov	r8, r7
 8001b7c:	4693      	mov	fp, r2
 8001b7e:	4249      	negs	r1, r1
 8001b80:	4689      	mov	r9, r1
 8001b82:	44c3      	add	fp, r8
 8001b84:	44d9      	add	r9, fp
 8001b86:	4298      	cmp	r0, r3
 8001b88:	4180      	sbcs	r0, r0
 8001b8a:	45a8      	cmp	r8, r5
 8001b8c:	41ad      	sbcs	r5, r5
 8001b8e:	4593      	cmp	fp, r2
 8001b90:	4192      	sbcs	r2, r2
 8001b92:	4589      	cmp	r9, r1
 8001b94:	4189      	sbcs	r1, r1
 8001b96:	426d      	negs	r5, r5
 8001b98:	4240      	negs	r0, r0
 8001b9a:	4328      	orrs	r0, r5
 8001b9c:	0c24      	lsrs	r4, r4, #16
 8001b9e:	4252      	negs	r2, r2
 8001ba0:	4249      	negs	r1, r1
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	9b03      	ldr	r3, [sp, #12]
 8001ba6:	1900      	adds	r0, r0, r4
 8001ba8:	1880      	adds	r0, r0, r2
 8001baa:	18c7      	adds	r7, r0, r3
 8001bac:	464b      	mov	r3, r9
 8001bae:	0ddc      	lsrs	r4, r3, #23
 8001bb0:	9b04      	ldr	r3, [sp, #16]
 8001bb2:	0275      	lsls	r5, r6, #9
 8001bb4:	431d      	orrs	r5, r3
 8001bb6:	1e6a      	subs	r2, r5, #1
 8001bb8:	4195      	sbcs	r5, r2
 8001bba:	464b      	mov	r3, r9
 8001bbc:	0df6      	lsrs	r6, r6, #23
 8001bbe:	027f      	lsls	r7, r7, #9
 8001bc0:	4335      	orrs	r5, r6
 8001bc2:	025a      	lsls	r2, r3, #9
 8001bc4:	433c      	orrs	r4, r7
 8001bc6:	4315      	orrs	r5, r2
 8001bc8:	01fb      	lsls	r3, r7, #7
 8001bca:	d400      	bmi.n	8001bce <__aeabi_dmul+0x24a>
 8001bcc:	e11c      	b.n	8001e08 <__aeabi_dmul+0x484>
 8001bce:	2101      	movs	r1, #1
 8001bd0:	086a      	lsrs	r2, r5, #1
 8001bd2:	400d      	ands	r5, r1
 8001bd4:	4315      	orrs	r5, r2
 8001bd6:	07e2      	lsls	r2, r4, #31
 8001bd8:	4315      	orrs	r5, r2
 8001bda:	0864      	lsrs	r4, r4, #1
 8001bdc:	494f      	ldr	r1, [pc, #316]	; (8001d1c <__aeabi_dmul+0x398>)
 8001bde:	4461      	add	r1, ip
 8001be0:	2900      	cmp	r1, #0
 8001be2:	dc00      	bgt.n	8001be6 <__aeabi_dmul+0x262>
 8001be4:	e0b0      	b.n	8001d48 <__aeabi_dmul+0x3c4>
 8001be6:	076b      	lsls	r3, r5, #29
 8001be8:	d009      	beq.n	8001bfe <__aeabi_dmul+0x27a>
 8001bea:	220f      	movs	r2, #15
 8001bec:	402a      	ands	r2, r5
 8001bee:	2a04      	cmp	r2, #4
 8001bf0:	d005      	beq.n	8001bfe <__aeabi_dmul+0x27a>
 8001bf2:	1d2a      	adds	r2, r5, #4
 8001bf4:	42aa      	cmp	r2, r5
 8001bf6:	41ad      	sbcs	r5, r5
 8001bf8:	426d      	negs	r5, r5
 8001bfa:	1964      	adds	r4, r4, r5
 8001bfc:	0015      	movs	r5, r2
 8001bfe:	01e3      	lsls	r3, r4, #7
 8001c00:	d504      	bpl.n	8001c0c <__aeabi_dmul+0x288>
 8001c02:	2180      	movs	r1, #128	; 0x80
 8001c04:	4a46      	ldr	r2, [pc, #280]	; (8001d20 <__aeabi_dmul+0x39c>)
 8001c06:	00c9      	lsls	r1, r1, #3
 8001c08:	4014      	ands	r4, r2
 8001c0a:	4461      	add	r1, ip
 8001c0c:	4a45      	ldr	r2, [pc, #276]	; (8001d24 <__aeabi_dmul+0x3a0>)
 8001c0e:	4291      	cmp	r1, r2
 8001c10:	dd00      	ble.n	8001c14 <__aeabi_dmul+0x290>
 8001c12:	e726      	b.n	8001a62 <__aeabi_dmul+0xde>
 8001c14:	0762      	lsls	r2, r4, #29
 8001c16:	08ed      	lsrs	r5, r5, #3
 8001c18:	0264      	lsls	r4, r4, #9
 8001c1a:	0549      	lsls	r1, r1, #21
 8001c1c:	4315      	orrs	r5, r2
 8001c1e:	0b24      	lsrs	r4, r4, #12
 8001c20:	0d4a      	lsrs	r2, r1, #21
 8001c22:	e710      	b.n	8001a46 <__aeabi_dmul+0xc2>
 8001c24:	4652      	mov	r2, sl
 8001c26:	4332      	orrs	r2, r6
 8001c28:	d100      	bne.n	8001c2c <__aeabi_dmul+0x2a8>
 8001c2a:	e07f      	b.n	8001d2c <__aeabi_dmul+0x3a8>
 8001c2c:	2e00      	cmp	r6, #0
 8001c2e:	d100      	bne.n	8001c32 <__aeabi_dmul+0x2ae>
 8001c30:	e0dc      	b.n	8001dec <__aeabi_dmul+0x468>
 8001c32:	0030      	movs	r0, r6
 8001c34:	f000 fd6e 	bl	8002714 <__clzsi2>
 8001c38:	0002      	movs	r2, r0
 8001c3a:	3a0b      	subs	r2, #11
 8001c3c:	231d      	movs	r3, #29
 8001c3e:	0001      	movs	r1, r0
 8001c40:	1a9b      	subs	r3, r3, r2
 8001c42:	4652      	mov	r2, sl
 8001c44:	3908      	subs	r1, #8
 8001c46:	40da      	lsrs	r2, r3
 8001c48:	408e      	lsls	r6, r1
 8001c4a:	4316      	orrs	r6, r2
 8001c4c:	4652      	mov	r2, sl
 8001c4e:	408a      	lsls	r2, r1
 8001c50:	9b00      	ldr	r3, [sp, #0]
 8001c52:	4935      	ldr	r1, [pc, #212]	; (8001d28 <__aeabi_dmul+0x3a4>)
 8001c54:	1a18      	subs	r0, r3, r0
 8001c56:	0003      	movs	r3, r0
 8001c58:	468c      	mov	ip, r1
 8001c5a:	4463      	add	r3, ip
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	e6d3      	b.n	8001a0a <__aeabi_dmul+0x86>
 8001c62:	0025      	movs	r5, r4
 8001c64:	4305      	orrs	r5, r0
 8001c66:	d04a      	beq.n	8001cfe <__aeabi_dmul+0x37a>
 8001c68:	2c00      	cmp	r4, #0
 8001c6a:	d100      	bne.n	8001c6e <__aeabi_dmul+0x2ea>
 8001c6c:	e0b0      	b.n	8001dd0 <__aeabi_dmul+0x44c>
 8001c6e:	0020      	movs	r0, r4
 8001c70:	f000 fd50 	bl	8002714 <__clzsi2>
 8001c74:	0001      	movs	r1, r0
 8001c76:	0002      	movs	r2, r0
 8001c78:	390b      	subs	r1, #11
 8001c7a:	231d      	movs	r3, #29
 8001c7c:	0010      	movs	r0, r2
 8001c7e:	1a5b      	subs	r3, r3, r1
 8001c80:	0031      	movs	r1, r6
 8001c82:	0035      	movs	r5, r6
 8001c84:	3808      	subs	r0, #8
 8001c86:	4084      	lsls	r4, r0
 8001c88:	40d9      	lsrs	r1, r3
 8001c8a:	4085      	lsls	r5, r0
 8001c8c:	430c      	orrs	r4, r1
 8001c8e:	4826      	ldr	r0, [pc, #152]	; (8001d28 <__aeabi_dmul+0x3a4>)
 8001c90:	1a83      	subs	r3, r0, r2
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	2300      	movs	r3, #0
 8001c96:	4699      	mov	r9, r3
 8001c98:	469b      	mov	fp, r3
 8001c9a:	e697      	b.n	80019cc <__aeabi_dmul+0x48>
 8001c9c:	0005      	movs	r5, r0
 8001c9e:	4325      	orrs	r5, r4
 8001ca0:	d126      	bne.n	8001cf0 <__aeabi_dmul+0x36c>
 8001ca2:	2208      	movs	r2, #8
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	2400      	movs	r4, #0
 8001caa:	4691      	mov	r9, r2
 8001cac:	469b      	mov	fp, r3
 8001cae:	e68d      	b.n	80019cc <__aeabi_dmul+0x48>
 8001cb0:	4652      	mov	r2, sl
 8001cb2:	9b00      	ldr	r3, [sp, #0]
 8001cb4:	4332      	orrs	r2, r6
 8001cb6:	d110      	bne.n	8001cda <__aeabi_dmul+0x356>
 8001cb8:	4915      	ldr	r1, [pc, #84]	; (8001d10 <__aeabi_dmul+0x38c>)
 8001cba:	2600      	movs	r6, #0
 8001cbc:	468c      	mov	ip, r1
 8001cbe:	4463      	add	r3, ip
 8001cc0:	4649      	mov	r1, r9
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	4319      	orrs	r1, r3
 8001cc8:	4689      	mov	r9, r1
 8001cca:	2002      	movs	r0, #2
 8001ccc:	e69d      	b.n	8001a0a <__aeabi_dmul+0x86>
 8001cce:	465b      	mov	r3, fp
 8001cd0:	9701      	str	r7, [sp, #4]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d000      	beq.n	8001cd8 <__aeabi_dmul+0x354>
 8001cd6:	e6ad      	b.n	8001a34 <__aeabi_dmul+0xb0>
 8001cd8:	e6c3      	b.n	8001a62 <__aeabi_dmul+0xde>
 8001cda:	4a0d      	ldr	r2, [pc, #52]	; (8001d10 <__aeabi_dmul+0x38c>)
 8001cdc:	2003      	movs	r0, #3
 8001cde:	4694      	mov	ip, r2
 8001ce0:	4463      	add	r3, ip
 8001ce2:	464a      	mov	r2, r9
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	4691      	mov	r9, r2
 8001cec:	4652      	mov	r2, sl
 8001cee:	e68c      	b.n	8001a0a <__aeabi_dmul+0x86>
 8001cf0:	220c      	movs	r2, #12
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	0005      	movs	r5, r0
 8001cf8:	4691      	mov	r9, r2
 8001cfa:	469b      	mov	fp, r3
 8001cfc:	e666      	b.n	80019cc <__aeabi_dmul+0x48>
 8001cfe:	2304      	movs	r3, #4
 8001d00:	4699      	mov	r9, r3
 8001d02:	2300      	movs	r3, #0
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	3301      	adds	r3, #1
 8001d08:	2400      	movs	r4, #0
 8001d0a:	469b      	mov	fp, r3
 8001d0c:	e65e      	b.n	80019cc <__aeabi_dmul+0x48>
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	000007ff 	.word	0x000007ff
 8001d14:	fffffc01 	.word	0xfffffc01
 8001d18:	080073f4 	.word	0x080073f4
 8001d1c:	000003ff 	.word	0x000003ff
 8001d20:	feffffff 	.word	0xfeffffff
 8001d24:	000007fe 	.word	0x000007fe
 8001d28:	fffffc0d 	.word	0xfffffc0d
 8001d2c:	4649      	mov	r1, r9
 8001d2e:	2301      	movs	r3, #1
 8001d30:	4319      	orrs	r1, r3
 8001d32:	4689      	mov	r9, r1
 8001d34:	2600      	movs	r6, #0
 8001d36:	2001      	movs	r0, #1
 8001d38:	e667      	b.n	8001a0a <__aeabi_dmul+0x86>
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	2480      	movs	r4, #128	; 0x80
 8001d3e:	2500      	movs	r5, #0
 8001d40:	4a43      	ldr	r2, [pc, #268]	; (8001e50 <__aeabi_dmul+0x4cc>)
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	0324      	lsls	r4, r4, #12
 8001d46:	e67e      	b.n	8001a46 <__aeabi_dmul+0xc2>
 8001d48:	2001      	movs	r0, #1
 8001d4a:	1a40      	subs	r0, r0, r1
 8001d4c:	2838      	cmp	r0, #56	; 0x38
 8001d4e:	dd00      	ble.n	8001d52 <__aeabi_dmul+0x3ce>
 8001d50:	e676      	b.n	8001a40 <__aeabi_dmul+0xbc>
 8001d52:	281f      	cmp	r0, #31
 8001d54:	dd5b      	ble.n	8001e0e <__aeabi_dmul+0x48a>
 8001d56:	221f      	movs	r2, #31
 8001d58:	0023      	movs	r3, r4
 8001d5a:	4252      	negs	r2, r2
 8001d5c:	1a51      	subs	r1, r2, r1
 8001d5e:	40cb      	lsrs	r3, r1
 8001d60:	0019      	movs	r1, r3
 8001d62:	2820      	cmp	r0, #32
 8001d64:	d003      	beq.n	8001d6e <__aeabi_dmul+0x3ea>
 8001d66:	4a3b      	ldr	r2, [pc, #236]	; (8001e54 <__aeabi_dmul+0x4d0>)
 8001d68:	4462      	add	r2, ip
 8001d6a:	4094      	lsls	r4, r2
 8001d6c:	4325      	orrs	r5, r4
 8001d6e:	1e6a      	subs	r2, r5, #1
 8001d70:	4195      	sbcs	r5, r2
 8001d72:	002a      	movs	r2, r5
 8001d74:	430a      	orrs	r2, r1
 8001d76:	2107      	movs	r1, #7
 8001d78:	000d      	movs	r5, r1
 8001d7a:	2400      	movs	r4, #0
 8001d7c:	4015      	ands	r5, r2
 8001d7e:	4211      	tst	r1, r2
 8001d80:	d05b      	beq.n	8001e3a <__aeabi_dmul+0x4b6>
 8001d82:	210f      	movs	r1, #15
 8001d84:	2400      	movs	r4, #0
 8001d86:	4011      	ands	r1, r2
 8001d88:	2904      	cmp	r1, #4
 8001d8a:	d053      	beq.n	8001e34 <__aeabi_dmul+0x4b0>
 8001d8c:	1d11      	adds	r1, r2, #4
 8001d8e:	4291      	cmp	r1, r2
 8001d90:	4192      	sbcs	r2, r2
 8001d92:	4252      	negs	r2, r2
 8001d94:	18a4      	adds	r4, r4, r2
 8001d96:	000a      	movs	r2, r1
 8001d98:	0223      	lsls	r3, r4, #8
 8001d9a:	d54b      	bpl.n	8001e34 <__aeabi_dmul+0x4b0>
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	2400      	movs	r4, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	e650      	b.n	8001a46 <__aeabi_dmul+0xc2>
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	031b      	lsls	r3, r3, #12
 8001da8:	421c      	tst	r4, r3
 8001daa:	d009      	beq.n	8001dc0 <__aeabi_dmul+0x43c>
 8001dac:	421e      	tst	r6, r3
 8001dae:	d107      	bne.n	8001dc0 <__aeabi_dmul+0x43c>
 8001db0:	4333      	orrs	r3, r6
 8001db2:	031c      	lsls	r4, r3, #12
 8001db4:	4643      	mov	r3, r8
 8001db6:	0015      	movs	r5, r2
 8001db8:	0b24      	lsrs	r4, r4, #12
 8001dba:	4a25      	ldr	r2, [pc, #148]	; (8001e50 <__aeabi_dmul+0x4cc>)
 8001dbc:	9301      	str	r3, [sp, #4]
 8001dbe:	e642      	b.n	8001a46 <__aeabi_dmul+0xc2>
 8001dc0:	2280      	movs	r2, #128	; 0x80
 8001dc2:	0312      	lsls	r2, r2, #12
 8001dc4:	4314      	orrs	r4, r2
 8001dc6:	0324      	lsls	r4, r4, #12
 8001dc8:	4a21      	ldr	r2, [pc, #132]	; (8001e50 <__aeabi_dmul+0x4cc>)
 8001dca:	0b24      	lsrs	r4, r4, #12
 8001dcc:	9701      	str	r7, [sp, #4]
 8001dce:	e63a      	b.n	8001a46 <__aeabi_dmul+0xc2>
 8001dd0:	f000 fca0 	bl	8002714 <__clzsi2>
 8001dd4:	0001      	movs	r1, r0
 8001dd6:	0002      	movs	r2, r0
 8001dd8:	3115      	adds	r1, #21
 8001dda:	3220      	adds	r2, #32
 8001ddc:	291c      	cmp	r1, #28
 8001dde:	dc00      	bgt.n	8001de2 <__aeabi_dmul+0x45e>
 8001de0:	e74b      	b.n	8001c7a <__aeabi_dmul+0x2f6>
 8001de2:	0034      	movs	r4, r6
 8001de4:	3808      	subs	r0, #8
 8001de6:	2500      	movs	r5, #0
 8001de8:	4084      	lsls	r4, r0
 8001dea:	e750      	b.n	8001c8e <__aeabi_dmul+0x30a>
 8001dec:	f000 fc92 	bl	8002714 <__clzsi2>
 8001df0:	0003      	movs	r3, r0
 8001df2:	001a      	movs	r2, r3
 8001df4:	3215      	adds	r2, #21
 8001df6:	3020      	adds	r0, #32
 8001df8:	2a1c      	cmp	r2, #28
 8001dfa:	dc00      	bgt.n	8001dfe <__aeabi_dmul+0x47a>
 8001dfc:	e71e      	b.n	8001c3c <__aeabi_dmul+0x2b8>
 8001dfe:	4656      	mov	r6, sl
 8001e00:	3b08      	subs	r3, #8
 8001e02:	2200      	movs	r2, #0
 8001e04:	409e      	lsls	r6, r3
 8001e06:	e723      	b.n	8001c50 <__aeabi_dmul+0x2cc>
 8001e08:	9b00      	ldr	r3, [sp, #0]
 8001e0a:	469c      	mov	ip, r3
 8001e0c:	e6e6      	b.n	8001bdc <__aeabi_dmul+0x258>
 8001e0e:	4912      	ldr	r1, [pc, #72]	; (8001e58 <__aeabi_dmul+0x4d4>)
 8001e10:	0022      	movs	r2, r4
 8001e12:	4461      	add	r1, ip
 8001e14:	002e      	movs	r6, r5
 8001e16:	408d      	lsls	r5, r1
 8001e18:	408a      	lsls	r2, r1
 8001e1a:	40c6      	lsrs	r6, r0
 8001e1c:	1e69      	subs	r1, r5, #1
 8001e1e:	418d      	sbcs	r5, r1
 8001e20:	4332      	orrs	r2, r6
 8001e22:	432a      	orrs	r2, r5
 8001e24:	40c4      	lsrs	r4, r0
 8001e26:	0753      	lsls	r3, r2, #29
 8001e28:	d0b6      	beq.n	8001d98 <__aeabi_dmul+0x414>
 8001e2a:	210f      	movs	r1, #15
 8001e2c:	4011      	ands	r1, r2
 8001e2e:	2904      	cmp	r1, #4
 8001e30:	d1ac      	bne.n	8001d8c <__aeabi_dmul+0x408>
 8001e32:	e7b1      	b.n	8001d98 <__aeabi_dmul+0x414>
 8001e34:	0765      	lsls	r5, r4, #29
 8001e36:	0264      	lsls	r4, r4, #9
 8001e38:	0b24      	lsrs	r4, r4, #12
 8001e3a:	08d2      	lsrs	r2, r2, #3
 8001e3c:	4315      	orrs	r5, r2
 8001e3e:	2200      	movs	r2, #0
 8001e40:	e601      	b.n	8001a46 <__aeabi_dmul+0xc2>
 8001e42:	2280      	movs	r2, #128	; 0x80
 8001e44:	0312      	lsls	r2, r2, #12
 8001e46:	4314      	orrs	r4, r2
 8001e48:	0324      	lsls	r4, r4, #12
 8001e4a:	4a01      	ldr	r2, [pc, #4]	; (8001e50 <__aeabi_dmul+0x4cc>)
 8001e4c:	0b24      	lsrs	r4, r4, #12
 8001e4e:	e5fa      	b.n	8001a46 <__aeabi_dmul+0xc2>
 8001e50:	000007ff 	.word	0x000007ff
 8001e54:	0000043e 	.word	0x0000043e
 8001e58:	0000041e 	.word	0x0000041e

08001e5c <__aeabi_dsub>:
 8001e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e5e:	4657      	mov	r7, sl
 8001e60:	464e      	mov	r6, r9
 8001e62:	4645      	mov	r5, r8
 8001e64:	46de      	mov	lr, fp
 8001e66:	b5e0      	push	{r5, r6, r7, lr}
 8001e68:	001e      	movs	r6, r3
 8001e6a:	0017      	movs	r7, r2
 8001e6c:	004a      	lsls	r2, r1, #1
 8001e6e:	030b      	lsls	r3, r1, #12
 8001e70:	0d52      	lsrs	r2, r2, #21
 8001e72:	0a5b      	lsrs	r3, r3, #9
 8001e74:	4690      	mov	r8, r2
 8001e76:	0f42      	lsrs	r2, r0, #29
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	0fcd      	lsrs	r5, r1, #31
 8001e7c:	4ccd      	ldr	r4, [pc, #820]	; (80021b4 <__aeabi_dsub+0x358>)
 8001e7e:	0331      	lsls	r1, r6, #12
 8001e80:	00c3      	lsls	r3, r0, #3
 8001e82:	4694      	mov	ip, r2
 8001e84:	0070      	lsls	r0, r6, #1
 8001e86:	0f7a      	lsrs	r2, r7, #29
 8001e88:	0a49      	lsrs	r1, r1, #9
 8001e8a:	00ff      	lsls	r7, r7, #3
 8001e8c:	469a      	mov	sl, r3
 8001e8e:	46b9      	mov	r9, r7
 8001e90:	0d40      	lsrs	r0, r0, #21
 8001e92:	0ff6      	lsrs	r6, r6, #31
 8001e94:	4311      	orrs	r1, r2
 8001e96:	42a0      	cmp	r0, r4
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x40>
 8001e9a:	e0b1      	b.n	8002000 <__aeabi_dsub+0x1a4>
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	4056      	eors	r6, r2
 8001ea0:	46b3      	mov	fp, r6
 8001ea2:	42b5      	cmp	r5, r6
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x4c>
 8001ea6:	e088      	b.n	8001fba <__aeabi_dsub+0x15e>
 8001ea8:	4642      	mov	r2, r8
 8001eaa:	1a12      	subs	r2, r2, r0
 8001eac:	2a00      	cmp	r2, #0
 8001eae:	dc00      	bgt.n	8001eb2 <__aeabi_dsub+0x56>
 8001eb0:	e0ae      	b.n	8002010 <__aeabi_dsub+0x1b4>
 8001eb2:	2800      	cmp	r0, #0
 8001eb4:	d100      	bne.n	8001eb8 <__aeabi_dsub+0x5c>
 8001eb6:	e0c1      	b.n	800203c <__aeabi_dsub+0x1e0>
 8001eb8:	48be      	ldr	r0, [pc, #760]	; (80021b4 <__aeabi_dsub+0x358>)
 8001eba:	4580      	cmp	r8, r0
 8001ebc:	d100      	bne.n	8001ec0 <__aeabi_dsub+0x64>
 8001ebe:	e151      	b.n	8002164 <__aeabi_dsub+0x308>
 8001ec0:	2080      	movs	r0, #128	; 0x80
 8001ec2:	0400      	lsls	r0, r0, #16
 8001ec4:	4301      	orrs	r1, r0
 8001ec6:	2a38      	cmp	r2, #56	; 0x38
 8001ec8:	dd00      	ble.n	8001ecc <__aeabi_dsub+0x70>
 8001eca:	e17b      	b.n	80021c4 <__aeabi_dsub+0x368>
 8001ecc:	2a1f      	cmp	r2, #31
 8001ece:	dd00      	ble.n	8001ed2 <__aeabi_dsub+0x76>
 8001ed0:	e1ee      	b.n	80022b0 <__aeabi_dsub+0x454>
 8001ed2:	2020      	movs	r0, #32
 8001ed4:	003e      	movs	r6, r7
 8001ed6:	1a80      	subs	r0, r0, r2
 8001ed8:	000c      	movs	r4, r1
 8001eda:	40d6      	lsrs	r6, r2
 8001edc:	40d1      	lsrs	r1, r2
 8001ede:	4087      	lsls	r7, r0
 8001ee0:	4662      	mov	r2, ip
 8001ee2:	4084      	lsls	r4, r0
 8001ee4:	1a52      	subs	r2, r2, r1
 8001ee6:	1e78      	subs	r0, r7, #1
 8001ee8:	4187      	sbcs	r7, r0
 8001eea:	4694      	mov	ip, r2
 8001eec:	4334      	orrs	r4, r6
 8001eee:	4327      	orrs	r7, r4
 8001ef0:	1bdc      	subs	r4, r3, r7
 8001ef2:	42a3      	cmp	r3, r4
 8001ef4:	419b      	sbcs	r3, r3
 8001ef6:	4662      	mov	r2, ip
 8001ef8:	425b      	negs	r3, r3
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	4699      	mov	r9, r3
 8001efe:	464b      	mov	r3, r9
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	d400      	bmi.n	8001f06 <__aeabi_dsub+0xaa>
 8001f04:	e118      	b.n	8002138 <__aeabi_dsub+0x2dc>
 8001f06:	464b      	mov	r3, r9
 8001f08:	0258      	lsls	r0, r3, #9
 8001f0a:	0a43      	lsrs	r3, r0, #9
 8001f0c:	4699      	mov	r9, r3
 8001f0e:	464b      	mov	r3, r9
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d100      	bne.n	8001f16 <__aeabi_dsub+0xba>
 8001f14:	e137      	b.n	8002186 <__aeabi_dsub+0x32a>
 8001f16:	4648      	mov	r0, r9
 8001f18:	f000 fbfc 	bl	8002714 <__clzsi2>
 8001f1c:	0001      	movs	r1, r0
 8001f1e:	3908      	subs	r1, #8
 8001f20:	2320      	movs	r3, #32
 8001f22:	0022      	movs	r2, r4
 8001f24:	4648      	mov	r0, r9
 8001f26:	1a5b      	subs	r3, r3, r1
 8001f28:	40da      	lsrs	r2, r3
 8001f2a:	4088      	lsls	r0, r1
 8001f2c:	408c      	lsls	r4, r1
 8001f2e:	4643      	mov	r3, r8
 8001f30:	4310      	orrs	r0, r2
 8001f32:	4588      	cmp	r8, r1
 8001f34:	dd00      	ble.n	8001f38 <__aeabi_dsub+0xdc>
 8001f36:	e136      	b.n	80021a6 <__aeabi_dsub+0x34a>
 8001f38:	1ac9      	subs	r1, r1, r3
 8001f3a:	1c4b      	adds	r3, r1, #1
 8001f3c:	2b1f      	cmp	r3, #31
 8001f3e:	dd00      	ble.n	8001f42 <__aeabi_dsub+0xe6>
 8001f40:	e0ea      	b.n	8002118 <__aeabi_dsub+0x2bc>
 8001f42:	2220      	movs	r2, #32
 8001f44:	0026      	movs	r6, r4
 8001f46:	1ad2      	subs	r2, r2, r3
 8001f48:	0001      	movs	r1, r0
 8001f4a:	4094      	lsls	r4, r2
 8001f4c:	40de      	lsrs	r6, r3
 8001f4e:	40d8      	lsrs	r0, r3
 8001f50:	2300      	movs	r3, #0
 8001f52:	4091      	lsls	r1, r2
 8001f54:	1e62      	subs	r2, r4, #1
 8001f56:	4194      	sbcs	r4, r2
 8001f58:	4681      	mov	r9, r0
 8001f5a:	4698      	mov	r8, r3
 8001f5c:	4331      	orrs	r1, r6
 8001f5e:	430c      	orrs	r4, r1
 8001f60:	0763      	lsls	r3, r4, #29
 8001f62:	d009      	beq.n	8001f78 <__aeabi_dsub+0x11c>
 8001f64:	230f      	movs	r3, #15
 8001f66:	4023      	ands	r3, r4
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d005      	beq.n	8001f78 <__aeabi_dsub+0x11c>
 8001f6c:	1d23      	adds	r3, r4, #4
 8001f6e:	42a3      	cmp	r3, r4
 8001f70:	41a4      	sbcs	r4, r4
 8001f72:	4264      	negs	r4, r4
 8001f74:	44a1      	add	r9, r4
 8001f76:	001c      	movs	r4, r3
 8001f78:	464b      	mov	r3, r9
 8001f7a:	021b      	lsls	r3, r3, #8
 8001f7c:	d400      	bmi.n	8001f80 <__aeabi_dsub+0x124>
 8001f7e:	e0de      	b.n	800213e <__aeabi_dsub+0x2e2>
 8001f80:	4641      	mov	r1, r8
 8001f82:	4b8c      	ldr	r3, [pc, #560]	; (80021b4 <__aeabi_dsub+0x358>)
 8001f84:	3101      	adds	r1, #1
 8001f86:	4299      	cmp	r1, r3
 8001f88:	d100      	bne.n	8001f8c <__aeabi_dsub+0x130>
 8001f8a:	e0e7      	b.n	800215c <__aeabi_dsub+0x300>
 8001f8c:	464b      	mov	r3, r9
 8001f8e:	488a      	ldr	r0, [pc, #552]	; (80021b8 <__aeabi_dsub+0x35c>)
 8001f90:	08e4      	lsrs	r4, r4, #3
 8001f92:	4003      	ands	r3, r0
 8001f94:	0018      	movs	r0, r3
 8001f96:	0549      	lsls	r1, r1, #21
 8001f98:	075b      	lsls	r3, r3, #29
 8001f9a:	0240      	lsls	r0, r0, #9
 8001f9c:	4323      	orrs	r3, r4
 8001f9e:	0d4a      	lsrs	r2, r1, #21
 8001fa0:	0b04      	lsrs	r4, r0, #12
 8001fa2:	0512      	lsls	r2, r2, #20
 8001fa4:	07ed      	lsls	r5, r5, #31
 8001fa6:	4322      	orrs	r2, r4
 8001fa8:	432a      	orrs	r2, r5
 8001faa:	0018      	movs	r0, r3
 8001fac:	0011      	movs	r1, r2
 8001fae:	bcf0      	pop	{r4, r5, r6, r7}
 8001fb0:	46bb      	mov	fp, r7
 8001fb2:	46b2      	mov	sl, r6
 8001fb4:	46a9      	mov	r9, r5
 8001fb6:	46a0      	mov	r8, r4
 8001fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fba:	4642      	mov	r2, r8
 8001fbc:	1a12      	subs	r2, r2, r0
 8001fbe:	2a00      	cmp	r2, #0
 8001fc0:	dd52      	ble.n	8002068 <__aeabi_dsub+0x20c>
 8001fc2:	2800      	cmp	r0, #0
 8001fc4:	d100      	bne.n	8001fc8 <__aeabi_dsub+0x16c>
 8001fc6:	e09c      	b.n	8002102 <__aeabi_dsub+0x2a6>
 8001fc8:	45a0      	cmp	r8, r4
 8001fca:	d100      	bne.n	8001fce <__aeabi_dsub+0x172>
 8001fcc:	e0ca      	b.n	8002164 <__aeabi_dsub+0x308>
 8001fce:	2080      	movs	r0, #128	; 0x80
 8001fd0:	0400      	lsls	r0, r0, #16
 8001fd2:	4301      	orrs	r1, r0
 8001fd4:	2a38      	cmp	r2, #56	; 0x38
 8001fd6:	dd00      	ble.n	8001fda <__aeabi_dsub+0x17e>
 8001fd8:	e149      	b.n	800226e <__aeabi_dsub+0x412>
 8001fda:	2a1f      	cmp	r2, #31
 8001fdc:	dc00      	bgt.n	8001fe0 <__aeabi_dsub+0x184>
 8001fde:	e197      	b.n	8002310 <__aeabi_dsub+0x4b4>
 8001fe0:	0010      	movs	r0, r2
 8001fe2:	000e      	movs	r6, r1
 8001fe4:	3820      	subs	r0, #32
 8001fe6:	40c6      	lsrs	r6, r0
 8001fe8:	2a20      	cmp	r2, #32
 8001fea:	d004      	beq.n	8001ff6 <__aeabi_dsub+0x19a>
 8001fec:	2040      	movs	r0, #64	; 0x40
 8001fee:	1a82      	subs	r2, r0, r2
 8001ff0:	4091      	lsls	r1, r2
 8001ff2:	430f      	orrs	r7, r1
 8001ff4:	46b9      	mov	r9, r7
 8001ff6:	464c      	mov	r4, r9
 8001ff8:	1e62      	subs	r2, r4, #1
 8001ffa:	4194      	sbcs	r4, r2
 8001ffc:	4334      	orrs	r4, r6
 8001ffe:	e13a      	b.n	8002276 <__aeabi_dsub+0x41a>
 8002000:	000a      	movs	r2, r1
 8002002:	433a      	orrs	r2, r7
 8002004:	d028      	beq.n	8002058 <__aeabi_dsub+0x1fc>
 8002006:	46b3      	mov	fp, r6
 8002008:	42b5      	cmp	r5, r6
 800200a:	d02b      	beq.n	8002064 <__aeabi_dsub+0x208>
 800200c:	4a6b      	ldr	r2, [pc, #428]	; (80021bc <__aeabi_dsub+0x360>)
 800200e:	4442      	add	r2, r8
 8002010:	2a00      	cmp	r2, #0
 8002012:	d05d      	beq.n	80020d0 <__aeabi_dsub+0x274>
 8002014:	4642      	mov	r2, r8
 8002016:	4644      	mov	r4, r8
 8002018:	1a82      	subs	r2, r0, r2
 800201a:	2c00      	cmp	r4, #0
 800201c:	d000      	beq.n	8002020 <__aeabi_dsub+0x1c4>
 800201e:	e0f5      	b.n	800220c <__aeabi_dsub+0x3b0>
 8002020:	4665      	mov	r5, ip
 8002022:	431d      	orrs	r5, r3
 8002024:	d100      	bne.n	8002028 <__aeabi_dsub+0x1cc>
 8002026:	e19c      	b.n	8002362 <__aeabi_dsub+0x506>
 8002028:	1e55      	subs	r5, r2, #1
 800202a:	2a01      	cmp	r2, #1
 800202c:	d100      	bne.n	8002030 <__aeabi_dsub+0x1d4>
 800202e:	e1fb      	b.n	8002428 <__aeabi_dsub+0x5cc>
 8002030:	4c60      	ldr	r4, [pc, #384]	; (80021b4 <__aeabi_dsub+0x358>)
 8002032:	42a2      	cmp	r2, r4
 8002034:	d100      	bne.n	8002038 <__aeabi_dsub+0x1dc>
 8002036:	e1bd      	b.n	80023b4 <__aeabi_dsub+0x558>
 8002038:	002a      	movs	r2, r5
 800203a:	e0f0      	b.n	800221e <__aeabi_dsub+0x3c2>
 800203c:	0008      	movs	r0, r1
 800203e:	4338      	orrs	r0, r7
 8002040:	d100      	bne.n	8002044 <__aeabi_dsub+0x1e8>
 8002042:	e0c3      	b.n	80021cc <__aeabi_dsub+0x370>
 8002044:	1e50      	subs	r0, r2, #1
 8002046:	2a01      	cmp	r2, #1
 8002048:	d100      	bne.n	800204c <__aeabi_dsub+0x1f0>
 800204a:	e1a8      	b.n	800239e <__aeabi_dsub+0x542>
 800204c:	4c59      	ldr	r4, [pc, #356]	; (80021b4 <__aeabi_dsub+0x358>)
 800204e:	42a2      	cmp	r2, r4
 8002050:	d100      	bne.n	8002054 <__aeabi_dsub+0x1f8>
 8002052:	e087      	b.n	8002164 <__aeabi_dsub+0x308>
 8002054:	0002      	movs	r2, r0
 8002056:	e736      	b.n	8001ec6 <__aeabi_dsub+0x6a>
 8002058:	2201      	movs	r2, #1
 800205a:	4056      	eors	r6, r2
 800205c:	46b3      	mov	fp, r6
 800205e:	42b5      	cmp	r5, r6
 8002060:	d000      	beq.n	8002064 <__aeabi_dsub+0x208>
 8002062:	e721      	b.n	8001ea8 <__aeabi_dsub+0x4c>
 8002064:	4a55      	ldr	r2, [pc, #340]	; (80021bc <__aeabi_dsub+0x360>)
 8002066:	4442      	add	r2, r8
 8002068:	2a00      	cmp	r2, #0
 800206a:	d100      	bne.n	800206e <__aeabi_dsub+0x212>
 800206c:	e0b5      	b.n	80021da <__aeabi_dsub+0x37e>
 800206e:	4642      	mov	r2, r8
 8002070:	4644      	mov	r4, r8
 8002072:	1a82      	subs	r2, r0, r2
 8002074:	2c00      	cmp	r4, #0
 8002076:	d100      	bne.n	800207a <__aeabi_dsub+0x21e>
 8002078:	e138      	b.n	80022ec <__aeabi_dsub+0x490>
 800207a:	4e4e      	ldr	r6, [pc, #312]	; (80021b4 <__aeabi_dsub+0x358>)
 800207c:	42b0      	cmp	r0, r6
 800207e:	d100      	bne.n	8002082 <__aeabi_dsub+0x226>
 8002080:	e1de      	b.n	8002440 <__aeabi_dsub+0x5e4>
 8002082:	2680      	movs	r6, #128	; 0x80
 8002084:	4664      	mov	r4, ip
 8002086:	0436      	lsls	r6, r6, #16
 8002088:	4334      	orrs	r4, r6
 800208a:	46a4      	mov	ip, r4
 800208c:	2a38      	cmp	r2, #56	; 0x38
 800208e:	dd00      	ble.n	8002092 <__aeabi_dsub+0x236>
 8002090:	e196      	b.n	80023c0 <__aeabi_dsub+0x564>
 8002092:	2a1f      	cmp	r2, #31
 8002094:	dd00      	ble.n	8002098 <__aeabi_dsub+0x23c>
 8002096:	e224      	b.n	80024e2 <__aeabi_dsub+0x686>
 8002098:	2620      	movs	r6, #32
 800209a:	1ab4      	subs	r4, r6, r2
 800209c:	46a2      	mov	sl, r4
 800209e:	4664      	mov	r4, ip
 80020a0:	4656      	mov	r6, sl
 80020a2:	40b4      	lsls	r4, r6
 80020a4:	46a1      	mov	r9, r4
 80020a6:	001c      	movs	r4, r3
 80020a8:	464e      	mov	r6, r9
 80020aa:	40d4      	lsrs	r4, r2
 80020ac:	4326      	orrs	r6, r4
 80020ae:	0034      	movs	r4, r6
 80020b0:	4656      	mov	r6, sl
 80020b2:	40b3      	lsls	r3, r6
 80020b4:	1e5e      	subs	r6, r3, #1
 80020b6:	41b3      	sbcs	r3, r6
 80020b8:	431c      	orrs	r4, r3
 80020ba:	4663      	mov	r3, ip
 80020bc:	40d3      	lsrs	r3, r2
 80020be:	18c9      	adds	r1, r1, r3
 80020c0:	19e4      	adds	r4, r4, r7
 80020c2:	42bc      	cmp	r4, r7
 80020c4:	41bf      	sbcs	r7, r7
 80020c6:	427f      	negs	r7, r7
 80020c8:	46b9      	mov	r9, r7
 80020ca:	4680      	mov	r8, r0
 80020cc:	4489      	add	r9, r1
 80020ce:	e0d8      	b.n	8002282 <__aeabi_dsub+0x426>
 80020d0:	4640      	mov	r0, r8
 80020d2:	4c3b      	ldr	r4, [pc, #236]	; (80021c0 <__aeabi_dsub+0x364>)
 80020d4:	3001      	adds	r0, #1
 80020d6:	4220      	tst	r0, r4
 80020d8:	d000      	beq.n	80020dc <__aeabi_dsub+0x280>
 80020da:	e0b4      	b.n	8002246 <__aeabi_dsub+0x3ea>
 80020dc:	4640      	mov	r0, r8
 80020de:	2800      	cmp	r0, #0
 80020e0:	d000      	beq.n	80020e4 <__aeabi_dsub+0x288>
 80020e2:	e144      	b.n	800236e <__aeabi_dsub+0x512>
 80020e4:	4660      	mov	r0, ip
 80020e6:	4318      	orrs	r0, r3
 80020e8:	d100      	bne.n	80020ec <__aeabi_dsub+0x290>
 80020ea:	e190      	b.n	800240e <__aeabi_dsub+0x5b2>
 80020ec:	0008      	movs	r0, r1
 80020ee:	4338      	orrs	r0, r7
 80020f0:	d000      	beq.n	80020f4 <__aeabi_dsub+0x298>
 80020f2:	e1aa      	b.n	800244a <__aeabi_dsub+0x5ee>
 80020f4:	4661      	mov	r1, ip
 80020f6:	08db      	lsrs	r3, r3, #3
 80020f8:	0749      	lsls	r1, r1, #29
 80020fa:	430b      	orrs	r3, r1
 80020fc:	4661      	mov	r1, ip
 80020fe:	08cc      	lsrs	r4, r1, #3
 8002100:	e027      	b.n	8002152 <__aeabi_dsub+0x2f6>
 8002102:	0008      	movs	r0, r1
 8002104:	4338      	orrs	r0, r7
 8002106:	d061      	beq.n	80021cc <__aeabi_dsub+0x370>
 8002108:	1e50      	subs	r0, r2, #1
 800210a:	2a01      	cmp	r2, #1
 800210c:	d100      	bne.n	8002110 <__aeabi_dsub+0x2b4>
 800210e:	e139      	b.n	8002384 <__aeabi_dsub+0x528>
 8002110:	42a2      	cmp	r2, r4
 8002112:	d027      	beq.n	8002164 <__aeabi_dsub+0x308>
 8002114:	0002      	movs	r2, r0
 8002116:	e75d      	b.n	8001fd4 <__aeabi_dsub+0x178>
 8002118:	0002      	movs	r2, r0
 800211a:	391f      	subs	r1, #31
 800211c:	40ca      	lsrs	r2, r1
 800211e:	0011      	movs	r1, r2
 8002120:	2b20      	cmp	r3, #32
 8002122:	d003      	beq.n	800212c <__aeabi_dsub+0x2d0>
 8002124:	2240      	movs	r2, #64	; 0x40
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	4098      	lsls	r0, r3
 800212a:	4304      	orrs	r4, r0
 800212c:	1e63      	subs	r3, r4, #1
 800212e:	419c      	sbcs	r4, r3
 8002130:	2300      	movs	r3, #0
 8002132:	4699      	mov	r9, r3
 8002134:	4698      	mov	r8, r3
 8002136:	430c      	orrs	r4, r1
 8002138:	0763      	lsls	r3, r4, #29
 800213a:	d000      	beq.n	800213e <__aeabi_dsub+0x2e2>
 800213c:	e712      	b.n	8001f64 <__aeabi_dsub+0x108>
 800213e:	464b      	mov	r3, r9
 8002140:	464a      	mov	r2, r9
 8002142:	08e4      	lsrs	r4, r4, #3
 8002144:	075b      	lsls	r3, r3, #29
 8002146:	4323      	orrs	r3, r4
 8002148:	08d4      	lsrs	r4, r2, #3
 800214a:	4642      	mov	r2, r8
 800214c:	4919      	ldr	r1, [pc, #100]	; (80021b4 <__aeabi_dsub+0x358>)
 800214e:	428a      	cmp	r2, r1
 8002150:	d00e      	beq.n	8002170 <__aeabi_dsub+0x314>
 8002152:	0324      	lsls	r4, r4, #12
 8002154:	0552      	lsls	r2, r2, #21
 8002156:	0b24      	lsrs	r4, r4, #12
 8002158:	0d52      	lsrs	r2, r2, #21
 800215a:	e722      	b.n	8001fa2 <__aeabi_dsub+0x146>
 800215c:	000a      	movs	r2, r1
 800215e:	2400      	movs	r4, #0
 8002160:	2300      	movs	r3, #0
 8002162:	e71e      	b.n	8001fa2 <__aeabi_dsub+0x146>
 8002164:	08db      	lsrs	r3, r3, #3
 8002166:	4662      	mov	r2, ip
 8002168:	0752      	lsls	r2, r2, #29
 800216a:	4313      	orrs	r3, r2
 800216c:	4662      	mov	r2, ip
 800216e:	08d4      	lsrs	r4, r2, #3
 8002170:	001a      	movs	r2, r3
 8002172:	4322      	orrs	r2, r4
 8002174:	d100      	bne.n	8002178 <__aeabi_dsub+0x31c>
 8002176:	e1fc      	b.n	8002572 <__aeabi_dsub+0x716>
 8002178:	2280      	movs	r2, #128	; 0x80
 800217a:	0312      	lsls	r2, r2, #12
 800217c:	4314      	orrs	r4, r2
 800217e:	0324      	lsls	r4, r4, #12
 8002180:	4a0c      	ldr	r2, [pc, #48]	; (80021b4 <__aeabi_dsub+0x358>)
 8002182:	0b24      	lsrs	r4, r4, #12
 8002184:	e70d      	b.n	8001fa2 <__aeabi_dsub+0x146>
 8002186:	0020      	movs	r0, r4
 8002188:	f000 fac4 	bl	8002714 <__clzsi2>
 800218c:	0001      	movs	r1, r0
 800218e:	3118      	adds	r1, #24
 8002190:	291f      	cmp	r1, #31
 8002192:	dc00      	bgt.n	8002196 <__aeabi_dsub+0x33a>
 8002194:	e6c4      	b.n	8001f20 <__aeabi_dsub+0xc4>
 8002196:	3808      	subs	r0, #8
 8002198:	4084      	lsls	r4, r0
 800219a:	4643      	mov	r3, r8
 800219c:	0020      	movs	r0, r4
 800219e:	2400      	movs	r4, #0
 80021a0:	4588      	cmp	r8, r1
 80021a2:	dc00      	bgt.n	80021a6 <__aeabi_dsub+0x34a>
 80021a4:	e6c8      	b.n	8001f38 <__aeabi_dsub+0xdc>
 80021a6:	4a04      	ldr	r2, [pc, #16]	; (80021b8 <__aeabi_dsub+0x35c>)
 80021a8:	1a5b      	subs	r3, r3, r1
 80021aa:	4010      	ands	r0, r2
 80021ac:	4698      	mov	r8, r3
 80021ae:	4681      	mov	r9, r0
 80021b0:	e6d6      	b.n	8001f60 <__aeabi_dsub+0x104>
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	000007ff 	.word	0x000007ff
 80021b8:	ff7fffff 	.word	0xff7fffff
 80021bc:	fffff801 	.word	0xfffff801
 80021c0:	000007fe 	.word	0x000007fe
 80021c4:	430f      	orrs	r7, r1
 80021c6:	1e7a      	subs	r2, r7, #1
 80021c8:	4197      	sbcs	r7, r2
 80021ca:	e691      	b.n	8001ef0 <__aeabi_dsub+0x94>
 80021cc:	4661      	mov	r1, ip
 80021ce:	08db      	lsrs	r3, r3, #3
 80021d0:	0749      	lsls	r1, r1, #29
 80021d2:	430b      	orrs	r3, r1
 80021d4:	4661      	mov	r1, ip
 80021d6:	08cc      	lsrs	r4, r1, #3
 80021d8:	e7b8      	b.n	800214c <__aeabi_dsub+0x2f0>
 80021da:	4640      	mov	r0, r8
 80021dc:	4cd3      	ldr	r4, [pc, #844]	; (800252c <__aeabi_dsub+0x6d0>)
 80021de:	3001      	adds	r0, #1
 80021e0:	4220      	tst	r0, r4
 80021e2:	d000      	beq.n	80021e6 <__aeabi_dsub+0x38a>
 80021e4:	e0a2      	b.n	800232c <__aeabi_dsub+0x4d0>
 80021e6:	4640      	mov	r0, r8
 80021e8:	2800      	cmp	r0, #0
 80021ea:	d000      	beq.n	80021ee <__aeabi_dsub+0x392>
 80021ec:	e101      	b.n	80023f2 <__aeabi_dsub+0x596>
 80021ee:	4660      	mov	r0, ip
 80021f0:	4318      	orrs	r0, r3
 80021f2:	d100      	bne.n	80021f6 <__aeabi_dsub+0x39a>
 80021f4:	e15e      	b.n	80024b4 <__aeabi_dsub+0x658>
 80021f6:	0008      	movs	r0, r1
 80021f8:	4338      	orrs	r0, r7
 80021fa:	d000      	beq.n	80021fe <__aeabi_dsub+0x3a2>
 80021fc:	e15f      	b.n	80024be <__aeabi_dsub+0x662>
 80021fe:	4661      	mov	r1, ip
 8002200:	08db      	lsrs	r3, r3, #3
 8002202:	0749      	lsls	r1, r1, #29
 8002204:	430b      	orrs	r3, r1
 8002206:	4661      	mov	r1, ip
 8002208:	08cc      	lsrs	r4, r1, #3
 800220a:	e7a2      	b.n	8002152 <__aeabi_dsub+0x2f6>
 800220c:	4dc8      	ldr	r5, [pc, #800]	; (8002530 <__aeabi_dsub+0x6d4>)
 800220e:	42a8      	cmp	r0, r5
 8002210:	d100      	bne.n	8002214 <__aeabi_dsub+0x3b8>
 8002212:	e0cf      	b.n	80023b4 <__aeabi_dsub+0x558>
 8002214:	2580      	movs	r5, #128	; 0x80
 8002216:	4664      	mov	r4, ip
 8002218:	042d      	lsls	r5, r5, #16
 800221a:	432c      	orrs	r4, r5
 800221c:	46a4      	mov	ip, r4
 800221e:	2a38      	cmp	r2, #56	; 0x38
 8002220:	dc56      	bgt.n	80022d0 <__aeabi_dsub+0x474>
 8002222:	2a1f      	cmp	r2, #31
 8002224:	dd00      	ble.n	8002228 <__aeabi_dsub+0x3cc>
 8002226:	e0d1      	b.n	80023cc <__aeabi_dsub+0x570>
 8002228:	2520      	movs	r5, #32
 800222a:	001e      	movs	r6, r3
 800222c:	1aad      	subs	r5, r5, r2
 800222e:	4664      	mov	r4, ip
 8002230:	40ab      	lsls	r3, r5
 8002232:	40ac      	lsls	r4, r5
 8002234:	40d6      	lsrs	r6, r2
 8002236:	1e5d      	subs	r5, r3, #1
 8002238:	41ab      	sbcs	r3, r5
 800223a:	4334      	orrs	r4, r6
 800223c:	4323      	orrs	r3, r4
 800223e:	4664      	mov	r4, ip
 8002240:	40d4      	lsrs	r4, r2
 8002242:	1b09      	subs	r1, r1, r4
 8002244:	e049      	b.n	80022da <__aeabi_dsub+0x47e>
 8002246:	4660      	mov	r0, ip
 8002248:	1bdc      	subs	r4, r3, r7
 800224a:	1a46      	subs	r6, r0, r1
 800224c:	42a3      	cmp	r3, r4
 800224e:	4180      	sbcs	r0, r0
 8002250:	4240      	negs	r0, r0
 8002252:	4681      	mov	r9, r0
 8002254:	0030      	movs	r0, r6
 8002256:	464e      	mov	r6, r9
 8002258:	1b80      	subs	r0, r0, r6
 800225a:	4681      	mov	r9, r0
 800225c:	0200      	lsls	r0, r0, #8
 800225e:	d476      	bmi.n	800234e <__aeabi_dsub+0x4f2>
 8002260:	464b      	mov	r3, r9
 8002262:	4323      	orrs	r3, r4
 8002264:	d000      	beq.n	8002268 <__aeabi_dsub+0x40c>
 8002266:	e652      	b.n	8001f0e <__aeabi_dsub+0xb2>
 8002268:	2400      	movs	r4, #0
 800226a:	2500      	movs	r5, #0
 800226c:	e771      	b.n	8002152 <__aeabi_dsub+0x2f6>
 800226e:	4339      	orrs	r1, r7
 8002270:	000c      	movs	r4, r1
 8002272:	1e62      	subs	r2, r4, #1
 8002274:	4194      	sbcs	r4, r2
 8002276:	18e4      	adds	r4, r4, r3
 8002278:	429c      	cmp	r4, r3
 800227a:	419b      	sbcs	r3, r3
 800227c:	425b      	negs	r3, r3
 800227e:	4463      	add	r3, ip
 8002280:	4699      	mov	r9, r3
 8002282:	464b      	mov	r3, r9
 8002284:	021b      	lsls	r3, r3, #8
 8002286:	d400      	bmi.n	800228a <__aeabi_dsub+0x42e>
 8002288:	e756      	b.n	8002138 <__aeabi_dsub+0x2dc>
 800228a:	2301      	movs	r3, #1
 800228c:	469c      	mov	ip, r3
 800228e:	4ba8      	ldr	r3, [pc, #672]	; (8002530 <__aeabi_dsub+0x6d4>)
 8002290:	44e0      	add	r8, ip
 8002292:	4598      	cmp	r8, r3
 8002294:	d038      	beq.n	8002308 <__aeabi_dsub+0x4ac>
 8002296:	464b      	mov	r3, r9
 8002298:	48a6      	ldr	r0, [pc, #664]	; (8002534 <__aeabi_dsub+0x6d8>)
 800229a:	2201      	movs	r2, #1
 800229c:	4003      	ands	r3, r0
 800229e:	0018      	movs	r0, r3
 80022a0:	0863      	lsrs	r3, r4, #1
 80022a2:	4014      	ands	r4, r2
 80022a4:	431c      	orrs	r4, r3
 80022a6:	07c3      	lsls	r3, r0, #31
 80022a8:	431c      	orrs	r4, r3
 80022aa:	0843      	lsrs	r3, r0, #1
 80022ac:	4699      	mov	r9, r3
 80022ae:	e657      	b.n	8001f60 <__aeabi_dsub+0x104>
 80022b0:	0010      	movs	r0, r2
 80022b2:	000e      	movs	r6, r1
 80022b4:	3820      	subs	r0, #32
 80022b6:	40c6      	lsrs	r6, r0
 80022b8:	2a20      	cmp	r2, #32
 80022ba:	d004      	beq.n	80022c6 <__aeabi_dsub+0x46a>
 80022bc:	2040      	movs	r0, #64	; 0x40
 80022be:	1a82      	subs	r2, r0, r2
 80022c0:	4091      	lsls	r1, r2
 80022c2:	430f      	orrs	r7, r1
 80022c4:	46b9      	mov	r9, r7
 80022c6:	464f      	mov	r7, r9
 80022c8:	1e7a      	subs	r2, r7, #1
 80022ca:	4197      	sbcs	r7, r2
 80022cc:	4337      	orrs	r7, r6
 80022ce:	e60f      	b.n	8001ef0 <__aeabi_dsub+0x94>
 80022d0:	4662      	mov	r2, ip
 80022d2:	431a      	orrs	r2, r3
 80022d4:	0013      	movs	r3, r2
 80022d6:	1e5a      	subs	r2, r3, #1
 80022d8:	4193      	sbcs	r3, r2
 80022da:	1afc      	subs	r4, r7, r3
 80022dc:	42a7      	cmp	r7, r4
 80022de:	41bf      	sbcs	r7, r7
 80022e0:	427f      	negs	r7, r7
 80022e2:	1bcb      	subs	r3, r1, r7
 80022e4:	4699      	mov	r9, r3
 80022e6:	465d      	mov	r5, fp
 80022e8:	4680      	mov	r8, r0
 80022ea:	e608      	b.n	8001efe <__aeabi_dsub+0xa2>
 80022ec:	4666      	mov	r6, ip
 80022ee:	431e      	orrs	r6, r3
 80022f0:	d100      	bne.n	80022f4 <__aeabi_dsub+0x498>
 80022f2:	e0be      	b.n	8002472 <__aeabi_dsub+0x616>
 80022f4:	1e56      	subs	r6, r2, #1
 80022f6:	2a01      	cmp	r2, #1
 80022f8:	d100      	bne.n	80022fc <__aeabi_dsub+0x4a0>
 80022fa:	e109      	b.n	8002510 <__aeabi_dsub+0x6b4>
 80022fc:	4c8c      	ldr	r4, [pc, #560]	; (8002530 <__aeabi_dsub+0x6d4>)
 80022fe:	42a2      	cmp	r2, r4
 8002300:	d100      	bne.n	8002304 <__aeabi_dsub+0x4a8>
 8002302:	e119      	b.n	8002538 <__aeabi_dsub+0x6dc>
 8002304:	0032      	movs	r2, r6
 8002306:	e6c1      	b.n	800208c <__aeabi_dsub+0x230>
 8002308:	4642      	mov	r2, r8
 800230a:	2400      	movs	r4, #0
 800230c:	2300      	movs	r3, #0
 800230e:	e648      	b.n	8001fa2 <__aeabi_dsub+0x146>
 8002310:	2020      	movs	r0, #32
 8002312:	000c      	movs	r4, r1
 8002314:	1a80      	subs	r0, r0, r2
 8002316:	003e      	movs	r6, r7
 8002318:	4087      	lsls	r7, r0
 800231a:	4084      	lsls	r4, r0
 800231c:	40d6      	lsrs	r6, r2
 800231e:	1e78      	subs	r0, r7, #1
 8002320:	4187      	sbcs	r7, r0
 8002322:	40d1      	lsrs	r1, r2
 8002324:	4334      	orrs	r4, r6
 8002326:	433c      	orrs	r4, r7
 8002328:	448c      	add	ip, r1
 800232a:	e7a4      	b.n	8002276 <__aeabi_dsub+0x41a>
 800232c:	4a80      	ldr	r2, [pc, #512]	; (8002530 <__aeabi_dsub+0x6d4>)
 800232e:	4290      	cmp	r0, r2
 8002330:	d100      	bne.n	8002334 <__aeabi_dsub+0x4d8>
 8002332:	e0e9      	b.n	8002508 <__aeabi_dsub+0x6ac>
 8002334:	19df      	adds	r7, r3, r7
 8002336:	429f      	cmp	r7, r3
 8002338:	419b      	sbcs	r3, r3
 800233a:	4461      	add	r1, ip
 800233c:	425b      	negs	r3, r3
 800233e:	18c9      	adds	r1, r1, r3
 8002340:	07cc      	lsls	r4, r1, #31
 8002342:	087f      	lsrs	r7, r7, #1
 8002344:	084b      	lsrs	r3, r1, #1
 8002346:	4699      	mov	r9, r3
 8002348:	4680      	mov	r8, r0
 800234a:	433c      	orrs	r4, r7
 800234c:	e6f4      	b.n	8002138 <__aeabi_dsub+0x2dc>
 800234e:	1afc      	subs	r4, r7, r3
 8002350:	42a7      	cmp	r7, r4
 8002352:	41bf      	sbcs	r7, r7
 8002354:	4663      	mov	r3, ip
 8002356:	427f      	negs	r7, r7
 8002358:	1ac9      	subs	r1, r1, r3
 800235a:	1bcb      	subs	r3, r1, r7
 800235c:	4699      	mov	r9, r3
 800235e:	465d      	mov	r5, fp
 8002360:	e5d5      	b.n	8001f0e <__aeabi_dsub+0xb2>
 8002362:	08ff      	lsrs	r7, r7, #3
 8002364:	074b      	lsls	r3, r1, #29
 8002366:	465d      	mov	r5, fp
 8002368:	433b      	orrs	r3, r7
 800236a:	08cc      	lsrs	r4, r1, #3
 800236c:	e6ee      	b.n	800214c <__aeabi_dsub+0x2f0>
 800236e:	4662      	mov	r2, ip
 8002370:	431a      	orrs	r2, r3
 8002372:	d000      	beq.n	8002376 <__aeabi_dsub+0x51a>
 8002374:	e082      	b.n	800247c <__aeabi_dsub+0x620>
 8002376:	000b      	movs	r3, r1
 8002378:	433b      	orrs	r3, r7
 800237a:	d11b      	bne.n	80023b4 <__aeabi_dsub+0x558>
 800237c:	2480      	movs	r4, #128	; 0x80
 800237e:	2500      	movs	r5, #0
 8002380:	0324      	lsls	r4, r4, #12
 8002382:	e6f9      	b.n	8002178 <__aeabi_dsub+0x31c>
 8002384:	19dc      	adds	r4, r3, r7
 8002386:	429c      	cmp	r4, r3
 8002388:	419b      	sbcs	r3, r3
 800238a:	4461      	add	r1, ip
 800238c:	4689      	mov	r9, r1
 800238e:	425b      	negs	r3, r3
 8002390:	4499      	add	r9, r3
 8002392:	464b      	mov	r3, r9
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	d444      	bmi.n	8002422 <__aeabi_dsub+0x5c6>
 8002398:	2301      	movs	r3, #1
 800239a:	4698      	mov	r8, r3
 800239c:	e6cc      	b.n	8002138 <__aeabi_dsub+0x2dc>
 800239e:	1bdc      	subs	r4, r3, r7
 80023a0:	4662      	mov	r2, ip
 80023a2:	42a3      	cmp	r3, r4
 80023a4:	419b      	sbcs	r3, r3
 80023a6:	1a51      	subs	r1, r2, r1
 80023a8:	425b      	negs	r3, r3
 80023aa:	1acb      	subs	r3, r1, r3
 80023ac:	4699      	mov	r9, r3
 80023ae:	2301      	movs	r3, #1
 80023b0:	4698      	mov	r8, r3
 80023b2:	e5a4      	b.n	8001efe <__aeabi_dsub+0xa2>
 80023b4:	08ff      	lsrs	r7, r7, #3
 80023b6:	074b      	lsls	r3, r1, #29
 80023b8:	465d      	mov	r5, fp
 80023ba:	433b      	orrs	r3, r7
 80023bc:	08cc      	lsrs	r4, r1, #3
 80023be:	e6d7      	b.n	8002170 <__aeabi_dsub+0x314>
 80023c0:	4662      	mov	r2, ip
 80023c2:	431a      	orrs	r2, r3
 80023c4:	0014      	movs	r4, r2
 80023c6:	1e63      	subs	r3, r4, #1
 80023c8:	419c      	sbcs	r4, r3
 80023ca:	e679      	b.n	80020c0 <__aeabi_dsub+0x264>
 80023cc:	0015      	movs	r5, r2
 80023ce:	4664      	mov	r4, ip
 80023d0:	3d20      	subs	r5, #32
 80023d2:	40ec      	lsrs	r4, r5
 80023d4:	46a0      	mov	r8, r4
 80023d6:	2a20      	cmp	r2, #32
 80023d8:	d005      	beq.n	80023e6 <__aeabi_dsub+0x58a>
 80023da:	2540      	movs	r5, #64	; 0x40
 80023dc:	4664      	mov	r4, ip
 80023de:	1aaa      	subs	r2, r5, r2
 80023e0:	4094      	lsls	r4, r2
 80023e2:	4323      	orrs	r3, r4
 80023e4:	469a      	mov	sl, r3
 80023e6:	4654      	mov	r4, sl
 80023e8:	1e63      	subs	r3, r4, #1
 80023ea:	419c      	sbcs	r4, r3
 80023ec:	4643      	mov	r3, r8
 80023ee:	4323      	orrs	r3, r4
 80023f0:	e773      	b.n	80022da <__aeabi_dsub+0x47e>
 80023f2:	4662      	mov	r2, ip
 80023f4:	431a      	orrs	r2, r3
 80023f6:	d023      	beq.n	8002440 <__aeabi_dsub+0x5e4>
 80023f8:	000a      	movs	r2, r1
 80023fa:	433a      	orrs	r2, r7
 80023fc:	d000      	beq.n	8002400 <__aeabi_dsub+0x5a4>
 80023fe:	e0a0      	b.n	8002542 <__aeabi_dsub+0x6e6>
 8002400:	4662      	mov	r2, ip
 8002402:	08db      	lsrs	r3, r3, #3
 8002404:	0752      	lsls	r2, r2, #29
 8002406:	4313      	orrs	r3, r2
 8002408:	4662      	mov	r2, ip
 800240a:	08d4      	lsrs	r4, r2, #3
 800240c:	e6b0      	b.n	8002170 <__aeabi_dsub+0x314>
 800240e:	000b      	movs	r3, r1
 8002410:	433b      	orrs	r3, r7
 8002412:	d100      	bne.n	8002416 <__aeabi_dsub+0x5ba>
 8002414:	e728      	b.n	8002268 <__aeabi_dsub+0x40c>
 8002416:	08ff      	lsrs	r7, r7, #3
 8002418:	074b      	lsls	r3, r1, #29
 800241a:	465d      	mov	r5, fp
 800241c:	433b      	orrs	r3, r7
 800241e:	08cc      	lsrs	r4, r1, #3
 8002420:	e697      	b.n	8002152 <__aeabi_dsub+0x2f6>
 8002422:	2302      	movs	r3, #2
 8002424:	4698      	mov	r8, r3
 8002426:	e736      	b.n	8002296 <__aeabi_dsub+0x43a>
 8002428:	1afc      	subs	r4, r7, r3
 800242a:	42a7      	cmp	r7, r4
 800242c:	41bf      	sbcs	r7, r7
 800242e:	4663      	mov	r3, ip
 8002430:	427f      	negs	r7, r7
 8002432:	1ac9      	subs	r1, r1, r3
 8002434:	1bcb      	subs	r3, r1, r7
 8002436:	4699      	mov	r9, r3
 8002438:	2301      	movs	r3, #1
 800243a:	465d      	mov	r5, fp
 800243c:	4698      	mov	r8, r3
 800243e:	e55e      	b.n	8001efe <__aeabi_dsub+0xa2>
 8002440:	074b      	lsls	r3, r1, #29
 8002442:	08ff      	lsrs	r7, r7, #3
 8002444:	433b      	orrs	r3, r7
 8002446:	08cc      	lsrs	r4, r1, #3
 8002448:	e692      	b.n	8002170 <__aeabi_dsub+0x314>
 800244a:	1bdc      	subs	r4, r3, r7
 800244c:	4660      	mov	r0, ip
 800244e:	42a3      	cmp	r3, r4
 8002450:	41b6      	sbcs	r6, r6
 8002452:	1a40      	subs	r0, r0, r1
 8002454:	4276      	negs	r6, r6
 8002456:	1b80      	subs	r0, r0, r6
 8002458:	4681      	mov	r9, r0
 800245a:	0200      	lsls	r0, r0, #8
 800245c:	d560      	bpl.n	8002520 <__aeabi_dsub+0x6c4>
 800245e:	1afc      	subs	r4, r7, r3
 8002460:	42a7      	cmp	r7, r4
 8002462:	41bf      	sbcs	r7, r7
 8002464:	4663      	mov	r3, ip
 8002466:	427f      	negs	r7, r7
 8002468:	1ac9      	subs	r1, r1, r3
 800246a:	1bcb      	subs	r3, r1, r7
 800246c:	4699      	mov	r9, r3
 800246e:	465d      	mov	r5, fp
 8002470:	e576      	b.n	8001f60 <__aeabi_dsub+0x104>
 8002472:	08ff      	lsrs	r7, r7, #3
 8002474:	074b      	lsls	r3, r1, #29
 8002476:	433b      	orrs	r3, r7
 8002478:	08cc      	lsrs	r4, r1, #3
 800247a:	e667      	b.n	800214c <__aeabi_dsub+0x2f0>
 800247c:	000a      	movs	r2, r1
 800247e:	08db      	lsrs	r3, r3, #3
 8002480:	433a      	orrs	r2, r7
 8002482:	d100      	bne.n	8002486 <__aeabi_dsub+0x62a>
 8002484:	e66f      	b.n	8002166 <__aeabi_dsub+0x30a>
 8002486:	4662      	mov	r2, ip
 8002488:	0752      	lsls	r2, r2, #29
 800248a:	4313      	orrs	r3, r2
 800248c:	4662      	mov	r2, ip
 800248e:	08d4      	lsrs	r4, r2, #3
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	0312      	lsls	r2, r2, #12
 8002494:	4214      	tst	r4, r2
 8002496:	d007      	beq.n	80024a8 <__aeabi_dsub+0x64c>
 8002498:	08c8      	lsrs	r0, r1, #3
 800249a:	4210      	tst	r0, r2
 800249c:	d104      	bne.n	80024a8 <__aeabi_dsub+0x64c>
 800249e:	465d      	mov	r5, fp
 80024a0:	0004      	movs	r4, r0
 80024a2:	08fb      	lsrs	r3, r7, #3
 80024a4:	0749      	lsls	r1, r1, #29
 80024a6:	430b      	orrs	r3, r1
 80024a8:	0f5a      	lsrs	r2, r3, #29
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	08db      	lsrs	r3, r3, #3
 80024ae:	0752      	lsls	r2, r2, #29
 80024b0:	4313      	orrs	r3, r2
 80024b2:	e65d      	b.n	8002170 <__aeabi_dsub+0x314>
 80024b4:	074b      	lsls	r3, r1, #29
 80024b6:	08ff      	lsrs	r7, r7, #3
 80024b8:	433b      	orrs	r3, r7
 80024ba:	08cc      	lsrs	r4, r1, #3
 80024bc:	e649      	b.n	8002152 <__aeabi_dsub+0x2f6>
 80024be:	19dc      	adds	r4, r3, r7
 80024c0:	429c      	cmp	r4, r3
 80024c2:	419b      	sbcs	r3, r3
 80024c4:	4461      	add	r1, ip
 80024c6:	4689      	mov	r9, r1
 80024c8:	425b      	negs	r3, r3
 80024ca:	4499      	add	r9, r3
 80024cc:	464b      	mov	r3, r9
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	d400      	bmi.n	80024d4 <__aeabi_dsub+0x678>
 80024d2:	e631      	b.n	8002138 <__aeabi_dsub+0x2dc>
 80024d4:	464a      	mov	r2, r9
 80024d6:	4b17      	ldr	r3, [pc, #92]	; (8002534 <__aeabi_dsub+0x6d8>)
 80024d8:	401a      	ands	r2, r3
 80024da:	2301      	movs	r3, #1
 80024dc:	4691      	mov	r9, r2
 80024de:	4698      	mov	r8, r3
 80024e0:	e62a      	b.n	8002138 <__aeabi_dsub+0x2dc>
 80024e2:	0016      	movs	r6, r2
 80024e4:	4664      	mov	r4, ip
 80024e6:	3e20      	subs	r6, #32
 80024e8:	40f4      	lsrs	r4, r6
 80024ea:	46a0      	mov	r8, r4
 80024ec:	2a20      	cmp	r2, #32
 80024ee:	d005      	beq.n	80024fc <__aeabi_dsub+0x6a0>
 80024f0:	2640      	movs	r6, #64	; 0x40
 80024f2:	4664      	mov	r4, ip
 80024f4:	1ab2      	subs	r2, r6, r2
 80024f6:	4094      	lsls	r4, r2
 80024f8:	4323      	orrs	r3, r4
 80024fa:	469a      	mov	sl, r3
 80024fc:	4654      	mov	r4, sl
 80024fe:	1e63      	subs	r3, r4, #1
 8002500:	419c      	sbcs	r4, r3
 8002502:	4643      	mov	r3, r8
 8002504:	431c      	orrs	r4, r3
 8002506:	e5db      	b.n	80020c0 <__aeabi_dsub+0x264>
 8002508:	0002      	movs	r2, r0
 800250a:	2400      	movs	r4, #0
 800250c:	2300      	movs	r3, #0
 800250e:	e548      	b.n	8001fa2 <__aeabi_dsub+0x146>
 8002510:	19dc      	adds	r4, r3, r7
 8002512:	42bc      	cmp	r4, r7
 8002514:	41bf      	sbcs	r7, r7
 8002516:	4461      	add	r1, ip
 8002518:	4689      	mov	r9, r1
 800251a:	427f      	negs	r7, r7
 800251c:	44b9      	add	r9, r7
 800251e:	e738      	b.n	8002392 <__aeabi_dsub+0x536>
 8002520:	464b      	mov	r3, r9
 8002522:	4323      	orrs	r3, r4
 8002524:	d100      	bne.n	8002528 <__aeabi_dsub+0x6cc>
 8002526:	e69f      	b.n	8002268 <__aeabi_dsub+0x40c>
 8002528:	e606      	b.n	8002138 <__aeabi_dsub+0x2dc>
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	000007fe 	.word	0x000007fe
 8002530:	000007ff 	.word	0x000007ff
 8002534:	ff7fffff 	.word	0xff7fffff
 8002538:	08ff      	lsrs	r7, r7, #3
 800253a:	074b      	lsls	r3, r1, #29
 800253c:	433b      	orrs	r3, r7
 800253e:	08cc      	lsrs	r4, r1, #3
 8002540:	e616      	b.n	8002170 <__aeabi_dsub+0x314>
 8002542:	4662      	mov	r2, ip
 8002544:	08db      	lsrs	r3, r3, #3
 8002546:	0752      	lsls	r2, r2, #29
 8002548:	4313      	orrs	r3, r2
 800254a:	4662      	mov	r2, ip
 800254c:	08d4      	lsrs	r4, r2, #3
 800254e:	2280      	movs	r2, #128	; 0x80
 8002550:	0312      	lsls	r2, r2, #12
 8002552:	4214      	tst	r4, r2
 8002554:	d007      	beq.n	8002566 <__aeabi_dsub+0x70a>
 8002556:	08c8      	lsrs	r0, r1, #3
 8002558:	4210      	tst	r0, r2
 800255a:	d104      	bne.n	8002566 <__aeabi_dsub+0x70a>
 800255c:	465d      	mov	r5, fp
 800255e:	0004      	movs	r4, r0
 8002560:	08fb      	lsrs	r3, r7, #3
 8002562:	0749      	lsls	r1, r1, #29
 8002564:	430b      	orrs	r3, r1
 8002566:	0f5a      	lsrs	r2, r3, #29
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	0752      	lsls	r2, r2, #29
 800256c:	08db      	lsrs	r3, r3, #3
 800256e:	4313      	orrs	r3, r2
 8002570:	e5fe      	b.n	8002170 <__aeabi_dsub+0x314>
 8002572:	2300      	movs	r3, #0
 8002574:	4a01      	ldr	r2, [pc, #4]	; (800257c <__aeabi_dsub+0x720>)
 8002576:	001c      	movs	r4, r3
 8002578:	e513      	b.n	8001fa2 <__aeabi_dsub+0x146>
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	000007ff 	.word	0x000007ff

08002580 <__aeabi_d2iz>:
 8002580:	000a      	movs	r2, r1
 8002582:	b530      	push	{r4, r5, lr}
 8002584:	4c13      	ldr	r4, [pc, #76]	; (80025d4 <__aeabi_d2iz+0x54>)
 8002586:	0053      	lsls	r3, r2, #1
 8002588:	0309      	lsls	r1, r1, #12
 800258a:	0005      	movs	r5, r0
 800258c:	0b09      	lsrs	r1, r1, #12
 800258e:	2000      	movs	r0, #0
 8002590:	0d5b      	lsrs	r3, r3, #21
 8002592:	0fd2      	lsrs	r2, r2, #31
 8002594:	42a3      	cmp	r3, r4
 8002596:	dd04      	ble.n	80025a2 <__aeabi_d2iz+0x22>
 8002598:	480f      	ldr	r0, [pc, #60]	; (80025d8 <__aeabi_d2iz+0x58>)
 800259a:	4283      	cmp	r3, r0
 800259c:	dd02      	ble.n	80025a4 <__aeabi_d2iz+0x24>
 800259e:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <__aeabi_d2iz+0x5c>)
 80025a0:	18d0      	adds	r0, r2, r3
 80025a2:	bd30      	pop	{r4, r5, pc}
 80025a4:	2080      	movs	r0, #128	; 0x80
 80025a6:	0340      	lsls	r0, r0, #13
 80025a8:	4301      	orrs	r1, r0
 80025aa:	480d      	ldr	r0, [pc, #52]	; (80025e0 <__aeabi_d2iz+0x60>)
 80025ac:	1ac0      	subs	r0, r0, r3
 80025ae:	281f      	cmp	r0, #31
 80025b0:	dd08      	ble.n	80025c4 <__aeabi_d2iz+0x44>
 80025b2:	480c      	ldr	r0, [pc, #48]	; (80025e4 <__aeabi_d2iz+0x64>)
 80025b4:	1ac3      	subs	r3, r0, r3
 80025b6:	40d9      	lsrs	r1, r3
 80025b8:	000b      	movs	r3, r1
 80025ba:	4258      	negs	r0, r3
 80025bc:	2a00      	cmp	r2, #0
 80025be:	d1f0      	bne.n	80025a2 <__aeabi_d2iz+0x22>
 80025c0:	0018      	movs	r0, r3
 80025c2:	e7ee      	b.n	80025a2 <__aeabi_d2iz+0x22>
 80025c4:	4c08      	ldr	r4, [pc, #32]	; (80025e8 <__aeabi_d2iz+0x68>)
 80025c6:	40c5      	lsrs	r5, r0
 80025c8:	46a4      	mov	ip, r4
 80025ca:	4463      	add	r3, ip
 80025cc:	4099      	lsls	r1, r3
 80025ce:	000b      	movs	r3, r1
 80025d0:	432b      	orrs	r3, r5
 80025d2:	e7f2      	b.n	80025ba <__aeabi_d2iz+0x3a>
 80025d4:	000003fe 	.word	0x000003fe
 80025d8:	0000041d 	.word	0x0000041d
 80025dc:	7fffffff 	.word	0x7fffffff
 80025e0:	00000433 	.word	0x00000433
 80025e4:	00000413 	.word	0x00000413
 80025e8:	fffffbed 	.word	0xfffffbed

080025ec <__aeabi_i2d>:
 80025ec:	b570      	push	{r4, r5, r6, lr}
 80025ee:	2800      	cmp	r0, #0
 80025f0:	d016      	beq.n	8002620 <__aeabi_i2d+0x34>
 80025f2:	17c3      	asrs	r3, r0, #31
 80025f4:	18c5      	adds	r5, r0, r3
 80025f6:	405d      	eors	r5, r3
 80025f8:	0fc4      	lsrs	r4, r0, #31
 80025fa:	0028      	movs	r0, r5
 80025fc:	f000 f88a 	bl	8002714 <__clzsi2>
 8002600:	4a11      	ldr	r2, [pc, #68]	; (8002648 <__aeabi_i2d+0x5c>)
 8002602:	1a12      	subs	r2, r2, r0
 8002604:	280a      	cmp	r0, #10
 8002606:	dc16      	bgt.n	8002636 <__aeabi_i2d+0x4a>
 8002608:	0003      	movs	r3, r0
 800260a:	002e      	movs	r6, r5
 800260c:	3315      	adds	r3, #21
 800260e:	409e      	lsls	r6, r3
 8002610:	230b      	movs	r3, #11
 8002612:	1a18      	subs	r0, r3, r0
 8002614:	40c5      	lsrs	r5, r0
 8002616:	0552      	lsls	r2, r2, #21
 8002618:	032d      	lsls	r5, r5, #12
 800261a:	0b2d      	lsrs	r5, r5, #12
 800261c:	0d53      	lsrs	r3, r2, #21
 800261e:	e003      	b.n	8002628 <__aeabi_i2d+0x3c>
 8002620:	2400      	movs	r4, #0
 8002622:	2300      	movs	r3, #0
 8002624:	2500      	movs	r5, #0
 8002626:	2600      	movs	r6, #0
 8002628:	051b      	lsls	r3, r3, #20
 800262a:	432b      	orrs	r3, r5
 800262c:	07e4      	lsls	r4, r4, #31
 800262e:	4323      	orrs	r3, r4
 8002630:	0030      	movs	r0, r6
 8002632:	0019      	movs	r1, r3
 8002634:	bd70      	pop	{r4, r5, r6, pc}
 8002636:	380b      	subs	r0, #11
 8002638:	4085      	lsls	r5, r0
 800263a:	0552      	lsls	r2, r2, #21
 800263c:	032d      	lsls	r5, r5, #12
 800263e:	2600      	movs	r6, #0
 8002640:	0b2d      	lsrs	r5, r5, #12
 8002642:	0d53      	lsrs	r3, r2, #21
 8002644:	e7f0      	b.n	8002628 <__aeabi_i2d+0x3c>
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	0000041e 	.word	0x0000041e

0800264c <__aeabi_ui2d>:
 800264c:	b510      	push	{r4, lr}
 800264e:	1e04      	subs	r4, r0, #0
 8002650:	d010      	beq.n	8002674 <__aeabi_ui2d+0x28>
 8002652:	f000 f85f 	bl	8002714 <__clzsi2>
 8002656:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <__aeabi_ui2d+0x48>)
 8002658:	1a1b      	subs	r3, r3, r0
 800265a:	280a      	cmp	r0, #10
 800265c:	dc11      	bgt.n	8002682 <__aeabi_ui2d+0x36>
 800265e:	220b      	movs	r2, #11
 8002660:	0021      	movs	r1, r4
 8002662:	1a12      	subs	r2, r2, r0
 8002664:	40d1      	lsrs	r1, r2
 8002666:	3015      	adds	r0, #21
 8002668:	030a      	lsls	r2, r1, #12
 800266a:	055b      	lsls	r3, r3, #21
 800266c:	4084      	lsls	r4, r0
 800266e:	0b12      	lsrs	r2, r2, #12
 8002670:	0d5b      	lsrs	r3, r3, #21
 8002672:	e001      	b.n	8002678 <__aeabi_ui2d+0x2c>
 8002674:	2300      	movs	r3, #0
 8002676:	2200      	movs	r2, #0
 8002678:	051b      	lsls	r3, r3, #20
 800267a:	4313      	orrs	r3, r2
 800267c:	0020      	movs	r0, r4
 800267e:	0019      	movs	r1, r3
 8002680:	bd10      	pop	{r4, pc}
 8002682:	0022      	movs	r2, r4
 8002684:	380b      	subs	r0, #11
 8002686:	4082      	lsls	r2, r0
 8002688:	055b      	lsls	r3, r3, #21
 800268a:	0312      	lsls	r2, r2, #12
 800268c:	2400      	movs	r4, #0
 800268e:	0b12      	lsrs	r2, r2, #12
 8002690:	0d5b      	lsrs	r3, r3, #21
 8002692:	e7f1      	b.n	8002678 <__aeabi_ui2d+0x2c>
 8002694:	0000041e 	.word	0x0000041e

08002698 <__aeabi_cdrcmple>:
 8002698:	4684      	mov	ip, r0
 800269a:	0010      	movs	r0, r2
 800269c:	4662      	mov	r2, ip
 800269e:	468c      	mov	ip, r1
 80026a0:	0019      	movs	r1, r3
 80026a2:	4663      	mov	r3, ip
 80026a4:	e000      	b.n	80026a8 <__aeabi_cdcmpeq>
 80026a6:	46c0      	nop			; (mov r8, r8)

080026a8 <__aeabi_cdcmpeq>:
 80026a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80026aa:	f000 f8f9 	bl	80028a0 <__ledf2>
 80026ae:	2800      	cmp	r0, #0
 80026b0:	d401      	bmi.n	80026b6 <__aeabi_cdcmpeq+0xe>
 80026b2:	2100      	movs	r1, #0
 80026b4:	42c8      	cmn	r0, r1
 80026b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080026b8 <__aeabi_dcmpeq>:
 80026b8:	b510      	push	{r4, lr}
 80026ba:	f000 f849 	bl	8002750 <__eqdf2>
 80026be:	4240      	negs	r0, r0
 80026c0:	3001      	adds	r0, #1
 80026c2:	bd10      	pop	{r4, pc}

080026c4 <__aeabi_dcmplt>:
 80026c4:	b510      	push	{r4, lr}
 80026c6:	f000 f8eb 	bl	80028a0 <__ledf2>
 80026ca:	2800      	cmp	r0, #0
 80026cc:	db01      	blt.n	80026d2 <__aeabi_dcmplt+0xe>
 80026ce:	2000      	movs	r0, #0
 80026d0:	bd10      	pop	{r4, pc}
 80026d2:	2001      	movs	r0, #1
 80026d4:	bd10      	pop	{r4, pc}
 80026d6:	46c0      	nop			; (mov r8, r8)

080026d8 <__aeabi_dcmple>:
 80026d8:	b510      	push	{r4, lr}
 80026da:	f000 f8e1 	bl	80028a0 <__ledf2>
 80026de:	2800      	cmp	r0, #0
 80026e0:	dd01      	ble.n	80026e6 <__aeabi_dcmple+0xe>
 80026e2:	2000      	movs	r0, #0
 80026e4:	bd10      	pop	{r4, pc}
 80026e6:	2001      	movs	r0, #1
 80026e8:	bd10      	pop	{r4, pc}
 80026ea:	46c0      	nop			; (mov r8, r8)

080026ec <__aeabi_dcmpgt>:
 80026ec:	b510      	push	{r4, lr}
 80026ee:	f000 f871 	bl	80027d4 <__gedf2>
 80026f2:	2800      	cmp	r0, #0
 80026f4:	dc01      	bgt.n	80026fa <__aeabi_dcmpgt+0xe>
 80026f6:	2000      	movs	r0, #0
 80026f8:	bd10      	pop	{r4, pc}
 80026fa:	2001      	movs	r0, #1
 80026fc:	bd10      	pop	{r4, pc}
 80026fe:	46c0      	nop			; (mov r8, r8)

08002700 <__aeabi_dcmpge>:
 8002700:	b510      	push	{r4, lr}
 8002702:	f000 f867 	bl	80027d4 <__gedf2>
 8002706:	2800      	cmp	r0, #0
 8002708:	da01      	bge.n	800270e <__aeabi_dcmpge+0xe>
 800270a:	2000      	movs	r0, #0
 800270c:	bd10      	pop	{r4, pc}
 800270e:	2001      	movs	r0, #1
 8002710:	bd10      	pop	{r4, pc}
 8002712:	46c0      	nop			; (mov r8, r8)

08002714 <__clzsi2>:
 8002714:	211c      	movs	r1, #28
 8002716:	2301      	movs	r3, #1
 8002718:	041b      	lsls	r3, r3, #16
 800271a:	4298      	cmp	r0, r3
 800271c:	d301      	bcc.n	8002722 <__clzsi2+0xe>
 800271e:	0c00      	lsrs	r0, r0, #16
 8002720:	3910      	subs	r1, #16
 8002722:	0a1b      	lsrs	r3, r3, #8
 8002724:	4298      	cmp	r0, r3
 8002726:	d301      	bcc.n	800272c <__clzsi2+0x18>
 8002728:	0a00      	lsrs	r0, r0, #8
 800272a:	3908      	subs	r1, #8
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	4298      	cmp	r0, r3
 8002730:	d301      	bcc.n	8002736 <__clzsi2+0x22>
 8002732:	0900      	lsrs	r0, r0, #4
 8002734:	3904      	subs	r1, #4
 8002736:	a202      	add	r2, pc, #8	; (adr r2, 8002740 <__clzsi2+0x2c>)
 8002738:	5c10      	ldrb	r0, [r2, r0]
 800273a:	1840      	adds	r0, r0, r1
 800273c:	4770      	bx	lr
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	02020304 	.word	0x02020304
 8002744:	01010101 	.word	0x01010101
	...

08002750 <__eqdf2>:
 8002750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002752:	464e      	mov	r6, r9
 8002754:	4645      	mov	r5, r8
 8002756:	46de      	mov	lr, fp
 8002758:	4657      	mov	r7, sl
 800275a:	4690      	mov	r8, r2
 800275c:	b5e0      	push	{r5, r6, r7, lr}
 800275e:	0017      	movs	r7, r2
 8002760:	031a      	lsls	r2, r3, #12
 8002762:	0b12      	lsrs	r2, r2, #12
 8002764:	0005      	movs	r5, r0
 8002766:	4684      	mov	ip, r0
 8002768:	4819      	ldr	r0, [pc, #100]	; (80027d0 <__eqdf2+0x80>)
 800276a:	030e      	lsls	r6, r1, #12
 800276c:	004c      	lsls	r4, r1, #1
 800276e:	4691      	mov	r9, r2
 8002770:	005a      	lsls	r2, r3, #1
 8002772:	0fdb      	lsrs	r3, r3, #31
 8002774:	469b      	mov	fp, r3
 8002776:	0b36      	lsrs	r6, r6, #12
 8002778:	0d64      	lsrs	r4, r4, #21
 800277a:	0fc9      	lsrs	r1, r1, #31
 800277c:	0d52      	lsrs	r2, r2, #21
 800277e:	4284      	cmp	r4, r0
 8002780:	d019      	beq.n	80027b6 <__eqdf2+0x66>
 8002782:	4282      	cmp	r2, r0
 8002784:	d010      	beq.n	80027a8 <__eqdf2+0x58>
 8002786:	2001      	movs	r0, #1
 8002788:	4294      	cmp	r4, r2
 800278a:	d10e      	bne.n	80027aa <__eqdf2+0x5a>
 800278c:	454e      	cmp	r6, r9
 800278e:	d10c      	bne.n	80027aa <__eqdf2+0x5a>
 8002790:	2001      	movs	r0, #1
 8002792:	45c4      	cmp	ip, r8
 8002794:	d109      	bne.n	80027aa <__eqdf2+0x5a>
 8002796:	4559      	cmp	r1, fp
 8002798:	d017      	beq.n	80027ca <__eqdf2+0x7a>
 800279a:	2c00      	cmp	r4, #0
 800279c:	d105      	bne.n	80027aa <__eqdf2+0x5a>
 800279e:	0030      	movs	r0, r6
 80027a0:	4328      	orrs	r0, r5
 80027a2:	1e43      	subs	r3, r0, #1
 80027a4:	4198      	sbcs	r0, r3
 80027a6:	e000      	b.n	80027aa <__eqdf2+0x5a>
 80027a8:	2001      	movs	r0, #1
 80027aa:	bcf0      	pop	{r4, r5, r6, r7}
 80027ac:	46bb      	mov	fp, r7
 80027ae:	46b2      	mov	sl, r6
 80027b0:	46a9      	mov	r9, r5
 80027b2:	46a0      	mov	r8, r4
 80027b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027b6:	0033      	movs	r3, r6
 80027b8:	2001      	movs	r0, #1
 80027ba:	432b      	orrs	r3, r5
 80027bc:	d1f5      	bne.n	80027aa <__eqdf2+0x5a>
 80027be:	42a2      	cmp	r2, r4
 80027c0:	d1f3      	bne.n	80027aa <__eqdf2+0x5a>
 80027c2:	464b      	mov	r3, r9
 80027c4:	433b      	orrs	r3, r7
 80027c6:	d1f0      	bne.n	80027aa <__eqdf2+0x5a>
 80027c8:	e7e2      	b.n	8002790 <__eqdf2+0x40>
 80027ca:	2000      	movs	r0, #0
 80027cc:	e7ed      	b.n	80027aa <__eqdf2+0x5a>
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	000007ff 	.word	0x000007ff

080027d4 <__gedf2>:
 80027d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027d6:	4647      	mov	r7, r8
 80027d8:	46ce      	mov	lr, r9
 80027da:	0004      	movs	r4, r0
 80027dc:	0018      	movs	r0, r3
 80027de:	0016      	movs	r6, r2
 80027e0:	031b      	lsls	r3, r3, #12
 80027e2:	0b1b      	lsrs	r3, r3, #12
 80027e4:	4d2d      	ldr	r5, [pc, #180]	; (800289c <__gedf2+0xc8>)
 80027e6:	004a      	lsls	r2, r1, #1
 80027e8:	4699      	mov	r9, r3
 80027ea:	b580      	push	{r7, lr}
 80027ec:	0043      	lsls	r3, r0, #1
 80027ee:	030f      	lsls	r7, r1, #12
 80027f0:	46a4      	mov	ip, r4
 80027f2:	46b0      	mov	r8, r6
 80027f4:	0b3f      	lsrs	r7, r7, #12
 80027f6:	0d52      	lsrs	r2, r2, #21
 80027f8:	0fc9      	lsrs	r1, r1, #31
 80027fa:	0d5b      	lsrs	r3, r3, #21
 80027fc:	0fc0      	lsrs	r0, r0, #31
 80027fe:	42aa      	cmp	r2, r5
 8002800:	d021      	beq.n	8002846 <__gedf2+0x72>
 8002802:	42ab      	cmp	r3, r5
 8002804:	d013      	beq.n	800282e <__gedf2+0x5a>
 8002806:	2a00      	cmp	r2, #0
 8002808:	d122      	bne.n	8002850 <__gedf2+0x7c>
 800280a:	433c      	orrs	r4, r7
 800280c:	2b00      	cmp	r3, #0
 800280e:	d102      	bne.n	8002816 <__gedf2+0x42>
 8002810:	464d      	mov	r5, r9
 8002812:	432e      	orrs	r6, r5
 8002814:	d022      	beq.n	800285c <__gedf2+0x88>
 8002816:	2c00      	cmp	r4, #0
 8002818:	d010      	beq.n	800283c <__gedf2+0x68>
 800281a:	4281      	cmp	r1, r0
 800281c:	d022      	beq.n	8002864 <__gedf2+0x90>
 800281e:	2002      	movs	r0, #2
 8002820:	3901      	subs	r1, #1
 8002822:	4008      	ands	r0, r1
 8002824:	3801      	subs	r0, #1
 8002826:	bcc0      	pop	{r6, r7}
 8002828:	46b9      	mov	r9, r7
 800282a:	46b0      	mov	r8, r6
 800282c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800282e:	464d      	mov	r5, r9
 8002830:	432e      	orrs	r6, r5
 8002832:	d129      	bne.n	8002888 <__gedf2+0xb4>
 8002834:	2a00      	cmp	r2, #0
 8002836:	d1f0      	bne.n	800281a <__gedf2+0x46>
 8002838:	433c      	orrs	r4, r7
 800283a:	d1ee      	bne.n	800281a <__gedf2+0x46>
 800283c:	2800      	cmp	r0, #0
 800283e:	d1f2      	bne.n	8002826 <__gedf2+0x52>
 8002840:	2001      	movs	r0, #1
 8002842:	4240      	negs	r0, r0
 8002844:	e7ef      	b.n	8002826 <__gedf2+0x52>
 8002846:	003d      	movs	r5, r7
 8002848:	4325      	orrs	r5, r4
 800284a:	d11d      	bne.n	8002888 <__gedf2+0xb4>
 800284c:	4293      	cmp	r3, r2
 800284e:	d0ee      	beq.n	800282e <__gedf2+0x5a>
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1e2      	bne.n	800281a <__gedf2+0x46>
 8002854:	464c      	mov	r4, r9
 8002856:	4326      	orrs	r6, r4
 8002858:	d1df      	bne.n	800281a <__gedf2+0x46>
 800285a:	e7e0      	b.n	800281e <__gedf2+0x4a>
 800285c:	2000      	movs	r0, #0
 800285e:	2c00      	cmp	r4, #0
 8002860:	d0e1      	beq.n	8002826 <__gedf2+0x52>
 8002862:	e7dc      	b.n	800281e <__gedf2+0x4a>
 8002864:	429a      	cmp	r2, r3
 8002866:	dc0a      	bgt.n	800287e <__gedf2+0xaa>
 8002868:	dbe8      	blt.n	800283c <__gedf2+0x68>
 800286a:	454f      	cmp	r7, r9
 800286c:	d8d7      	bhi.n	800281e <__gedf2+0x4a>
 800286e:	d00e      	beq.n	800288e <__gedf2+0xba>
 8002870:	2000      	movs	r0, #0
 8002872:	454f      	cmp	r7, r9
 8002874:	d2d7      	bcs.n	8002826 <__gedf2+0x52>
 8002876:	2900      	cmp	r1, #0
 8002878:	d0e2      	beq.n	8002840 <__gedf2+0x6c>
 800287a:	0008      	movs	r0, r1
 800287c:	e7d3      	b.n	8002826 <__gedf2+0x52>
 800287e:	4243      	negs	r3, r0
 8002880:	4158      	adcs	r0, r3
 8002882:	0040      	lsls	r0, r0, #1
 8002884:	3801      	subs	r0, #1
 8002886:	e7ce      	b.n	8002826 <__gedf2+0x52>
 8002888:	2002      	movs	r0, #2
 800288a:	4240      	negs	r0, r0
 800288c:	e7cb      	b.n	8002826 <__gedf2+0x52>
 800288e:	45c4      	cmp	ip, r8
 8002890:	d8c5      	bhi.n	800281e <__gedf2+0x4a>
 8002892:	2000      	movs	r0, #0
 8002894:	45c4      	cmp	ip, r8
 8002896:	d2c6      	bcs.n	8002826 <__gedf2+0x52>
 8002898:	e7ed      	b.n	8002876 <__gedf2+0xa2>
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	000007ff 	.word	0x000007ff

080028a0 <__ledf2>:
 80028a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028a2:	4647      	mov	r7, r8
 80028a4:	46ce      	mov	lr, r9
 80028a6:	0004      	movs	r4, r0
 80028a8:	0018      	movs	r0, r3
 80028aa:	0016      	movs	r6, r2
 80028ac:	031b      	lsls	r3, r3, #12
 80028ae:	0b1b      	lsrs	r3, r3, #12
 80028b0:	4d2c      	ldr	r5, [pc, #176]	; (8002964 <__ledf2+0xc4>)
 80028b2:	004a      	lsls	r2, r1, #1
 80028b4:	4699      	mov	r9, r3
 80028b6:	b580      	push	{r7, lr}
 80028b8:	0043      	lsls	r3, r0, #1
 80028ba:	030f      	lsls	r7, r1, #12
 80028bc:	46a4      	mov	ip, r4
 80028be:	46b0      	mov	r8, r6
 80028c0:	0b3f      	lsrs	r7, r7, #12
 80028c2:	0d52      	lsrs	r2, r2, #21
 80028c4:	0fc9      	lsrs	r1, r1, #31
 80028c6:	0d5b      	lsrs	r3, r3, #21
 80028c8:	0fc0      	lsrs	r0, r0, #31
 80028ca:	42aa      	cmp	r2, r5
 80028cc:	d00d      	beq.n	80028ea <__ledf2+0x4a>
 80028ce:	42ab      	cmp	r3, r5
 80028d0:	d010      	beq.n	80028f4 <__ledf2+0x54>
 80028d2:	2a00      	cmp	r2, #0
 80028d4:	d127      	bne.n	8002926 <__ledf2+0x86>
 80028d6:	433c      	orrs	r4, r7
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d111      	bne.n	8002900 <__ledf2+0x60>
 80028dc:	464d      	mov	r5, r9
 80028de:	432e      	orrs	r6, r5
 80028e0:	d10e      	bne.n	8002900 <__ledf2+0x60>
 80028e2:	2000      	movs	r0, #0
 80028e4:	2c00      	cmp	r4, #0
 80028e6:	d015      	beq.n	8002914 <__ledf2+0x74>
 80028e8:	e00e      	b.n	8002908 <__ledf2+0x68>
 80028ea:	003d      	movs	r5, r7
 80028ec:	4325      	orrs	r5, r4
 80028ee:	d110      	bne.n	8002912 <__ledf2+0x72>
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d118      	bne.n	8002926 <__ledf2+0x86>
 80028f4:	464d      	mov	r5, r9
 80028f6:	432e      	orrs	r6, r5
 80028f8:	d10b      	bne.n	8002912 <__ledf2+0x72>
 80028fa:	2a00      	cmp	r2, #0
 80028fc:	d102      	bne.n	8002904 <__ledf2+0x64>
 80028fe:	433c      	orrs	r4, r7
 8002900:	2c00      	cmp	r4, #0
 8002902:	d00b      	beq.n	800291c <__ledf2+0x7c>
 8002904:	4281      	cmp	r1, r0
 8002906:	d014      	beq.n	8002932 <__ledf2+0x92>
 8002908:	2002      	movs	r0, #2
 800290a:	3901      	subs	r1, #1
 800290c:	4008      	ands	r0, r1
 800290e:	3801      	subs	r0, #1
 8002910:	e000      	b.n	8002914 <__ledf2+0x74>
 8002912:	2002      	movs	r0, #2
 8002914:	bcc0      	pop	{r6, r7}
 8002916:	46b9      	mov	r9, r7
 8002918:	46b0      	mov	r8, r6
 800291a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800291c:	2800      	cmp	r0, #0
 800291e:	d1f9      	bne.n	8002914 <__ledf2+0x74>
 8002920:	2001      	movs	r0, #1
 8002922:	4240      	negs	r0, r0
 8002924:	e7f6      	b.n	8002914 <__ledf2+0x74>
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1ec      	bne.n	8002904 <__ledf2+0x64>
 800292a:	464c      	mov	r4, r9
 800292c:	4326      	orrs	r6, r4
 800292e:	d1e9      	bne.n	8002904 <__ledf2+0x64>
 8002930:	e7ea      	b.n	8002908 <__ledf2+0x68>
 8002932:	429a      	cmp	r2, r3
 8002934:	dd04      	ble.n	8002940 <__ledf2+0xa0>
 8002936:	4243      	negs	r3, r0
 8002938:	4158      	adcs	r0, r3
 800293a:	0040      	lsls	r0, r0, #1
 800293c:	3801      	subs	r0, #1
 800293e:	e7e9      	b.n	8002914 <__ledf2+0x74>
 8002940:	429a      	cmp	r2, r3
 8002942:	dbeb      	blt.n	800291c <__ledf2+0x7c>
 8002944:	454f      	cmp	r7, r9
 8002946:	d8df      	bhi.n	8002908 <__ledf2+0x68>
 8002948:	d006      	beq.n	8002958 <__ledf2+0xb8>
 800294a:	2000      	movs	r0, #0
 800294c:	454f      	cmp	r7, r9
 800294e:	d2e1      	bcs.n	8002914 <__ledf2+0x74>
 8002950:	2900      	cmp	r1, #0
 8002952:	d0e5      	beq.n	8002920 <__ledf2+0x80>
 8002954:	0008      	movs	r0, r1
 8002956:	e7dd      	b.n	8002914 <__ledf2+0x74>
 8002958:	45c4      	cmp	ip, r8
 800295a:	d8d5      	bhi.n	8002908 <__ledf2+0x68>
 800295c:	2000      	movs	r0, #0
 800295e:	45c4      	cmp	ip, r8
 8002960:	d2d8      	bcs.n	8002914 <__ledf2+0x74>
 8002962:	e7f5      	b.n	8002950 <__ledf2+0xb0>
 8002964:	000007ff 	.word	0x000007ff

08002968 <adc_update_run>:

void printf_adc(void){
    uprintf("T:%d,BF:%d,A:%d,B:%d,C:%d\n", _sample.input_temperature, _sample.bemfdivv, _sample.phase_values[0], _sample.phase_values[1], _sample.phase_values[2]);
}

void adc_update_run(void){
 8002968:	b5b0      	push	{r4, r5, r7, lr}
 800296a:	af00      	add	r7, sp, #0
    if(_sample.dma_done){
 800296c:	4b75      	ldr	r3, [pc, #468]	; (8002b44 <adc_update_run+0x1dc>)
 800296e:	2224      	movs	r2, #36	; 0x24
 8002970:	5c9b      	ldrb	r3, [r3, r2]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d100      	bne.n	8002978 <adc_update_run+0x10>
 8002976:	e0e1      	b.n	8002b3c <adc_update_run+0x1d4>
        // RM 13.9: When sampling internal temperature, the adc sampling time must be > 2 * ts_temp (8 microseconds for F051x)
        _sample.bemfdivv = LOWPASS(_sample.bemfdivv, adcValues[0]);
 8002978:	4b72      	ldr	r3, [pc, #456]	; (8002b44 <adc_update_run+0x1dc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	0018      	movs	r0, r3
 800297e:	f7ff fe65 	bl	800264c <__aeabi_ui2d>
 8002982:	4a71      	ldr	r2, [pc, #452]	; (8002b48 <adc_update_run+0x1e0>)
 8002984:	4b71      	ldr	r3, [pc, #452]	; (8002b4c <adc_update_run+0x1e4>)
 8002986:	f7fe fffd 	bl	8001984 <__aeabi_dmul>
 800298a:	0002      	movs	r2, r0
 800298c:	000b      	movs	r3, r1
 800298e:	0014      	movs	r4, r2
 8002990:	001d      	movs	r5, r3
 8002992:	4b6f      	ldr	r3, [pc, #444]	; (8002b50 <adc_update_run+0x1e8>)
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	0018      	movs	r0, r3
 8002998:	f7ff fe28 	bl	80025ec <__aeabi_i2d>
 800299c:	4a6d      	ldr	r2, [pc, #436]	; (8002b54 <adc_update_run+0x1ec>)
 800299e:	4b6e      	ldr	r3, [pc, #440]	; (8002b58 <adc_update_run+0x1f0>)
 80029a0:	f7fe fff0 	bl	8001984 <__aeabi_dmul>
 80029a4:	0002      	movs	r2, r0
 80029a6:	000b      	movs	r3, r1
 80029a8:	0020      	movs	r0, r4
 80029aa:	0029      	movs	r1, r5
 80029ac:	f7fe f9b8 	bl	8000d20 <__aeabi_dadd>
 80029b0:	0002      	movs	r2, r0
 80029b2:	000b      	movs	r3, r1
 80029b4:	0010      	movs	r0, r2
 80029b6:	0019      	movs	r1, r3
 80029b8:	f7fd fd6e 	bl	8000498 <__aeabi_d2uiz>
 80029bc:	0002      	movs	r2, r0
 80029be:	4b61      	ldr	r3, [pc, #388]	; (8002b44 <adc_update_run+0x1dc>)
 80029c0:	609a      	str	r2, [r3, #8]
        _sample.phase_values[0] = LOWPASS(_sample.phase_values[0],adcValues[1]);
 80029c2:	4b60      	ldr	r3, [pc, #384]	; (8002b44 <adc_update_run+0x1dc>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	0018      	movs	r0, r3
 80029c8:	f7ff fe40 	bl	800264c <__aeabi_ui2d>
 80029cc:	4a5e      	ldr	r2, [pc, #376]	; (8002b48 <adc_update_run+0x1e0>)
 80029ce:	4b5f      	ldr	r3, [pc, #380]	; (8002b4c <adc_update_run+0x1e4>)
 80029d0:	f7fe ffd8 	bl	8001984 <__aeabi_dmul>
 80029d4:	0002      	movs	r2, r0
 80029d6:	000b      	movs	r3, r1
 80029d8:	0014      	movs	r4, r2
 80029da:	001d      	movs	r5, r3
 80029dc:	4b5c      	ldr	r3, [pc, #368]	; (8002b50 <adc_update_run+0x1e8>)
 80029de:	885b      	ldrh	r3, [r3, #2]
 80029e0:	0018      	movs	r0, r3
 80029e2:	f7ff fe03 	bl	80025ec <__aeabi_i2d>
 80029e6:	4a5b      	ldr	r2, [pc, #364]	; (8002b54 <adc_update_run+0x1ec>)
 80029e8:	4b5b      	ldr	r3, [pc, #364]	; (8002b58 <adc_update_run+0x1f0>)
 80029ea:	f7fe ffcb 	bl	8001984 <__aeabi_dmul>
 80029ee:	0002      	movs	r2, r0
 80029f0:	000b      	movs	r3, r1
 80029f2:	0020      	movs	r0, r4
 80029f4:	0029      	movs	r1, r5
 80029f6:	f7fe f993 	bl	8000d20 <__aeabi_dadd>
 80029fa:	0002      	movs	r2, r0
 80029fc:	000b      	movs	r3, r1
 80029fe:	0010      	movs	r0, r2
 8002a00:	0019      	movs	r1, r3
 8002a02:	f7fd fd49 	bl	8000498 <__aeabi_d2uiz>
 8002a06:	0002      	movs	r2, r0
 8002a08:	4b4e      	ldr	r3, [pc, #312]	; (8002b44 <adc_update_run+0x1dc>)
 8002a0a:	60da      	str	r2, [r3, #12]
        _sample.phase_values[1] = LOWPASS(_sample.phase_values[1],adcValues[2]);
 8002a0c:	4b4d      	ldr	r3, [pc, #308]	; (8002b44 <adc_update_run+0x1dc>)
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	0018      	movs	r0, r3
 8002a12:	f7ff fe1b 	bl	800264c <__aeabi_ui2d>
 8002a16:	4a4c      	ldr	r2, [pc, #304]	; (8002b48 <adc_update_run+0x1e0>)
 8002a18:	4b4c      	ldr	r3, [pc, #304]	; (8002b4c <adc_update_run+0x1e4>)
 8002a1a:	f7fe ffb3 	bl	8001984 <__aeabi_dmul>
 8002a1e:	0002      	movs	r2, r0
 8002a20:	000b      	movs	r3, r1
 8002a22:	0014      	movs	r4, r2
 8002a24:	001d      	movs	r5, r3
 8002a26:	4b4a      	ldr	r3, [pc, #296]	; (8002b50 <adc_update_run+0x1e8>)
 8002a28:	889b      	ldrh	r3, [r3, #4]
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f7ff fdde 	bl	80025ec <__aeabi_i2d>
 8002a30:	4a48      	ldr	r2, [pc, #288]	; (8002b54 <adc_update_run+0x1ec>)
 8002a32:	4b49      	ldr	r3, [pc, #292]	; (8002b58 <adc_update_run+0x1f0>)
 8002a34:	f7fe ffa6 	bl	8001984 <__aeabi_dmul>
 8002a38:	0002      	movs	r2, r0
 8002a3a:	000b      	movs	r3, r1
 8002a3c:	0020      	movs	r0, r4
 8002a3e:	0029      	movs	r1, r5
 8002a40:	f7fe f96e 	bl	8000d20 <__aeabi_dadd>
 8002a44:	0002      	movs	r2, r0
 8002a46:	000b      	movs	r3, r1
 8002a48:	0010      	movs	r0, r2
 8002a4a:	0019      	movs	r1, r3
 8002a4c:	f7fd fd24 	bl	8000498 <__aeabi_d2uiz>
 8002a50:	0002      	movs	r2, r0
 8002a52:	4b3c      	ldr	r3, [pc, #240]	; (8002b44 <adc_update_run+0x1dc>)
 8002a54:	611a      	str	r2, [r3, #16]
        _sample.phase_values[2] = LOWPASS(_sample.phase_values[2], adcValues[3]);
 8002a56:	4b3b      	ldr	r3, [pc, #236]	; (8002b44 <adc_update_run+0x1dc>)
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f7ff fdf6 	bl	800264c <__aeabi_ui2d>
 8002a60:	4a39      	ldr	r2, [pc, #228]	; (8002b48 <adc_update_run+0x1e0>)
 8002a62:	4b3a      	ldr	r3, [pc, #232]	; (8002b4c <adc_update_run+0x1e4>)
 8002a64:	f7fe ff8e 	bl	8001984 <__aeabi_dmul>
 8002a68:	0002      	movs	r2, r0
 8002a6a:	000b      	movs	r3, r1
 8002a6c:	0014      	movs	r4, r2
 8002a6e:	001d      	movs	r5, r3
 8002a70:	4b37      	ldr	r3, [pc, #220]	; (8002b50 <adc_update_run+0x1e8>)
 8002a72:	88db      	ldrh	r3, [r3, #6]
 8002a74:	0018      	movs	r0, r3
 8002a76:	f7ff fdb9 	bl	80025ec <__aeabi_i2d>
 8002a7a:	4a36      	ldr	r2, [pc, #216]	; (8002b54 <adc_update_run+0x1ec>)
 8002a7c:	4b36      	ldr	r3, [pc, #216]	; (8002b58 <adc_update_run+0x1f0>)
 8002a7e:	f7fe ff81 	bl	8001984 <__aeabi_dmul>
 8002a82:	0002      	movs	r2, r0
 8002a84:	000b      	movs	r3, r1
 8002a86:	0020      	movs	r0, r4
 8002a88:	0029      	movs	r1, r5
 8002a8a:	f7fe f949 	bl	8000d20 <__aeabi_dadd>
 8002a8e:	0002      	movs	r2, r0
 8002a90:	000b      	movs	r3, r1
 8002a92:	0010      	movs	r0, r2
 8002a94:	0019      	movs	r1, r3
 8002a96:	f7fd fcff 	bl	8000498 <__aeabi_d2uiz>
 8002a9a:	0002      	movs	r2, r0
 8002a9c:	4b29      	ldr	r3, [pc, #164]	; (8002b44 <adc_update_run+0x1dc>)
 8002a9e:	615a      	str	r2, [r3, #20]
        _sample.input_temperature = LOWPASS(_sample.input_temperature, adcValues[4]);
 8002aa0:	4b28      	ldr	r3, [pc, #160]	; (8002b44 <adc_update_run+0x1dc>)
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f7ff fdd1 	bl	800264c <__aeabi_ui2d>
 8002aaa:	4a27      	ldr	r2, [pc, #156]	; (8002b48 <adc_update_run+0x1e0>)
 8002aac:	4b27      	ldr	r3, [pc, #156]	; (8002b4c <adc_update_run+0x1e4>)
 8002aae:	f7fe ff69 	bl	8001984 <__aeabi_dmul>
 8002ab2:	0002      	movs	r2, r0
 8002ab4:	000b      	movs	r3, r1
 8002ab6:	0014      	movs	r4, r2
 8002ab8:	001d      	movs	r5, r3
 8002aba:	4b25      	ldr	r3, [pc, #148]	; (8002b50 <adc_update_run+0x1e8>)
 8002abc:	891b      	ldrh	r3, [r3, #8]
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f7ff fd94 	bl	80025ec <__aeabi_i2d>
 8002ac4:	4a23      	ldr	r2, [pc, #140]	; (8002b54 <adc_update_run+0x1ec>)
 8002ac6:	4b24      	ldr	r3, [pc, #144]	; (8002b58 <adc_update_run+0x1f0>)
 8002ac8:	f7fe ff5c 	bl	8001984 <__aeabi_dmul>
 8002acc:	0002      	movs	r2, r0
 8002ace:	000b      	movs	r3, r1
 8002ad0:	0020      	movs	r0, r4
 8002ad2:	0029      	movs	r1, r5
 8002ad4:	f7fe f924 	bl	8000d20 <__aeabi_dadd>
 8002ad8:	0002      	movs	r2, r0
 8002ada:	000b      	movs	r3, r1
 8002adc:	0010      	movs	r0, r2
 8002ade:	0019      	movs	r1, r3
 8002ae0:	f7fd fcda 	bl	8000498 <__aeabi_d2uiz>
 8002ae4:	0002      	movs	r2, r0
 8002ae6:	4b17      	ldr	r3, [pc, #92]	; (8002b44 <adc_update_run+0x1dc>)
 8002ae8:	621a      	str	r2, [r3, #32]
        _sample.input_voltage = LOWPASS(_sample.input_voltage, adcValues[5]);
 8002aea:	4b16      	ldr	r3, [pc, #88]	; (8002b44 <adc_update_run+0x1dc>)
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	0018      	movs	r0, r3
 8002af0:	f7ff fdac 	bl	800264c <__aeabi_ui2d>
 8002af4:	4a14      	ldr	r2, [pc, #80]	; (8002b48 <adc_update_run+0x1e0>)
 8002af6:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <adc_update_run+0x1e4>)
 8002af8:	f7fe ff44 	bl	8001984 <__aeabi_dmul>
 8002afc:	0002      	movs	r2, r0
 8002afe:	000b      	movs	r3, r1
 8002b00:	0014      	movs	r4, r2
 8002b02:	001d      	movs	r5, r3
 8002b04:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <adc_update_run+0x1e8>)
 8002b06:	895b      	ldrh	r3, [r3, #10]
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f7ff fd6f 	bl	80025ec <__aeabi_i2d>
 8002b0e:	4a11      	ldr	r2, [pc, #68]	; (8002b54 <adc_update_run+0x1ec>)
 8002b10:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <adc_update_run+0x1f0>)
 8002b12:	f7fe ff37 	bl	8001984 <__aeabi_dmul>
 8002b16:	0002      	movs	r2, r0
 8002b18:	000b      	movs	r3, r1
 8002b1a:	0020      	movs	r0, r4
 8002b1c:	0029      	movs	r1, r5
 8002b1e:	f7fe f8ff 	bl	8000d20 <__aeabi_dadd>
 8002b22:	0002      	movs	r2, r0
 8002b24:	000b      	movs	r3, r1
 8002b26:	0010      	movs	r0, r2
 8002b28:	0019      	movs	r1, r3
 8002b2a:	f7fd fcb5 	bl	8000498 <__aeabi_d2uiz>
 8002b2e:	0002      	movs	r2, r0
 8002b30:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <adc_update_run+0x1dc>)
 8002b32:	619a      	str	r2, [r3, #24]
        _sample.dma_done = 0;
 8002b34:	4b03      	ldr	r3, [pc, #12]	; (8002b44 <adc_update_run+0x1dc>)
 8002b36:	2224      	movs	r2, #36	; 0x24
 8002b38:	2100      	movs	r1, #0
 8002b3a:	5499      	strb	r1, [r3, r2]
    }

}
 8002b3c:	46c0      	nop			; (mov r8, r8)
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bdb0      	pop	{r4, r5, r7, pc}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	20000030 	.word	0x20000030
 8002b48:	99999998 	.word	0x99999998
 8002b4c:	3fb99999 	.word	0x3fb99999
 8002b50:	2000018c 	.word	0x2000018c
 8002b54:	cccccccd 	.word	0xcccccccd
 8002b58:	3feccccc 	.word	0x3feccccc

08002b5c <updateAdcValues>:

void updateAdcValues(void){
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
    _sample.dma_done =1;
 8002b60:	4b03      	ldr	r3, [pc, #12]	; (8002b70 <updateAdcValues+0x14>)
 8002b62:	2224      	movs	r2, #36	; 0x24
 8002b64:	2101      	movs	r1, #1
 8002b66:	5499      	strb	r1, [r3, r2]
}
 8002b68:	46c0      	nop			; (mov r8, r8)
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	20000030 	.word	0x20000030

08002b74 <get_comutator_value>:

float motor_adc_get_temperature(void){
   return __LL_ADC_CALC_TEMPERATURE(3300,_sample.input_temperature,LL_ADC_RESOLUTION_12B);
}

bool get_comutator_value(uint8_t phase){
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	0002      	movs	r2, r0
 8002b7c:	1dfb      	adds	r3, r7, #7
 8002b7e:	701a      	strb	r2, [r3, #0]
    if(phase>2)return 0;
 8002b80:	1dfb      	adds	r3, r7, #7
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <get_comutator_value+0x18>
 8002b88:	2300      	movs	r3, #0
 8002b8a:	e00c      	b.n	8002ba6 <get_comutator_value+0x32>
    return  _sample.phase_values[phase] > 1500;
 8002b8c:	1dfb      	adds	r3, r7, #7
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	4a07      	ldr	r2, [pc, #28]	; (8002bb0 <get_comutator_value+0x3c>)
 8002b92:	3302      	adds	r3, #2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	18d3      	adds	r3, r2, r3
 8002b98:	3304      	adds	r3, #4
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a05      	ldr	r2, [pc, #20]	; (8002bb4 <get_comutator_value+0x40>)
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	419b      	sbcs	r3, r3
 8002ba2:	425b      	negs	r3, r3
 8002ba4:	b2db      	uxtb	r3, r3
}
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b002      	add	sp, #8
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	20000030 	.word	0x20000030
 8002bb4:	000005dc 	.word	0x000005dc

08002bb8 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	601a      	str	r2, [r3, #0]
}
 8002bcc:	46c0      	nop			; (mov r8, r8)
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	b002      	add	sp, #8
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <init_comutator>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
__STATIC_INLINE uint32_t LL_TIM_CC_IsEnabledChannel(TIM_TypeDef *TIMx, uint32_t Channels)
 */

void init_comutator(void){
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
    LL_TIM_EnableCounter(INTERVAL_TIM);
 8002bd8:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <init_comutator+0x1c>)
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f7ff ffec 	bl	8002bb8 <LL_TIM_EnableCounter>
    LL_TIM_EnableCounter(TIM17);
 8002be0:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <init_comutator+0x20>)
 8002be2:	0018      	movs	r0, r3
 8002be4:	f7ff ffe8 	bl	8002bb8 <LL_TIM_EnableCounter>
}
 8002be8:	46c0      	nop			; (mov r8, r8)
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	40014400 	.word	0x40014400
 8002bf4:	40014800 	.word	0x40014800

08002bf8 <calculateChecksum>:
uint32_t FLASH_FKEY2 =0xCDEF89AB;

extern pwm_config_t config;

static uint8_t calculateChecksum(const uint8_t *data, uint32_t length)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
    uint8_t checksum = 0;
 8002c02:	230f      	movs	r3, #15
 8002c04:	18fb      	adds	r3, r7, r3
 8002c06:	2200      	movs	r2, #0
 8002c08:	701a      	strb	r2, [r3, #0]
    const uint8_t *byteOffset;

    for (byteOffset = data; byteOffset < (data + length); byteOffset++)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	e00a      	b.n	8002c26 <calculateChecksum+0x2e>
        checksum ^= *byteOffset;
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	7819      	ldrb	r1, [r3, #0]
 8002c14:	220f      	movs	r2, #15
 8002c16:	18bb      	adds	r3, r7, r2
 8002c18:	18ba      	adds	r2, r7, r2
 8002c1a:	7812      	ldrb	r2, [r2, #0]
 8002c1c:	404a      	eors	r2, r1
 8002c1e:	701a      	strb	r2, [r3, #0]
    for (byteOffset = data; byteOffset < (data + length); byteOffset++)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	3301      	adds	r3, #1
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	18d3      	adds	r3, r2, r3
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d3ee      	bcc.n	8002c10 <calculateChecksum+0x18>

    //eeprom_test(data, length, checksum);
    return checksum;
 8002c32:	230f      	movs	r3, #15
 8002c34:	18fb      	adds	r3, r7, r3
 8002c36:	781b      	ldrb	r3, [r3, #0]
}
 8002c38:	0018      	movs	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b004      	add	sp, #16
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <eeprom_read>:

uint8_t eeprom_read(){
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
    return read_flash_bin(&config,  EEPROM_START_ADD, sizeof(pwm_config_t));
 8002c44:	4904      	ldr	r1, [pc, #16]	; (8002c58 <eeprom_read+0x18>)
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <eeprom_read+0x1c>)
 8002c48:	2214      	movs	r2, #20
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f000 f8f8 	bl	8002e40 <read_flash_bin>
 8002c50:	0003      	movs	r3, r0
}
 8002c52:	0018      	movs	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	08007c00 	.word	0x08007c00
 8002c5c:	20000174 	.word	0x20000174

08002c60 <eeprom_save>:

void eeprom_save(){
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
   save_flash_nolib(&config, sizeof(pwm_config_t), EEPROM_START_ADD);
 8002c64:	4a04      	ldr	r2, [pc, #16]	; (8002c78 <eeprom_save+0x18>)
 8002c66:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <eeprom_save+0x1c>)
 8002c68:	2114      	movs	r1, #20
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f000 f808 	bl	8002c80 <save_flash_nolib>
}
 8002c70:	46c0      	nop			; (mov r8, r8)
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	08007c00 	.word	0x08007c00
 8002c7c:	20000174 	.word	0x20000174

08002c80 <save_flash_nolib>:


void save_flash_nolib(pwm_config_t *data, int length, uint32_t add){
 8002c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c82:	46c6      	mov	lr, r8
 8002c84:	b500      	push	{lr}
 8002c86:	b090      	sub	sp, #64	; 0x40
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6278      	str	r0, [r7, #36]	; 0x24
 8002c8c:	6239      	str	r1, [r7, #32]
 8002c8e:	61fa      	str	r2, [r7, #28]
 8002c90:	466b      	mov	r3, sp
 8002c92:	4698      	mov	r8, r3

    volatile uint32_t data_length = ceil(length / 2);
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	da00      	bge.n	8002c9c <save_flash_nolib+0x1c>
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	105b      	asrs	r3, r3, #1
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f7ff fca4 	bl	80025ec <__aeabi_i2d>
 8002ca4:	0002      	movs	r2, r0
 8002ca6:	000b      	movs	r3, r1
 8002ca8:	0010      	movs	r0, r2
 8002caa:	0019      	movs	r1, r3
 8002cac:	f7fd fbf4 	bl	8000498 <__aeabi_d2uiz>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	637b      	str	r3, [r7, #52]	; 0x34
    uint16_t data_to_FLASH[data_length];
 8002cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb6:	001a      	movs	r2, r3
 8002cb8:	3a01      	subs	r2, #1
 8002cba:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	60fa      	str	r2, [r7, #12]
 8002cc2:	68b8      	ldr	r0, [r7, #8]
 8002cc4:	68f9      	ldr	r1, [r7, #12]
 8002cc6:	0002      	movs	r2, r0
 8002cc8:	0f12      	lsrs	r2, r2, #28
 8002cca:	000e      	movs	r6, r1
 8002ccc:	0136      	lsls	r6, r6, #4
 8002cce:	617e      	str	r6, [r7, #20]
 8002cd0:	697e      	ldr	r6, [r7, #20]
 8002cd2:	4316      	orrs	r6, r2
 8002cd4:	617e      	str	r6, [r7, #20]
 8002cd6:	0002      	movs	r2, r0
 8002cd8:	0112      	lsls	r2, r2, #4
 8002cda:	613a      	str	r2, [r7, #16]
 8002cdc:	603b      	str	r3, [r7, #0]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	607a      	str	r2, [r7, #4]
 8002ce2:	6838      	ldr	r0, [r7, #0]
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	0002      	movs	r2, r0
 8002ce8:	0f12      	lsrs	r2, r2, #28
 8002cea:	000e      	movs	r6, r1
 8002cec:	0135      	lsls	r5, r6, #4
 8002cee:	4315      	orrs	r5, r2
 8002cf0:	0002      	movs	r2, r0
 8002cf2:	0114      	lsls	r4, r2, #4
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	3307      	adds	r3, #7
 8002cf8:	08db      	lsrs	r3, r3, #3
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	466a      	mov	r2, sp
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	469d      	mov	sp, r3
 8002d02:	466b      	mov	r3, sp
 8002d04:	3301      	adds	r3, #1
 8002d06:	085b      	lsrs	r3, r3, #1
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	63bb      	str	r3, [r7, #56]	; 0x38

    memcpy(data_to_FLASH, data, length);
 8002d0c:	6a3a      	ldr	r2, [r7, #32]
 8002d0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d12:	0018      	movs	r0, r3
 8002d14:	f004 fabc 	bl	8007290 <memcpy>

    config.chk = calculateChecksum((uint8_t *)data_to_FLASH, length-4);
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	3b04      	subs	r3, #4
 8002d1c:	001a      	movs	r2, r3
 8002d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d20:	0011      	movs	r1, r2
 8002d22:	0018      	movs	r0, r3
 8002d24:	f7ff ff68 	bl	8002bf8 <calculateChecksum>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	001a      	movs	r2, r3
 8002d2c:	4b40      	ldr	r3, [pc, #256]	; (8002e30 <save_flash_nolib+0x1b0>)
 8002d2e:	741a      	strb	r2, [r3, #16]

    memcpy(data_to_FLASH, data, length);
 8002d30:	6a3a      	ldr	r2, [r7, #32]
 8002d32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d36:	0018      	movs	r0, r3
 8002d38:	f004 faaa 	bl	8007290 <memcpy>

    // unlock flash

    while ((FLASH->SR & FLASH_SR_BSY) != 0);
 8002d3c:	46c0      	nop			; (mov r8, r8)
 8002d3e:	4b3d      	ldr	r3, [pc, #244]	; (8002e34 <save_flash_nolib+0x1b4>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	4013      	ands	r3, r2
 8002d46:	d1fa      	bne.n	8002d3e <save_flash_nolib+0xbe>
    if ((FLASH->CR & FLASH_CR_LOCK) != 0) {
 8002d48:	4b3a      	ldr	r3, [pc, #232]	; (8002e34 <save_flash_nolib+0x1b4>)
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	2280      	movs	r2, #128	; 0x80
 8002d4e:	4013      	ands	r3, r2
 8002d50:	d007      	beq.n	8002d62 <save_flash_nolib+0xe2>
        FLASH->KEYR = FLASH_FKEY1;
 8002d52:	4a38      	ldr	r2, [pc, #224]	; (8002e34 <save_flash_nolib+0x1b4>)
 8002d54:	4b38      	ldr	r3, [pc, #224]	; (8002e38 <save_flash_nolib+0x1b8>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6053      	str	r3, [r2, #4]
        FLASH->KEYR = FLASH_FKEY2;
 8002d5a:	4a36      	ldr	r2, [pc, #216]	; (8002e34 <save_flash_nolib+0x1b4>)
 8002d5c:	4b37      	ldr	r3, [pc, #220]	; (8002e3c <save_flash_nolib+0x1bc>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6053      	str	r3, [r2, #4]
    }

    // erase page if address even divisable by 1024

    if((add % 1024) == 0){
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	059b      	lsls	r3, r3, #22
 8002d66:	0d9b      	lsrs	r3, r3, #22
 8002d68:	d122      	bne.n	8002db0 <save_flash_nolib+0x130>
        FLASH->CR |= FLASH_CR_PER;
 8002d6a:	4b32      	ldr	r3, [pc, #200]	; (8002e34 <save_flash_nolib+0x1b4>)
 8002d6c:	691a      	ldr	r2, [r3, #16]
 8002d6e:	4b31      	ldr	r3, [pc, #196]	; (8002e34 <save_flash_nolib+0x1b4>)
 8002d70:	2102      	movs	r1, #2
 8002d72:	430a      	orrs	r2, r1
 8002d74:	611a      	str	r2, [r3, #16]
        FLASH->AR = add;
 8002d76:	4b2f      	ldr	r3, [pc, #188]	; (8002e34 <save_flash_nolib+0x1b4>)
 8002d78:	69fa      	ldr	r2, [r7, #28]
 8002d7a:	615a      	str	r2, [r3, #20]
        FLASH->CR |= FLASH_CR_STRT;
 8002d7c:	4b2d      	ldr	r3, [pc, #180]	; (8002e34 <save_flash_nolib+0x1b4>)
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	4b2c      	ldr	r3, [pc, #176]	; (8002e34 <save_flash_nolib+0x1b4>)
 8002d82:	2140      	movs	r1, #64	; 0x40
 8002d84:	430a      	orrs	r2, r1
 8002d86:	611a      	str	r2, [r3, #16]

        while ((FLASH->SR & FLASH_SR_BSY) != 0);
 8002d88:	46c0      	nop			; (mov r8, r8)
 8002d8a:	4b2a      	ldr	r3, [pc, #168]	; (8002e34 <save_flash_nolib+0x1b4>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	4013      	ands	r3, r2
 8002d92:	d1fa      	bne.n	8002d8a <save_flash_nolib+0x10a>

        if ((FLASH->SR & FLASH_SR_EOP) != 0){
 8002d94:	4b27      	ldr	r3, [pc, #156]	; (8002e34 <save_flash_nolib+0x1b4>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d002      	beq.n	8002da4 <save_flash_nolib+0x124>
            FLASH->SR = FLASH_SR_EOP;
 8002d9e:	4b25      	ldr	r3, [pc, #148]	; (8002e34 <save_flash_nolib+0x1b4>)
 8002da0:	2220      	movs	r2, #32
 8002da2:	60da      	str	r2, [r3, #12]
        }
        FLASH->CR &= ~FLASH_CR_PER;
 8002da4:	4b23      	ldr	r3, [pc, #140]	; (8002e34 <save_flash_nolib+0x1b4>)
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <save_flash_nolib+0x1b4>)
 8002daa:	2102      	movs	r1, #2
 8002dac:	438a      	bics	r2, r1
 8002dae:	611a      	str	r2, [r3, #16]
    }

     volatile uint32_t write_cnt=0, index=0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	633b      	str	r3, [r7, #48]	; 0x30
 8002db4:	2300      	movs	r3, #0
 8002db6:	62fb      	str	r3, [r7, #44]	; 0x2c

     while(index < data_length){
 8002db8:	e028      	b.n	8002e0c <save_flash_nolib+0x18c>

        FLASH->CR |= FLASH_CR_PG; /* (1) */
 8002dba:	4b1e      	ldr	r3, [pc, #120]	; (8002e34 <save_flash_nolib+0x1b4>)
 8002dbc:	691a      	ldr	r2, [r3, #16]
 8002dbe:	4b1d      	ldr	r3, [pc, #116]	; (8002e34 <save_flash_nolib+0x1b4>)
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	611a      	str	r2, [r3, #16]
        *(__IO uint16_t*)(add+write_cnt) = data_to_FLASH[index];
 8002dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	18cb      	adds	r3, r1, r3
 8002dce:	0019      	movs	r1, r3
 8002dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd2:	0052      	lsls	r2, r2, #1
 8002dd4:	5ad3      	ldrh	r3, [r2, r3]
 8002dd6:	800b      	strh	r3, [r1, #0]
        while ((FLASH->SR & FLASH_SR_BSY) != 0);
 8002dd8:	46c0      	nop			; (mov r8, r8)
 8002dda:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <save_flash_nolib+0x1b4>)
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	2201      	movs	r2, #1
 8002de0:	4013      	ands	r3, r2
 8002de2:	d1fa      	bne.n	8002dda <save_flash_nolib+0x15a>
        if ((FLASH->SR & FLASH_SR_EOP) != 0){
 8002de4:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <save_flash_nolib+0x1b4>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	2220      	movs	r2, #32
 8002dea:	4013      	ands	r3, r2
 8002dec:	d002      	beq.n	8002df4 <save_flash_nolib+0x174>
            FLASH->SR = FLASH_SR_EOP;
 8002dee:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <save_flash_nolib+0x1b4>)
 8002df0:	2220      	movs	r2, #32
 8002df2:	60da      	str	r2, [r3, #12]
        }
        FLASH->CR &= ~FLASH_CR_PG;
 8002df4:	4b0f      	ldr	r3, [pc, #60]	; (8002e34 <save_flash_nolib+0x1b4>)
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <save_flash_nolib+0x1b4>)
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	438a      	bics	r2, r1
 8002dfe:	611a      	str	r2, [r3, #16]
        write_cnt += 2;
 8002e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e02:	3302      	adds	r3, #2
 8002e04:	633b      	str	r3, [r7, #48]	; 0x30
        index++;
 8002e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e08:	3301      	adds	r3, #1
 8002e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
     while(index < data_length){
 8002e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d3d2      	bcc.n	8002dba <save_flash_nolib+0x13a>
    }

    SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002e14:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <save_flash_nolib+0x1b4>)
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <save_flash_nolib+0x1b4>)
 8002e1a:	2180      	movs	r1, #128	; 0x80
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	611a      	str	r2, [r3, #16]
 8002e20:	46c5      	mov	sp, r8
}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	46bd      	mov	sp, r7
 8002e26:	b010      	add	sp, #64	; 0x40
 8002e28:	bc80      	pop	{r7}
 8002e2a:	46b8      	mov	r8, r7
 8002e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	20000174 	.word	0x20000174
 8002e34:	40022000 	.word	0x40022000
 8002e38:	20000000 	.word	0x20000000
 8002e3c:	20000004 	.word	0x20000004

08002e40 <read_flash_bin>:

uint8_t read_flash_bin(pwm_config_t*  data , uint32_t add , int out_buff_len){
 8002e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e42:	46c6      	mov	lr, r8
 8002e44:	b500      	push	{lr}
 8002e46:	b08e      	sub	sp, #56	; 0x38
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6278      	str	r0, [r7, #36]	; 0x24
 8002e4c:	6239      	str	r1, [r7, #32]
 8002e4e:	61fa      	str	r2, [r7, #28]
 8002e50:	466b      	mov	r3, sp
 8002e52:	4698      	mov	r8, r3
    uint8_t data_to_FLASH[out_buff_len];
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	1e5a      	subs	r2, r3, #1
 8002e58:	633a      	str	r2, [r7, #48]	; 0x30
 8002e5a:	001a      	movs	r2, r3
 8002e5c:	60ba      	str	r2, [r7, #8]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	60fa      	str	r2, [r7, #12]
 8002e62:	68b8      	ldr	r0, [r7, #8]
 8002e64:	68f9      	ldr	r1, [r7, #12]
 8002e66:	0002      	movs	r2, r0
 8002e68:	0f52      	lsrs	r2, r2, #29
 8002e6a:	000e      	movs	r6, r1
 8002e6c:	00f6      	lsls	r6, r6, #3
 8002e6e:	617e      	str	r6, [r7, #20]
 8002e70:	697e      	ldr	r6, [r7, #20]
 8002e72:	4316      	orrs	r6, r2
 8002e74:	617e      	str	r6, [r7, #20]
 8002e76:	0002      	movs	r2, r0
 8002e78:	00d2      	lsls	r2, r2, #3
 8002e7a:	613a      	str	r2, [r7, #16]
 8002e7c:	001a      	movs	r2, r3
 8002e7e:	603a      	str	r2, [r7, #0]
 8002e80:	2200      	movs	r2, #0
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	6838      	ldr	r0, [r7, #0]
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	0002      	movs	r2, r0
 8002e8a:	0f52      	lsrs	r2, r2, #29
 8002e8c:	000e      	movs	r6, r1
 8002e8e:	00f5      	lsls	r5, r6, #3
 8002e90:	4315      	orrs	r5, r2
 8002e92:	0002      	movs	r2, r0
 8002e94:	00d4      	lsls	r4, r2, #3
 8002e96:	3307      	adds	r3, #7
 8002e98:	08db      	lsrs	r3, r3, #3
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	466a      	mov	r2, sp
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	469d      	mov	sp, r3
 8002ea2:	466b      	mov	r3, sp
 8002ea4:	3300      	adds	r3, #0
 8002ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    //volatile uint32_t read_data;
    for (int i = 0; i < out_buff_len ; i ++){
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	637b      	str	r3, [r7, #52]	; 0x34
 8002eac:	e00b      	b.n	8002ec6 <read_flash_bin+0x86>
        data_to_FLASH[i] = *(uint8_t*)(add + i);
 8002eae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	18d3      	adds	r3, r2, r3
 8002eb4:	7819      	ldrb	r1, [r3, #0]
 8002eb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eba:	18d3      	adds	r3, r2, r3
 8002ebc:	1c0a      	adds	r2, r1, #0
 8002ebe:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < out_buff_len ; i ++){
 8002ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ec6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	dbef      	blt.n	8002eae <read_flash_bin+0x6e>
    }

    uint8_t chk = calculateChecksum(data_to_FLASH, out_buff_len - 4);
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	3b04      	subs	r3, #4
 8002ed2:	001a      	movs	r2, r3
 8002ed4:	2513      	movs	r5, #19
 8002ed6:	2618      	movs	r6, #24
 8002ed8:	19ab      	adds	r3, r5, r6
 8002eda:	19dc      	adds	r4, r3, r7
 8002edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ede:	0011      	movs	r1, r2
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f7ff fe89 	bl	8002bf8 <calculateChecksum>
 8002ee6:	0003      	movs	r3, r0
 8002ee8:	7023      	strb	r3, [r4, #0]

    if(chk != data_to_FLASH[out_buff_len - 4]){
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	3b04      	subs	r3, #4
 8002eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ef0:	5cd3      	ldrb	r3, [r2, r3]
 8002ef2:	19aa      	adds	r2, r5, r6
 8002ef4:	19d2      	adds	r2, r2, r7
 8002ef6:	7812      	ldrb	r2, [r2, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d001      	beq.n	8002f00 <read_flash_bin+0xc0>
        return ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e006      	b.n	8002f0e <read_flash_bin+0xce>
    }

    memcpy(data, data_to_FLASH, out_buff_len);
 8002f00:	69fa      	ldr	r2, [r7, #28]
 8002f02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	0018      	movs	r0, r3
 8002f08:	f004 f9c2 	bl	8007290 <memcpy>
    return SUCCESS;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	46c5      	mov	sp, r8
}
 8002f10:	0018      	movs	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b00e      	add	sp, #56	; 0x38
 8002f16:	bc80      	pop	{r7}
 8002f18:	46b8      	mov	r8, r7
 8002f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f1c <LL_TIM_EnableCounter>:
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	601a      	str	r2, [r3, #0]
}
 8002f30:	46c0      	nop			; (mov r8, r8)
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b002      	add	sp, #8
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1a      	ldr	r2, [r3, #32]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	621a      	str	r2, [r3, #32]
}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	46bd      	mov	sp, r7
 8002f52:	b002      	add	sp, #8
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	2202      	movs	r2, #2
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	60da      	str	r2, [r3, #12]
}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	b002      	add	sp, #8
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	615a      	str	r2, [r3, #20]
}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b002      	add	sp, #8
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b084      	sub	sp, #16
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
 8002f96:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	041a      	lsls	r2, r3, #16
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	6839      	ldr	r1, [r7, #0]
 8002fac:	400b      	ands	r3, r1
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	619a      	str	r2, [r3, #24]
}
 8002fb4:	46c0      	nop			; (mov r8, r8)
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b004      	add	sp, #16
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <MAP>:

uint32_t get_duty(int32_t period){
    return  3 + ((1000000 * period) / (SystemCoreClock / config.prs)) ;
}

uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint32_t au32_OUTmax){
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	603b      	str	r3, [r7, #0]
    return (uint32_t)((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	69b9      	ldr	r1, [r7, #24]
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	1a8a      	subs	r2, r1, r2
 8002fd6:	435a      	muls	r2, r3
 8002fd8:	0010      	movs	r0, r2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	0019      	movs	r1, r3
 8002fe2:	f7fd f891 	bl	8000108 <__udivsi3>
 8002fe6:	0003      	movs	r3, r0
 8002fe8:	001a      	movs	r2, r3
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	18d3      	adds	r3, r2, r3
}
 8002fee:	0018      	movs	r0, r3
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	b004      	add	sp, #16
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <is_callibred>:

uint8_t is_callibred(uint32_t capture){
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
    uint16_t diff = abs(config.calibmax - config.calibzero);
 8003000:	4b15      	ldr	r3, [pc, #84]	; (8003058 <is_callibred+0x60>)
 8003002:	885b      	ldrh	r3, [r3, #2]
 8003004:	001a      	movs	r2, r3
 8003006:	4b14      	ldr	r3, [pc, #80]	; (8003058 <is_callibred+0x60>)
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	17d9      	asrs	r1, r3, #31
 800300e:	185a      	adds	r2, r3, r1
 8003010:	404a      	eors	r2, r1
 8003012:	210e      	movs	r1, #14
 8003014:	187b      	adds	r3, r7, r1
 8003016:	801a      	strh	r2, [r3, #0]
    diff = ((diff > 500) ? abs(capture - config.calibzero) : 10);
 8003018:	187b      	adds	r3, r7, r1
 800301a:	881a      	ldrh	r2, [r3, #0]
 800301c:	23fa      	movs	r3, #250	; 0xfa
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	429a      	cmp	r2, r3
 8003022:	d909      	bls.n	8003038 <is_callibred+0x40>
 8003024:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <is_callibred+0x60>)
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	001a      	movs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	17da      	asrs	r2, r3, #31
 8003030:	189b      	adds	r3, r3, r2
 8003032:	4053      	eors	r3, r2
 8003034:	b29a      	uxth	r2, r3
 8003036:	e000      	b.n	800303a <is_callibred+0x42>
 8003038:	220a      	movs	r2, #10
 800303a:	210e      	movs	r1, #14
 800303c:	187b      	adds	r3, r7, r1
 800303e:	801a      	strh	r2, [r3, #0]
    return diff<10;
 8003040:	187b      	adds	r3, r7, r1
 8003042:	881a      	ldrh	r2, [r3, #0]
 8003044:	2109      	movs	r1, #9
 8003046:	2300      	movs	r3, #0
 8003048:	4291      	cmp	r1, r2
 800304a:	415b      	adcs	r3, r3
 800304c:	b2db      	uxtb	r3, r3
}
 800304e:	0018      	movs	r0, r3
 8003050:	46bd      	mov	sp, r7
 8003052:	b004      	add	sp, #16
 8003054:	bd80      	pop	{r7, pc}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	20000174 	.word	0x20000174

0800305c <enable_ic>:

void enable_ic(){
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
    LL_TIM_EnableIT_CC1(IC_TIMER_REGISTER);
 8003060:	4b09      	ldr	r3, [pc, #36]	; (8003088 <enable_ic+0x2c>)
 8003062:	0018      	movs	r0, r3
 8003064:	f7ff ff77 	bl	8002f56 <LL_TIM_EnableIT_CC1>
    LL_TIM_CC_EnableChannel(IC_TIMER_REGISTER, IC_TIMER_CHANNEL);
 8003068:	4b07      	ldr	r3, [pc, #28]	; (8003088 <enable_ic+0x2c>)
 800306a:	2101      	movs	r1, #1
 800306c:	0018      	movs	r0, r3
 800306e:	f7ff ff63 	bl	8002f38 <LL_TIM_CC_EnableChannel>
    LL_TIM_EnableCounter(IC_TIMER_REGISTER);
 8003072:	4b05      	ldr	r3, [pc, #20]	; (8003088 <enable_ic+0x2c>)
 8003074:	0018      	movs	r0, r3
 8003076:	f7ff ff51 	bl	8002f1c <LL_TIM_EnableCounter>
    LL_TIM_GenerateEvent_UPDATE(IC_TIMER_REGISTER);
 800307a:	4b03      	ldr	r3, [pc, #12]	; (8003088 <enable_ic+0x2c>)
 800307c:	0018      	movs	r0, r3
 800307e:	f7ff ff78 	bl	8002f72 <LL_TIM_GenerateEvent_UPDATE>
}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40000400 	.word	0x40000400

0800308c <init_input>:

void init_input(void){
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
    enable_ic();
 8003090:	f7ff ffe4 	bl	800305c <enable_ic>
    //receiveDshotDma();

    signal.timout = 1000;
 8003094:	4a17      	ldr	r2, [pc, #92]	; (80030f4 <init_input+0x68>)
 8003096:	238c      	movs	r3, #140	; 0x8c
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	21fa      	movs	r1, #250	; 0xfa
 800309c:	0089      	lsls	r1, r1, #2
 800309e:	52d1      	strh	r1, [r2, r3]
    signal.dmac = 0;
 80030a0:	4a14      	ldr	r2, [pc, #80]	; (80030f4 <init_input+0x68>)
 80030a2:	2386      	movs	r3, #134	; 0x86
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	2100      	movs	r1, #0
 80030a8:	54d1      	strb	r1, [r2, r3]
    signal.armed = 0;
 80030aa:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <init_input+0x68>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	715a      	strb	r2, [r3, #5]
    signal.is_calibrate = 0;
 80030b0:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <init_input+0x68>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	719a      	strb	r2, [r3, #6]

#ifdef USE_EEPROM
    if(eeprom_read()==ERROR){//set default
 80030b6:	f7ff fdc3 	bl	8002c40 <eeprom_read>
 80030ba:	0003      	movs	r3, r0
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d116      	bne.n	80030ee <init_input+0x62>
        config.prs = IC_TIMER_REGISTER->PSC + 1;
 80030c0:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <init_input+0x6c>)
 80030c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	4b0d      	ldr	r3, [pc, #52]	; (80030fc <init_input+0x70>)
 80030c8:	609a      	str	r2, [r3, #8]
        config.calibzero = 900;//load eeprom
 80030ca:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <init_input+0x70>)
 80030cc:	22e1      	movs	r2, #225	; 0xe1
 80030ce:	0092      	lsls	r2, r2, #2
 80030d0:	801a      	strh	r2, [r3, #0]
        config.calibmax = 1900;
 80030d2:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <init_input+0x70>)
 80030d4:	4a0a      	ldr	r2, [pc, #40]	; (8003100 <init_input+0x74>)
 80030d6:	805a      	strh	r2, [r3, #2]
        config.ver = EEPROM_CONF_VERSION;
 80030d8:	4b08      	ldr	r3, [pc, #32]	; (80030fc <init_input+0x70>)
 80030da:	2201      	movs	r2, #1
 80030dc:	81da      	strh	r2, [r3, #14]
        config.direction = 0;
 80030de:	4b07      	ldr	r3, [pc, #28]	; (80030fc <init_input+0x70>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	735a      	strb	r2, [r3, #13]
        config.reverse = 0;
 80030e4:	4b05      	ldr	r3, [pc, #20]	; (80030fc <init_input+0x70>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	731a      	strb	r2, [r3, #12]
        eeprom_save();
 80030ea:	f7ff fdb9 	bl	8002c60 <eeprom_save>
    }
#endif

}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	20000058 	.word	0x20000058
 80030f8:	40000400 	.word	0x40000400
 80030fc:	20000174 	.word	0x20000174
 8003100:	0000076c 	.word	0x0000076c

08003104 <capture_callback>:


void capture_callback(void) {
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af02      	add	r7, sp, #8
    //detectInput();

    while(!signal.armed && signal.dmac==0);
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	4b50      	ldr	r3, [pc, #320]	; (8003250 <capture_callback+0x14c>)
 800310e:	795b      	ldrb	r3, [r3, #5]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d105      	bne.n	8003120 <capture_callback+0x1c>
 8003114:	4a4e      	ldr	r2, [pc, #312]	; (8003250 <capture_callback+0x14c>)
 8003116:	2386      	movs	r3, #134	; 0x86
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	5cd3      	ldrb	r3, [r2, r3]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0f5      	beq.n	800310c <capture_callback+0x8>
    if(signal.dmac==0)return;
 8003120:	4a4b      	ldr	r2, [pc, #300]	; (8003250 <capture_callback+0x14c>)
 8003122:	2386      	movs	r3, #134	; 0x86
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	5cd3      	ldrb	r3, [r2, r3]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d100      	bne.n	800312e <capture_callback+0x2a>
 800312c:	e08c      	b.n	8003248 <capture_callback+0x144>

    //uprintf("%d\n", signal.capture);

    uint32_t capture = (signal.capture);
 800312e:	4b48      	ldr	r3, [pc, #288]	; (8003250 <capture_callback+0x14c>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	607b      	str	r3, [r7, #4]

    if(signal.armed){
 8003134:	4b46      	ldr	r3, [pc, #280]	; (8003250 <capture_callback+0x14c>)
 8003136:	795b      	ldrb	r3, [r3, #5]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d024      	beq.n	8003186 <capture_callback+0x82>
        if(((capture) < config.calibmax)){
 800313c:	4b45      	ldr	r3, [pc, #276]	; (8003254 <capture_callback+0x150>)
 800313e:	885b      	ldrh	r3, [r3, #2]
 8003140:	001a      	movs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4293      	cmp	r3, r2
 8003146:	d300      	bcc.n	800314a <capture_callback+0x46>
 8003148:	e073      	b.n	8003232 <capture_callback+0x12e>
            signal.state = 1;
 800314a:	4b41      	ldr	r3, [pc, #260]	; (8003250 <capture_callback+0x14c>)
 800314c:	2201      	movs	r2, #1
 800314e:	711a      	strb	r2, [r3, #4]
            signal.pwm = MAP(capture, config.calibzero, config.calibmax, 0, 1990);
 8003150:	4b40      	ldr	r3, [pc, #256]	; (8003254 <capture_callback+0x150>)
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	0019      	movs	r1, r3
 8003156:	4b3f      	ldr	r3, [pc, #252]	; (8003254 <capture_callback+0x150>)
 8003158:	885b      	ldrh	r3, [r3, #2]
 800315a:	001a      	movs	r2, r3
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	4b3e      	ldr	r3, [pc, #248]	; (8003258 <capture_callback+0x154>)
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	2300      	movs	r3, #0
 8003164:	f7ff ff2a 	bl	8002fbc <MAP>
 8003168:	0002      	movs	r2, r0
 800316a:	4b39      	ldr	r3, [pc, #228]	; (8003250 <capture_callback+0x14c>)
 800316c:	601a      	str	r2, [r3, #0]
            signal.pwm = signal.pwm > 1990 ? 0 : signal.pwm;
 800316e:	4b38      	ldr	r3, [pc, #224]	; (8003250 <capture_callback+0x14c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a39      	ldr	r2, [pc, #228]	; (8003258 <capture_callback+0x154>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d802      	bhi.n	800317e <capture_callback+0x7a>
 8003178:	4b35      	ldr	r3, [pc, #212]	; (8003250 <capture_callback+0x14c>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	e000      	b.n	8003180 <capture_callback+0x7c>
 800317e:	2200      	movs	r2, #0
 8003180:	4b33      	ldr	r3, [pc, #204]	; (8003250 <capture_callback+0x14c>)
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	e055      	b.n	8003232 <capture_callback+0x12e>
        }
        //signal.pwm = signal.capture
    }else if(signal.is_calibrate){//manuel calibrate
 8003186:	4b32      	ldr	r3, [pc, #200]	; (8003250 <capture_callback+0x14c>)
 8003188:	799b      	ldrb	r3, [r3, #6]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d033      	beq.n	80031f6 <capture_callback+0xf2>

        signal.state = 2;
 800318e:	4b30      	ldr	r3, [pc, #192]	; (8003250 <capture_callback+0x14c>)
 8003190:	2202      	movs	r2, #2
 8003192:	711a      	strb	r2, [r3, #4]
        config.calibleft = (is_callibred(capture) ?  (config.calibleft + 1) : 0);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	0018      	movs	r0, r3
 8003198:	f7ff ff2e 	bl	8002ff8 <is_callibred>
 800319c:	1e03      	subs	r3, r0, #0
 800319e:	d004      	beq.n	80031aa <capture_callback+0xa6>
 80031a0:	4b2c      	ldr	r3, [pc, #176]	; (8003254 <capture_callback+0x150>)
 80031a2:	889b      	ldrh	r3, [r3, #4]
 80031a4:	3301      	adds	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	e000      	b.n	80031ac <capture_callback+0xa8>
 80031aa:	2200      	movs	r2, #0
 80031ac:	4b29      	ldr	r3, [pc, #164]	; (8003254 <capture_callback+0x150>)
 80031ae:	809a      	strh	r2, [r3, #4]
        if(config.calibleft > 75){
 80031b0:	4b28      	ldr	r3, [pc, #160]	; (8003254 <capture_callback+0x150>)
 80031b2:	889b      	ldrh	r3, [r3, #4]
 80031b4:	2b4b      	cmp	r3, #75	; 0x4b
 80031b6:	d908      	bls.n	80031ca <capture_callback+0xc6>
            //calibre is ok.
            signal.armed = 1;
 80031b8:	4b25      	ldr	r3, [pc, #148]	; (8003250 <capture_callback+0x14c>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	715a      	strb	r2, [r3, #5]
            signal.state = 4;
 80031be:	4b24      	ldr	r3, [pc, #144]	; (8003250 <capture_callback+0x14c>)
 80031c0:	2204      	movs	r2, #4
 80031c2:	711a      	strb	r2, [r3, #4]
#ifdef USE_EEPROM
            eeprom_save();
 80031c4:	f7ff fd4c 	bl	8002c60 <eeprom_save>
 80031c8:	e010      	b.n	80031ec <capture_callback+0xe8>
#endif
        }else if(led_timeout > 500){//500ms
 80031ca:	4b24      	ldr	r3, [pc, #144]	; (800325c <capture_callback+0x158>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	23fa      	movs	r3, #250	; 0xfa
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d90a      	bls.n	80031ec <capture_callback+0xe8>
            status_led_toggle();
 80031d6:	2380      	movs	r3, #128	; 0x80
 80031d8:	021a      	lsls	r2, r3, #8
 80031da:	2390      	movs	r3, #144	; 0x90
 80031dc:	05db      	lsls	r3, r3, #23
 80031de:	0011      	movs	r1, r2
 80031e0:	0018      	movs	r0, r3
 80031e2:	f7ff fed4 	bl	8002f8e <LL_GPIO_TogglePin>
            led_timeout = 0;
 80031e6:	4b1d      	ldr	r3, [pc, #116]	; (800325c <capture_callback+0x158>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
        }
        //if(millis_flag())led_timeout++;
        config.calibzero = capture;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	4b18      	ldr	r3, [pc, #96]	; (8003254 <capture_callback+0x150>)
 80031f2:	801a      	strh	r2, [r3, #0]
 80031f4:	e01d      	b.n	8003232 <capture_callback+0x12e>
        //uprintf("%d %d %d\n", capture, signal.capture, config.calibleft);
    }else{
        signal.state = 0;
 80031f6:	4b16      	ldr	r3, [pc, #88]	; (8003250 <capture_callback+0x14c>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	711a      	strb	r2, [r3, #4]
        if( capture > 1500){//rdy calibre
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a18      	ldr	r2, [pc, #96]	; (8003260 <capture_callback+0x15c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d90a      	bls.n	800321a <capture_callback+0x116>
            signal.state = 3;
 8003204:	4b12      	ldr	r3, [pc, #72]	; (8003250 <capture_callback+0x14c>)
 8003206:	2203      	movs	r2, #3
 8003208:	711a      	strb	r2, [r3, #4]
            signal.is_calibrate = 1;
 800320a:	4b11      	ldr	r3, [pc, #68]	; (8003250 <capture_callback+0x14c>)
 800320c:	2201      	movs	r2, #1
 800320e:	719a      	strb	r2, [r3, #6]
            config.calibmax = capture;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	b29a      	uxth	r2, r3
 8003214:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <capture_callback+0x150>)
 8003216:	805a      	strh	r2, [r3, #2]
 8003218:	e00b      	b.n	8003232 <capture_callback+0x12e>
        }else if(capture <= (config.calibzero)){//auto calibrate
 800321a:	4b0e      	ldr	r3, [pc, #56]	; (8003254 <capture_callback+0x150>)
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	001a      	movs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4293      	cmp	r3, r2
 8003224:	d805      	bhi.n	8003232 <capture_callback+0x12e>
            signal.armed = 1;
 8003226:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <capture_callback+0x14c>)
 8003228:	2201      	movs	r2, #1
 800322a:	715a      	strb	r2, [r3, #5]
            signal.state = 4;
 800322c:	4b08      	ldr	r3, [pc, #32]	; (8003250 <capture_callback+0x14c>)
 800322e:	2204      	movs	r2, #4
 8003230:	711a      	strb	r2, [r3, #4]
        }
    }


    signal.timout = 10;
 8003232:	4a07      	ldr	r2, [pc, #28]	; (8003250 <capture_callback+0x14c>)
 8003234:	238c      	movs	r3, #140	; 0x8c
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	210a      	movs	r1, #10
 800323a:	52d1      	strh	r1, [r2, r3]
    signal.dmac  = 0;
 800323c:	4a04      	ldr	r2, [pc, #16]	; (8003250 <capture_callback+0x14c>)
 800323e:	2386      	movs	r3, #134	; 0x86
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	2100      	movs	r1, #0
 8003244:	54d1      	strb	r1, [r2, r3]
 8003246:	e000      	b.n	800324a <capture_callback+0x146>
    if(signal.dmac==0)return;
 8003248:	46c0      	nop			; (mov r8, r8)

    //enable_ic();
    //receiveDshotDma();
}
 800324a:	46bd      	mov	sp, r7
 800324c:	b002      	add	sp, #8
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20000058 	.word	0x20000058
 8003254:	20000174 	.word	0x20000174
 8003258:	000007c6 	.word	0x000007c6
 800325c:	20000188 	.word	0x20000188
 8003260:	000005dc 	.word	0x000005dc

08003264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	0002      	movs	r2, r0
 800326c:	1dfb      	adds	r3, r7, #7
 800326e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003270:	1dfb      	adds	r3, r7, #7
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b7f      	cmp	r3, #127	; 0x7f
 8003276:	d809      	bhi.n	800328c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003278:	1dfb      	adds	r3, r7, #7
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	001a      	movs	r2, r3
 800327e:	231f      	movs	r3, #31
 8003280:	401a      	ands	r2, r3
 8003282:	4b04      	ldr	r3, [pc, #16]	; (8003294 <__NVIC_EnableIRQ+0x30>)
 8003284:	2101      	movs	r1, #1
 8003286:	4091      	lsls	r1, r2
 8003288:	000a      	movs	r2, r1
 800328a:	601a      	str	r2, [r3, #0]
  }
}
 800328c:	46c0      	nop			; (mov r8, r8)
 800328e:	46bd      	mov	sp, r7
 8003290:	b002      	add	sp, #8
 8003292:	bd80      	pop	{r7, pc}
 8003294:	e000e100 	.word	0xe000e100

08003298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003298:	b590      	push	{r4, r7, lr}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	0002      	movs	r2, r0
 80032a0:	6039      	str	r1, [r7, #0]
 80032a2:	1dfb      	adds	r3, r7, #7
 80032a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032a6:	1dfb      	adds	r3, r7, #7
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b7f      	cmp	r3, #127	; 0x7f
 80032ac:	d828      	bhi.n	8003300 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032ae:	4a2f      	ldr	r2, [pc, #188]	; (800336c <__NVIC_SetPriority+0xd4>)
 80032b0:	1dfb      	adds	r3, r7, #7
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	b25b      	sxtb	r3, r3
 80032b6:	089b      	lsrs	r3, r3, #2
 80032b8:	33c0      	adds	r3, #192	; 0xc0
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	589b      	ldr	r3, [r3, r2]
 80032be:	1dfa      	adds	r2, r7, #7
 80032c0:	7812      	ldrb	r2, [r2, #0]
 80032c2:	0011      	movs	r1, r2
 80032c4:	2203      	movs	r2, #3
 80032c6:	400a      	ands	r2, r1
 80032c8:	00d2      	lsls	r2, r2, #3
 80032ca:	21ff      	movs	r1, #255	; 0xff
 80032cc:	4091      	lsls	r1, r2
 80032ce:	000a      	movs	r2, r1
 80032d0:	43d2      	mvns	r2, r2
 80032d2:	401a      	ands	r2, r3
 80032d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	019b      	lsls	r3, r3, #6
 80032da:	22ff      	movs	r2, #255	; 0xff
 80032dc:	401a      	ands	r2, r3
 80032de:	1dfb      	adds	r3, r7, #7
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	0018      	movs	r0, r3
 80032e4:	2303      	movs	r3, #3
 80032e6:	4003      	ands	r3, r0
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032ec:	481f      	ldr	r0, [pc, #124]	; (800336c <__NVIC_SetPriority+0xd4>)
 80032ee:	1dfb      	adds	r3, r7, #7
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	b25b      	sxtb	r3, r3
 80032f4:	089b      	lsrs	r3, r3, #2
 80032f6:	430a      	orrs	r2, r1
 80032f8:	33c0      	adds	r3, #192	; 0xc0
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80032fe:	e031      	b.n	8003364 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003300:	4a1b      	ldr	r2, [pc, #108]	; (8003370 <__NVIC_SetPriority+0xd8>)
 8003302:	1dfb      	adds	r3, r7, #7
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	0019      	movs	r1, r3
 8003308:	230f      	movs	r3, #15
 800330a:	400b      	ands	r3, r1
 800330c:	3b08      	subs	r3, #8
 800330e:	089b      	lsrs	r3, r3, #2
 8003310:	3306      	adds	r3, #6
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	18d3      	adds	r3, r2, r3
 8003316:	3304      	adds	r3, #4
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	1dfa      	adds	r2, r7, #7
 800331c:	7812      	ldrb	r2, [r2, #0]
 800331e:	0011      	movs	r1, r2
 8003320:	2203      	movs	r2, #3
 8003322:	400a      	ands	r2, r1
 8003324:	00d2      	lsls	r2, r2, #3
 8003326:	21ff      	movs	r1, #255	; 0xff
 8003328:	4091      	lsls	r1, r2
 800332a:	000a      	movs	r2, r1
 800332c:	43d2      	mvns	r2, r2
 800332e:	401a      	ands	r2, r3
 8003330:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	019b      	lsls	r3, r3, #6
 8003336:	22ff      	movs	r2, #255	; 0xff
 8003338:	401a      	ands	r2, r3
 800333a:	1dfb      	adds	r3, r7, #7
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	0018      	movs	r0, r3
 8003340:	2303      	movs	r3, #3
 8003342:	4003      	ands	r3, r0
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003348:	4809      	ldr	r0, [pc, #36]	; (8003370 <__NVIC_SetPriority+0xd8>)
 800334a:	1dfb      	adds	r3, r7, #7
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	001c      	movs	r4, r3
 8003350:	230f      	movs	r3, #15
 8003352:	4023      	ands	r3, r4
 8003354:	3b08      	subs	r3, #8
 8003356:	089b      	lsrs	r3, r3, #2
 8003358:	430a      	orrs	r2, r1
 800335a:	3306      	adds	r3, #6
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	18c3      	adds	r3, r0, r3
 8003360:	3304      	adds	r3, #4
 8003362:	601a      	str	r2, [r3, #0]
}
 8003364:	46c0      	nop			; (mov r8, r8)
 8003366:	46bd      	mov	sp, r7
 8003368:	b003      	add	sp, #12
 800336a:	bd90      	pop	{r4, r7, pc}
 800336c:	e000e100 	.word	0xe000e100
 8003370:	e000ed00 	.word	0xe000ed00

08003374 <LL_ADC_DMA_GetRegAddr>:
  * @param  Register This parameter can be one of the following values:
  *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA
  * @retval ADC register address
  */
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument compilation warning */
  (void)Register;

  /* Retrieve address of register DR */
  return (uint32_t)&(ADCx->DR);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3340      	adds	r3, #64	; 0x40
}
 8003382:	0018      	movs	r0, r3
 8003384:	46bd      	mov	sp, r7
 8003386:	b002      	add	sp, #8
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <LL_ADC_SetCommonPathInternalCh>:
  *         
  *         (1) On STM32F0, parameter not available on all devices: all devices except STM32F030x6, STM32F030x8, STM32F030xC, STM32F070x6, STM32F070xB.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
#if defined(ADC_CCR_VBATEN)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a05      	ldr	r2, [pc, #20]	; (80033b0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800339c:	401a      	ands	r2, r3
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	601a      	str	r2, [r3, #0]
#endif
}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b002      	add	sp, #8
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	ff3fffff 	.word	0xff3fffff

080033b4 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	2207      	movs	r2, #7
 80033c4:	4393      	bics	r3, r2
 80033c6:	001a      	movs	r2, r3
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	615a      	str	r2, [r3, #20]
}
 80033d0:	46c0      	nop			; (mov r8, r8)
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b002      	add	sp, #8
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	2204      	movs	r2, #4
 80033e8:	4393      	bics	r3, r2
 80033ea:	001a      	movs	r2, r3
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	60da      	str	r2, [r3, #12]
}
 80033f4:	46c0      	nop			; (mov r8, r8)
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b002      	add	sp, #8
 80033fa:	bd80      	pop	{r7, pc}

080033fc <LL_ADC_REG_SetSequencerChannels>:
  *         
  *         (1) On STM32F0, parameter not available on all devices: all devices except STM32F030x6, STM32F030x8, STM32F030xC, STM32F070x6, STM32F070xB.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChannels(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	035b      	lsls	r3, r3, #13
 800340a:	0b5a      	lsrs	r2, r3, #13
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003410:	46c0      	nop			; (mov r8, r8)
 8003412:	46bd      	mov	sp, r7
 8003414:	b002      	add	sp, #8
 8003416:	bd80      	pop	{r7, pc}

08003418 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	4a04      	ldr	r2, [pc, #16]	; (8003438 <LL_ADC_Enable+0x20>)
 8003426:	4013      	ands	r3, r2
 8003428:	2201      	movs	r2, #1
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003430:	46c0      	nop			; (mov r8, r8)
 8003432:	46bd      	mov	sp, r7
 8003434:	b002      	add	sp, #8
 8003436:	bd80      	pop	{r7, pc}
 8003438:	7fffffe8 	.word	0x7fffffe8

0800343c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2201      	movs	r2, #1
 800344a:	4013      	ands	r3, r2
 800344c:	3b01      	subs	r3, #1
 800344e:	425a      	negs	r2, r3
 8003450:	4153      	adcs	r3, r2
 8003452:	b2db      	uxtb	r3, r3
}
 8003454:	0018      	movs	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	b002      	add	sp, #8
 800345a:	bd80      	pop	{r7, pc}

0800345c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	4a04      	ldr	r2, [pc, #16]	; (800347c <LL_ADC_REG_StartConversion+0x20>)
 800346a:	4013      	ands	r3, r2
 800346c:	2204      	movs	r2, #4
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003474:	46c0      	nop			; (mov r8, r8)
 8003476:	46bd      	mov	sp, r7
 8003478:	b002      	add	sp, #8
 800347a:	bd80      	pop	{r7, pc}
 800347c:	7fffffe8 	.word	0x7fffffe8

08003480 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	3b01      	subs	r3, #1
 800348e:	4a0a      	ldr	r2, [pc, #40]	; (80034b8 <LL_DMA_EnableChannel+0x38>)
 8003490:	5cd3      	ldrb	r3, [r2, r3]
 8003492:	001a      	movs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	18d3      	adds	r3, r2, r3
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	3b01      	subs	r3, #1
 800349e:	4906      	ldr	r1, [pc, #24]	; (80034b8 <LL_DMA_EnableChannel+0x38>)
 80034a0:	5ccb      	ldrb	r3, [r1, r3]
 80034a2:	0019      	movs	r1, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	18cb      	adds	r3, r1, r3
 80034a8:	2101      	movs	r1, #1
 80034aa:	430a      	orrs	r2, r1
 80034ac:	601a      	str	r2, [r3, #0]
}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b002      	add	sp, #8
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	08007434 	.word	0x08007434

080034bc <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	4a0b      	ldr	r2, [pc, #44]	; (80034fc <LL_DMA_SetDataTransferDirection+0x40>)
 80034ce:	5cd3      	ldrb	r3, [r2, r3]
 80034d0:	001a      	movs	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	18d3      	adds	r3, r2, r3
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a09      	ldr	r2, [pc, #36]	; (8003500 <LL_DMA_SetDataTransferDirection+0x44>)
 80034da:	4013      	ands	r3, r2
 80034dc:	0019      	movs	r1, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	3b01      	subs	r3, #1
 80034e2:	4a06      	ldr	r2, [pc, #24]	; (80034fc <LL_DMA_SetDataTransferDirection+0x40>)
 80034e4:	5cd3      	ldrb	r3, [r2, r3]
 80034e6:	001a      	movs	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	18d3      	adds	r3, r2, r3
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	46bd      	mov	sp, r7
 80034f6:	b004      	add	sp, #16
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	08007434 	.word	0x08007434
 8003500:	ffffbfef 	.word	0xffffbfef

08003504 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	3b01      	subs	r3, #1
 8003514:	4a0b      	ldr	r2, [pc, #44]	; (8003544 <LL_DMA_SetMode+0x40>)
 8003516:	5cd3      	ldrb	r3, [r2, r3]
 8003518:	001a      	movs	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	18d3      	adds	r3, r2, r3
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2220      	movs	r2, #32
 8003522:	4393      	bics	r3, r2
 8003524:	0019      	movs	r1, r3
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	3b01      	subs	r3, #1
 800352a:	4a06      	ldr	r2, [pc, #24]	; (8003544 <LL_DMA_SetMode+0x40>)
 800352c:	5cd3      	ldrb	r3, [r2, r3]
 800352e:	001a      	movs	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	18d3      	adds	r3, r2, r3
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	430a      	orrs	r2, r1
 8003538:	601a      	str	r2, [r3, #0]
             Mode);
}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	46bd      	mov	sp, r7
 800353e:	b004      	add	sp, #16
 8003540:	bd80      	pop	{r7, pc}
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	08007434 	.word	0x08007434

08003548 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	3b01      	subs	r3, #1
 8003558:	4a0b      	ldr	r2, [pc, #44]	; (8003588 <LL_DMA_SetPeriphIncMode+0x40>)
 800355a:	5cd3      	ldrb	r3, [r2, r3]
 800355c:	001a      	movs	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	18d3      	adds	r3, r2, r3
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2240      	movs	r2, #64	; 0x40
 8003566:	4393      	bics	r3, r2
 8003568:	0019      	movs	r1, r3
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	3b01      	subs	r3, #1
 800356e:	4a06      	ldr	r2, [pc, #24]	; (8003588 <LL_DMA_SetPeriphIncMode+0x40>)
 8003570:	5cd3      	ldrb	r3, [r2, r3]
 8003572:	001a      	movs	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	18d3      	adds	r3, r2, r3
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	430a      	orrs	r2, r1
 800357c:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	46bd      	mov	sp, r7
 8003582:	b004      	add	sp, #16
 8003584:	bd80      	pop	{r7, pc}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	08007434 	.word	0x08007434

0800358c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	3b01      	subs	r3, #1
 800359c:	4a0b      	ldr	r2, [pc, #44]	; (80035cc <LL_DMA_SetMemoryIncMode+0x40>)
 800359e:	5cd3      	ldrb	r3, [r2, r3]
 80035a0:	001a      	movs	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	18d3      	adds	r3, r2, r3
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2280      	movs	r2, #128	; 0x80
 80035aa:	4393      	bics	r3, r2
 80035ac:	0019      	movs	r1, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	4a06      	ldr	r2, [pc, #24]	; (80035cc <LL_DMA_SetMemoryIncMode+0x40>)
 80035b4:	5cd3      	ldrb	r3, [r2, r3]
 80035b6:	001a      	movs	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	18d3      	adds	r3, r2, r3
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	430a      	orrs	r2, r1
 80035c0:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	46bd      	mov	sp, r7
 80035c6:	b004      	add	sp, #16
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	08007434 	.word	0x08007434

080035d0 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	3b01      	subs	r3, #1
 80035e0:	4a0b      	ldr	r2, [pc, #44]	; (8003610 <LL_DMA_SetPeriphSize+0x40>)
 80035e2:	5cd3      	ldrb	r3, [r2, r3]
 80035e4:	001a      	movs	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	18d3      	adds	r3, r2, r3
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a09      	ldr	r2, [pc, #36]	; (8003614 <LL_DMA_SetPeriphSize+0x44>)
 80035ee:	4013      	ands	r3, r2
 80035f0:	0019      	movs	r1, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	3b01      	subs	r3, #1
 80035f6:	4a06      	ldr	r2, [pc, #24]	; (8003610 <LL_DMA_SetPeriphSize+0x40>)
 80035f8:	5cd3      	ldrb	r3, [r2, r3]
 80035fa:	001a      	movs	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	18d3      	adds	r3, r2, r3
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	430a      	orrs	r2, r1
 8003604:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	46bd      	mov	sp, r7
 800360a:	b004      	add	sp, #16
 800360c:	bd80      	pop	{r7, pc}
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	08007434 	.word	0x08007434
 8003614:	fffffcff 	.word	0xfffffcff

08003618 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	3b01      	subs	r3, #1
 8003628:	4a0b      	ldr	r2, [pc, #44]	; (8003658 <LL_DMA_SetMemorySize+0x40>)
 800362a:	5cd3      	ldrb	r3, [r2, r3]
 800362c:	001a      	movs	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	18d3      	adds	r3, r2, r3
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a09      	ldr	r2, [pc, #36]	; (800365c <LL_DMA_SetMemorySize+0x44>)
 8003636:	4013      	ands	r3, r2
 8003638:	0019      	movs	r1, r3
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	3b01      	subs	r3, #1
 800363e:	4a06      	ldr	r2, [pc, #24]	; (8003658 <LL_DMA_SetMemorySize+0x40>)
 8003640:	5cd3      	ldrb	r3, [r2, r3]
 8003642:	001a      	movs	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	18d3      	adds	r3, r2, r3
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	430a      	orrs	r2, r1
 800364c:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	46bd      	mov	sp, r7
 8003652:	b004      	add	sp, #16
 8003654:	bd80      	pop	{r7, pc}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	08007434 	.word	0x08007434
 800365c:	fffff3ff 	.word	0xfffff3ff

08003660 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	3b01      	subs	r3, #1
 8003670:	4a0b      	ldr	r2, [pc, #44]	; (80036a0 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8003672:	5cd3      	ldrb	r3, [r2, r3]
 8003674:	001a      	movs	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	18d3      	adds	r3, r2, r3
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a09      	ldr	r2, [pc, #36]	; (80036a4 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800367e:	4013      	ands	r3, r2
 8003680:	0019      	movs	r1, r3
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	3b01      	subs	r3, #1
 8003686:	4a06      	ldr	r2, [pc, #24]	; (80036a0 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8003688:	5cd3      	ldrb	r3, [r2, r3]
 800368a:	001a      	movs	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	18d3      	adds	r3, r2, r3
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	430a      	orrs	r2, r1
 8003694:	601a      	str	r2, [r3, #0]
             Priority);
}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	46bd      	mov	sp, r7
 800369a:	b004      	add	sp, #16
 800369c:	bd80      	pop	{r7, pc}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	08007434 	.word	0x08007434
 80036a4:	ffffcfff 	.word	0xffffcfff

080036a8 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	3b01      	subs	r3, #1
 80036b6:	4a0a      	ldr	r2, [pc, #40]	; (80036e0 <LL_DMA_EnableIT_TC+0x38>)
 80036b8:	5cd3      	ldrb	r3, [r2, r3]
 80036ba:	001a      	movs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	18d3      	adds	r3, r2, r3
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	3b01      	subs	r3, #1
 80036c6:	4906      	ldr	r1, [pc, #24]	; (80036e0 <LL_DMA_EnableIT_TC+0x38>)
 80036c8:	5ccb      	ldrb	r3, [r1, r3]
 80036ca:	0019      	movs	r1, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	18cb      	adds	r3, r1, r3
 80036d0:	2102      	movs	r1, #2
 80036d2:	430a      	orrs	r2, r1
 80036d4:	601a      	str	r2, [r3, #0]
}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	46bd      	mov	sp, r7
 80036da:	b002      	add	sp, #8
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	08007434 	.word	0x08007434

080036e4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80036e8:	4b04      	ldr	r3, [pc, #16]	; (80036fc <LL_RCC_HSI_Enable+0x18>)
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	4b03      	ldr	r3, [pc, #12]	; (80036fc <LL_RCC_HSI_Enable+0x18>)
 80036ee:	2101      	movs	r1, #1
 80036f0:	430a      	orrs	r2, r1
 80036f2:	601a      	str	r2, [r3, #0]
}
 80036f4:	46c0      	nop			; (mov r8, r8)
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	40021000 	.word	0x40021000

08003700 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8003704:	4b05      	ldr	r3, [pc, #20]	; (800371c <LL_RCC_HSI_IsReady+0x1c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2202      	movs	r2, #2
 800370a:	4013      	ands	r3, r2
 800370c:	3b02      	subs	r3, #2
 800370e:	425a      	negs	r2, r3
 8003710:	4153      	adcs	r3, r2
 8003712:	b2db      	uxtb	r3, r3
}
 8003714:	0018      	movs	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	40021000 	.word	0x40021000

08003720 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8003728:	4b06      	ldr	r3, [pc, #24]	; (8003744 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	22f8      	movs	r2, #248	; 0xf8
 800372e:	4393      	bics	r3, r2
 8003730:	0019      	movs	r1, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	00da      	lsls	r2, r3, #3
 8003736:	4b03      	ldr	r3, [pc, #12]	; (8003744 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8003738:	430a      	orrs	r2, r1
 800373a:	601a      	str	r2, [r3, #0]
}
 800373c:	46c0      	nop			; (mov r8, r8)
 800373e:	46bd      	mov	sp, r7
 8003740:	b002      	add	sp, #8
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40021000 	.word	0x40021000

08003748 <LL_RCC_HSI14_Enable>:
  * @brief  Enable HSI14
  * @rmtoll CR2          HSI14ON       LL_RCC_HSI14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_Enable(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR2, RCC_CR2_HSI14ON);
 800374c:	4b04      	ldr	r3, [pc, #16]	; (8003760 <LL_RCC_HSI14_Enable+0x18>)
 800374e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003750:	4b03      	ldr	r3, [pc, #12]	; (8003760 <LL_RCC_HSI14_Enable+0x18>)
 8003752:	2101      	movs	r1, #1
 8003754:	430a      	orrs	r2, r1
 8003756:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003758:	46c0      	nop			; (mov r8, r8)
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	40021000 	.word	0x40021000

08003764 <LL_RCC_HSI14_IsReady>:
  * @brief  Check if HSI14 oscillator Ready
  * @rmtoll CR2          HSI14RDY      LL_RCC_HSI14_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI14_IsReady(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR2, RCC_CR2_HSI14RDY) == (RCC_CR2_HSI14RDY));
 8003768:	4b05      	ldr	r3, [pc, #20]	; (8003780 <LL_RCC_HSI14_IsReady+0x1c>)
 800376a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376c:	2202      	movs	r2, #2
 800376e:	4013      	ands	r3, r2
 8003770:	3b02      	subs	r3, #2
 8003772:	425a      	negs	r2, r3
 8003774:	4153      	adcs	r3, r2
 8003776:	b2db      	uxtb	r3, r3
}
 8003778:	0018      	movs	r0, r3
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	40021000 	.word	0x40021000

08003784 <LL_RCC_HSI14_EnableADCControl>:
  * @brief  ADC interface can turn on the HSI14 oscillator
  * @rmtoll CR2          HSI14DIS      LL_RCC_HSI14_EnableADCControl
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_EnableADCControl(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR2, RCC_CR2_HSI14DIS);
 8003788:	4b04      	ldr	r3, [pc, #16]	; (800379c <LL_RCC_HSI14_EnableADCControl+0x18>)
 800378a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800378c:	4b03      	ldr	r3, [pc, #12]	; (800379c <LL_RCC_HSI14_EnableADCControl+0x18>)
 800378e:	2104      	movs	r1, #4
 8003790:	438a      	bics	r2, r1
 8003792:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003794:	46c0      	nop			; (mov r8, r8)
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	40021000 	.word	0x40021000

080037a0 <LL_RCC_HSI14_SetCalibTrimming>:
  * @rmtoll CR2          HSI14TRIM     LL_RCC_HSI14_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_SetCalibTrimming(uint32_t Value)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR2, RCC_CR2_HSI14TRIM, Value << RCC_POSITION_HSI14TRIM);
 80037a8:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <LL_RCC_HSI14_SetCalibTrimming+0x24>)
 80037aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ac:	22f8      	movs	r2, #248	; 0xf8
 80037ae:	4393      	bics	r3, r2
 80037b0:	0019      	movs	r1, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	00da      	lsls	r2, r3, #3
 80037b6:	4b03      	ldr	r3, [pc, #12]	; (80037c4 <LL_RCC_HSI14_SetCalibTrimming+0x24>)
 80037b8:	430a      	orrs	r2, r1
 80037ba:	635a      	str	r2, [r3, #52]	; 0x34
}
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	46bd      	mov	sp, r7
 80037c0:	b002      	add	sp, #8
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40021000 	.word	0x40021000

080037c8 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80037d0:	4b06      	ldr	r3, [pc, #24]	; (80037ec <LL_RCC_SetSysClkSource+0x24>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2203      	movs	r2, #3
 80037d6:	4393      	bics	r3, r2
 80037d8:	0019      	movs	r1, r3
 80037da:	4b04      	ldr	r3, [pc, #16]	; (80037ec <LL_RCC_SetSysClkSource+0x24>)
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	430a      	orrs	r2, r1
 80037e0:	605a      	str	r2, [r3, #4]
}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b002      	add	sp, #8
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	40021000 	.word	0x40021000

080037f0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80037f4:	4b03      	ldr	r3, [pc, #12]	; (8003804 <LL_RCC_GetSysClkSource+0x14>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	220c      	movs	r2, #12
 80037fa:	4013      	ands	r3, r2
}
 80037fc:	0018      	movs	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	40021000 	.word	0x40021000

08003808 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003810:	4b06      	ldr	r3, [pc, #24]	; (800382c <LL_RCC_SetAHBPrescaler+0x24>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	22f0      	movs	r2, #240	; 0xf0
 8003816:	4393      	bics	r3, r2
 8003818:	0019      	movs	r1, r3
 800381a:	4b04      	ldr	r3, [pc, #16]	; (800382c <LL_RCC_SetAHBPrescaler+0x24>)
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	430a      	orrs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]
}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	46bd      	mov	sp, r7
 8003826:	b002      	add	sp, #8
 8003828:	bd80      	pop	{r7, pc}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	40021000 	.word	0x40021000

08003830 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8003838:	4b06      	ldr	r3, [pc, #24]	; (8003854 <LL_RCC_SetAPB1Prescaler+0x24>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4a06      	ldr	r2, [pc, #24]	; (8003858 <LL_RCC_SetAPB1Prescaler+0x28>)
 800383e:	4013      	ands	r3, r2
 8003840:	0019      	movs	r1, r3
 8003842:	4b04      	ldr	r3, [pc, #16]	; (8003854 <LL_RCC_SetAPB1Prescaler+0x24>)
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	430a      	orrs	r2, r1
 8003848:	605a      	str	r2, [r3, #4]
}
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	46bd      	mov	sp, r7
 800384e:	b002      	add	sp, #8
 8003850:	bd80      	pop	{r7, pc}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	40021000 	.word	0x40021000
 8003858:	fffff8ff 	.word	0xfffff8ff

0800385c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003860:	4b04      	ldr	r3, [pc, #16]	; (8003874 <LL_RCC_PLL_Enable+0x18>)
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	4b03      	ldr	r3, [pc, #12]	; (8003874 <LL_RCC_PLL_Enable+0x18>)
 8003866:	2180      	movs	r1, #128	; 0x80
 8003868:	0449      	lsls	r1, r1, #17
 800386a:	430a      	orrs	r2, r1
 800386c:	601a      	str	r2, [r3, #0]
}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40021000 	.word	0x40021000

08003878 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800387c:	4b07      	ldr	r3, [pc, #28]	; (800389c <LL_RCC_PLL_IsReady+0x24>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	2380      	movs	r3, #128	; 0x80
 8003882:	049b      	lsls	r3, r3, #18
 8003884:	4013      	ands	r3, r2
 8003886:	22fe      	movs	r2, #254	; 0xfe
 8003888:	0612      	lsls	r2, r2, #24
 800388a:	4694      	mov	ip, r2
 800388c:	4463      	add	r3, ip
 800388e:	425a      	negs	r2, r3
 8003890:	4153      	adcs	r3, r2
 8003892:	b2db      	uxtb	r3, r3
}
 8003894:	0018      	movs	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	40021000 	.word	0x40021000

080038a0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 80038aa:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	4a0e      	ldr	r2, [pc, #56]	; (80038e8 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80038b0:	4013      	ands	r3, r2
 80038b2:	0019      	movs	r1, r3
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	2380      	movs	r3, #128	; 0x80
 80038b8:	025b      	lsls	r3, r3, #9
 80038ba:	401a      	ands	r2, r3
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	431a      	orrs	r2, r3
 80038c0:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80038c2:	430a      	orrs	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 80038c6:	4b07      	ldr	r3, [pc, #28]	; (80038e4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	220f      	movs	r2, #15
 80038cc:	4393      	bics	r3, r2
 80038ce:	0019      	movs	r1, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	220f      	movs	r2, #15
 80038d4:	401a      	ands	r2, r3
 80038d6:	4b03      	ldr	r3, [pc, #12]	; (80038e4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80038d8:	430a      	orrs	r2, r1
 80038da:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80038dc:	46c0      	nop			; (mov r8, r8)
 80038de:	46bd      	mov	sp, r7
 80038e0:	b002      	add	sp, #8
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40021000 	.word	0x40021000
 80038e8:	ffc2ffff 	.word	0xffc2ffff

080038ec <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80038f4:	4b07      	ldr	r3, [pc, #28]	; (8003914 <LL_AHB1_GRP1_EnableClock+0x28>)
 80038f6:	6959      	ldr	r1, [r3, #20]
 80038f8:	4b06      	ldr	r3, [pc, #24]	; (8003914 <LL_AHB1_GRP1_EnableClock+0x28>)
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003900:	4b04      	ldr	r3, [pc, #16]	; (8003914 <LL_AHB1_GRP1_EnableClock+0x28>)
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	4013      	ands	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800390a:	68fb      	ldr	r3, [r7, #12]
}
 800390c:	46c0      	nop			; (mov r8, r8)
 800390e:	46bd      	mov	sp, r7
 8003910:	b004      	add	sp, #16
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40021000 	.word	0x40021000

08003918 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8003920:	4b07      	ldr	r3, [pc, #28]	; (8003940 <LL_APB1_GRP1_EnableClock+0x28>)
 8003922:	69d9      	ldr	r1, [r3, #28]
 8003924:	4b06      	ldr	r3, [pc, #24]	; (8003940 <LL_APB1_GRP1_EnableClock+0x28>)
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	430a      	orrs	r2, r1
 800392a:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800392c:	4b04      	ldr	r3, [pc, #16]	; (8003940 <LL_APB1_GRP1_EnableClock+0x28>)
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	4013      	ands	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003936:	68fb      	ldr	r3, [r7, #12]
}
 8003938:	46c0      	nop			; (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b004      	add	sp, #16
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40021000 	.word	0x40021000

08003944 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800394c:	4b07      	ldr	r3, [pc, #28]	; (800396c <LL_APB1_GRP2_EnableClock+0x28>)
 800394e:	6999      	ldr	r1, [r3, #24]
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <LL_APB1_GRP2_EnableClock+0x28>)
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	430a      	orrs	r2, r1
 8003956:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003958:	4b04      	ldr	r3, [pc, #16]	; (800396c <LL_APB1_GRP2_EnableClock+0x28>)
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	4013      	ands	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003962:	68fb      	ldr	r3, [r7, #12]
}
 8003964:	46c0      	nop			; (mov r8, r8)
 8003966:	46bd      	mov	sp, r7
 8003968:	b004      	add	sp, #16
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40021000 	.word	0x40021000

08003970 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8003978:	4b06      	ldr	r3, [pc, #24]	; (8003994 <LL_FLASH_SetLatency+0x24>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2201      	movs	r2, #1
 800397e:	4393      	bics	r3, r2
 8003980:	0019      	movs	r1, r3
 8003982:	4b04      	ldr	r3, [pc, #16]	; (8003994 <LL_FLASH_SetLatency+0x24>)
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	430a      	orrs	r2, r1
 8003988:	601a      	str	r2, [r3, #0]
}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	46bd      	mov	sp, r7
 800398e:	b002      	add	sp, #8
 8003990:	bd80      	pop	{r7, pc}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	40022000 	.word	0x40022000

08003998 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800399c:	4b03      	ldr	r3, [pc, #12]	; (80039ac <LL_FLASH_GetLatency+0x14>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2201      	movs	r2, #1
 80039a2:	4013      	ands	r3, r2
}
 80039a4:	0018      	movs	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	40022000 	.word	0x40022000

080039b0 <LL_TIM_EnableARRPreload>:
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2280      	movs	r2, #128	; 0x80
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	601a      	str	r2, [r3, #0]
}
 80039c4:	46c0      	nop			; (mov r8, r8)
 80039c6:	46bd      	mov	sp, r7
 80039c8:	b002      	add	sp, #8
 80039ca:	bd80      	pop	{r7, pc}

080039cc <LL_TIM_DisableARRPreload>:
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2280      	movs	r2, #128	; 0x80
 80039da:	4393      	bics	r3, r2
 80039dc:	001a      	movs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	601a      	str	r2, [r3, #0]
}
 80039e2:	46c0      	nop			; (mov r8, r8)
 80039e4:	46bd      	mov	sp, r7
 80039e6:	b002      	add	sp, #8
 80039e8:	bd80      	pop	{r7, pc}
	...

080039ec <LL_TIM_OC_DisableFast>:
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d01e      	beq.n	8003a3a <LL_TIM_OC_DisableFast+0x4e>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d019      	beq.n	8003a36 <LL_TIM_OC_DisableFast+0x4a>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b10      	cmp	r3, #16
 8003a06:	d014      	beq.n	8003a32 <LL_TIM_OC_DisableFast+0x46>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	2b40      	cmp	r3, #64	; 0x40
 8003a0c:	d00f      	beq.n	8003a2e <LL_TIM_OC_DisableFast+0x42>
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	2380      	movs	r3, #128	; 0x80
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d008      	beq.n	8003a2a <LL_TIM_OC_DisableFast+0x3e>
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	2380      	movs	r3, #128	; 0x80
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d101      	bne.n	8003a26 <LL_TIM_OC_DisableFast+0x3a>
 8003a22:	2305      	movs	r3, #5
 8003a24:	e00a      	b.n	8003a3c <LL_TIM_OC_DisableFast+0x50>
 8003a26:	2306      	movs	r3, #6
 8003a28:	e008      	b.n	8003a3c <LL_TIM_OC_DisableFast+0x50>
 8003a2a:	2304      	movs	r3, #4
 8003a2c:	e006      	b.n	8003a3c <LL_TIM_OC_DisableFast+0x50>
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e004      	b.n	8003a3c <LL_TIM_OC_DisableFast+0x50>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e002      	b.n	8003a3c <LL_TIM_OC_DisableFast+0x50>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <LL_TIM_OC_DisableFast+0x50>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	200f      	movs	r0, #15
 8003a3e:	183a      	adds	r2, r7, r0
 8003a40:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3318      	adds	r3, #24
 8003a46:	0019      	movs	r1, r3
 8003a48:	183b      	adds	r3, r7, r0
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	4a0a      	ldr	r2, [pc, #40]	; (8003a78 <LL_TIM_OC_DisableFast+0x8c>)
 8003a4e:	5cd3      	ldrb	r3, [r2, r3]
 8003a50:	18cb      	adds	r3, r1, r3
 8003a52:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	183a      	adds	r2, r7, r0
 8003a5a:	7812      	ldrb	r2, [r2, #0]
 8003a5c:	4907      	ldr	r1, [pc, #28]	; (8003a7c <LL_TIM_OC_DisableFast+0x90>)
 8003a5e:	5c8a      	ldrb	r2, [r1, r2]
 8003a60:	0011      	movs	r1, r2
 8003a62:	2204      	movs	r2, #4
 8003a64:	408a      	lsls	r2, r1
 8003a66:	43d2      	mvns	r2, r2
 8003a68:	401a      	ands	r2, r3
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	601a      	str	r2, [r3, #0]
}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	46bd      	mov	sp, r7
 8003a72:	b004      	add	sp, #16
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	0800743c 	.word	0x0800743c
 8003a7c:	08007444 	.word	0x08007444

08003a80 <LL_TIM_OC_EnablePreload>:
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d01e      	beq.n	8003ace <LL_TIM_OC_EnablePreload+0x4e>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d019      	beq.n	8003aca <LL_TIM_OC_EnablePreload+0x4a>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b10      	cmp	r3, #16
 8003a9a:	d014      	beq.n	8003ac6 <LL_TIM_OC_EnablePreload+0x46>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	2b40      	cmp	r3, #64	; 0x40
 8003aa0:	d00f      	beq.n	8003ac2 <LL_TIM_OC_EnablePreload+0x42>
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	2380      	movs	r3, #128	; 0x80
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d008      	beq.n	8003abe <LL_TIM_OC_EnablePreload+0x3e>
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	2380      	movs	r3, #128	; 0x80
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d101      	bne.n	8003aba <LL_TIM_OC_EnablePreload+0x3a>
 8003ab6:	2305      	movs	r3, #5
 8003ab8:	e00a      	b.n	8003ad0 <LL_TIM_OC_EnablePreload+0x50>
 8003aba:	2306      	movs	r3, #6
 8003abc:	e008      	b.n	8003ad0 <LL_TIM_OC_EnablePreload+0x50>
 8003abe:	2304      	movs	r3, #4
 8003ac0:	e006      	b.n	8003ad0 <LL_TIM_OC_EnablePreload+0x50>
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e004      	b.n	8003ad0 <LL_TIM_OC_EnablePreload+0x50>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e002      	b.n	8003ad0 <LL_TIM_OC_EnablePreload+0x50>
 8003aca:	2301      	movs	r3, #1
 8003acc:	e000      	b.n	8003ad0 <LL_TIM_OC_EnablePreload+0x50>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	200f      	movs	r0, #15
 8003ad2:	183a      	adds	r2, r7, r0
 8003ad4:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	3318      	adds	r3, #24
 8003ada:	0019      	movs	r1, r3
 8003adc:	183b      	adds	r3, r7, r0
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	4a09      	ldr	r2, [pc, #36]	; (8003b08 <LL_TIM_OC_EnablePreload+0x88>)
 8003ae2:	5cd3      	ldrb	r3, [r2, r3]
 8003ae4:	18cb      	adds	r3, r1, r3
 8003ae6:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	183b      	adds	r3, r7, r0
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	4906      	ldr	r1, [pc, #24]	; (8003b0c <LL_TIM_OC_EnablePreload+0x8c>)
 8003af2:	5ccb      	ldrb	r3, [r1, r3]
 8003af4:	0019      	movs	r1, r3
 8003af6:	2308      	movs	r3, #8
 8003af8:	408b      	lsls	r3, r1
 8003afa:	431a      	orrs	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	601a      	str	r2, [r3, #0]
}
 8003b00:	46c0      	nop			; (mov r8, r8)
 8003b02:	46bd      	mov	sp, r7
 8003b04:	b004      	add	sp, #16
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	0800743c 	.word	0x0800743c
 8003b0c:	08007444 	.word	0x08007444

08003b10 <LL_TIM_IC_SetActiveInput>:
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d01e      	beq.n	8003b60 <LL_TIM_IC_SetActiveInput+0x50>
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d019      	beq.n	8003b5c <LL_TIM_IC_SetActiveInput+0x4c>
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2b10      	cmp	r3, #16
 8003b2c:	d014      	beq.n	8003b58 <LL_TIM_IC_SetActiveInput+0x48>
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2b40      	cmp	r3, #64	; 0x40
 8003b32:	d00f      	beq.n	8003b54 <LL_TIM_IC_SetActiveInput+0x44>
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	2380      	movs	r3, #128	; 0x80
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d008      	beq.n	8003b50 <LL_TIM_IC_SetActiveInput+0x40>
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	2380      	movs	r3, #128	; 0x80
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d101      	bne.n	8003b4c <LL_TIM_IC_SetActiveInput+0x3c>
 8003b48:	2305      	movs	r3, #5
 8003b4a:	e00a      	b.n	8003b62 <LL_TIM_IC_SetActiveInput+0x52>
 8003b4c:	2306      	movs	r3, #6
 8003b4e:	e008      	b.n	8003b62 <LL_TIM_IC_SetActiveInput+0x52>
 8003b50:	2304      	movs	r3, #4
 8003b52:	e006      	b.n	8003b62 <LL_TIM_IC_SetActiveInput+0x52>
 8003b54:	2303      	movs	r3, #3
 8003b56:	e004      	b.n	8003b62 <LL_TIM_IC_SetActiveInput+0x52>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e002      	b.n	8003b62 <LL_TIM_IC_SetActiveInput+0x52>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <LL_TIM_IC_SetActiveInput+0x52>
 8003b60:	2300      	movs	r3, #0
 8003b62:	2017      	movs	r0, #23
 8003b64:	183a      	adds	r2, r7, r0
 8003b66:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	3318      	adds	r3, #24
 8003b6c:	0019      	movs	r1, r3
 8003b6e:	183b      	adds	r3, r7, r0
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	4a0e      	ldr	r2, [pc, #56]	; (8003bac <LL_TIM_IC_SetActiveInput+0x9c>)
 8003b74:	5cd3      	ldrb	r3, [r2, r3]
 8003b76:	18cb      	adds	r3, r1, r3
 8003b78:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	183a      	adds	r2, r7, r0
 8003b80:	7812      	ldrb	r2, [r2, #0]
 8003b82:	490b      	ldr	r1, [pc, #44]	; (8003bb0 <LL_TIM_IC_SetActiveInput+0xa0>)
 8003b84:	5c8a      	ldrb	r2, [r1, r2]
 8003b86:	0011      	movs	r1, r2
 8003b88:	2203      	movs	r2, #3
 8003b8a:	408a      	lsls	r2, r1
 8003b8c:	43d2      	mvns	r2, r2
 8003b8e:	401a      	ands	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	0c1b      	lsrs	r3, r3, #16
 8003b94:	1839      	adds	r1, r7, r0
 8003b96:	7809      	ldrb	r1, [r1, #0]
 8003b98:	4805      	ldr	r0, [pc, #20]	; (8003bb0 <LL_TIM_IC_SetActiveInput+0xa0>)
 8003b9a:	5c41      	ldrb	r1, [r0, r1]
 8003b9c:	408b      	lsls	r3, r1
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	601a      	str	r2, [r3, #0]
}
 8003ba4:	46c0      	nop			; (mov r8, r8)
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	b006      	add	sp, #24
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	0800743c 	.word	0x0800743c
 8003bb0:	0800744c 	.word	0x0800744c

08003bb4 <LL_TIM_IC_SetPrescaler>:
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d01e      	beq.n	8003c04 <LL_TIM_IC_SetPrescaler+0x50>
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d019      	beq.n	8003c00 <LL_TIM_IC_SetPrescaler+0x4c>
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	2b10      	cmp	r3, #16
 8003bd0:	d014      	beq.n	8003bfc <LL_TIM_IC_SetPrescaler+0x48>
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b40      	cmp	r3, #64	; 0x40
 8003bd6:	d00f      	beq.n	8003bf8 <LL_TIM_IC_SetPrescaler+0x44>
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	2380      	movs	r3, #128	; 0x80
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d008      	beq.n	8003bf4 <LL_TIM_IC_SetPrescaler+0x40>
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	2380      	movs	r3, #128	; 0x80
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d101      	bne.n	8003bf0 <LL_TIM_IC_SetPrescaler+0x3c>
 8003bec:	2305      	movs	r3, #5
 8003bee:	e00a      	b.n	8003c06 <LL_TIM_IC_SetPrescaler+0x52>
 8003bf0:	2306      	movs	r3, #6
 8003bf2:	e008      	b.n	8003c06 <LL_TIM_IC_SetPrescaler+0x52>
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	e006      	b.n	8003c06 <LL_TIM_IC_SetPrescaler+0x52>
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e004      	b.n	8003c06 <LL_TIM_IC_SetPrescaler+0x52>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e002      	b.n	8003c06 <LL_TIM_IC_SetPrescaler+0x52>
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <LL_TIM_IC_SetPrescaler+0x52>
 8003c04:	2300      	movs	r3, #0
 8003c06:	2017      	movs	r0, #23
 8003c08:	183a      	adds	r2, r7, r0
 8003c0a:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	3318      	adds	r3, #24
 8003c10:	0019      	movs	r1, r3
 8003c12:	183b      	adds	r3, r7, r0
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	4a0e      	ldr	r2, [pc, #56]	; (8003c50 <LL_TIM_IC_SetPrescaler+0x9c>)
 8003c18:	5cd3      	ldrb	r3, [r2, r3]
 8003c1a:	18cb      	adds	r3, r1, r3
 8003c1c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	183a      	adds	r2, r7, r0
 8003c24:	7812      	ldrb	r2, [r2, #0]
 8003c26:	490b      	ldr	r1, [pc, #44]	; (8003c54 <LL_TIM_IC_SetPrescaler+0xa0>)
 8003c28:	5c8a      	ldrb	r2, [r1, r2]
 8003c2a:	0011      	movs	r1, r2
 8003c2c:	220c      	movs	r2, #12
 8003c2e:	408a      	lsls	r2, r1
 8003c30:	43d2      	mvns	r2, r2
 8003c32:	401a      	ands	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	0c1b      	lsrs	r3, r3, #16
 8003c38:	1839      	adds	r1, r7, r0
 8003c3a:	7809      	ldrb	r1, [r1, #0]
 8003c3c:	4805      	ldr	r0, [pc, #20]	; (8003c54 <LL_TIM_IC_SetPrescaler+0xa0>)
 8003c3e:	5c41      	ldrb	r1, [r0, r1]
 8003c40:	408b      	lsls	r3, r1
 8003c42:	431a      	orrs	r2, r3
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	601a      	str	r2, [r3, #0]
}
 8003c48:	46c0      	nop			; (mov r8, r8)
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	b006      	add	sp, #24
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	0800743c 	.word	0x0800743c
 8003c54:	0800744c 	.word	0x0800744c

08003c58 <LL_TIM_IC_SetFilter>:
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d01e      	beq.n	8003ca8 <LL_TIM_IC_SetFilter+0x50>
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b04      	cmp	r3, #4
 8003c6e:	d019      	beq.n	8003ca4 <LL_TIM_IC_SetFilter+0x4c>
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b10      	cmp	r3, #16
 8003c74:	d014      	beq.n	8003ca0 <LL_TIM_IC_SetFilter+0x48>
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2b40      	cmp	r3, #64	; 0x40
 8003c7a:	d00f      	beq.n	8003c9c <LL_TIM_IC_SetFilter+0x44>
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	2380      	movs	r3, #128	; 0x80
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d008      	beq.n	8003c98 <LL_TIM_IC_SetFilter+0x40>
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	2380      	movs	r3, #128	; 0x80
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d101      	bne.n	8003c94 <LL_TIM_IC_SetFilter+0x3c>
 8003c90:	2305      	movs	r3, #5
 8003c92:	e00a      	b.n	8003caa <LL_TIM_IC_SetFilter+0x52>
 8003c94:	2306      	movs	r3, #6
 8003c96:	e008      	b.n	8003caa <LL_TIM_IC_SetFilter+0x52>
 8003c98:	2304      	movs	r3, #4
 8003c9a:	e006      	b.n	8003caa <LL_TIM_IC_SetFilter+0x52>
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e004      	b.n	8003caa <LL_TIM_IC_SetFilter+0x52>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e002      	b.n	8003caa <LL_TIM_IC_SetFilter+0x52>
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e000      	b.n	8003caa <LL_TIM_IC_SetFilter+0x52>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	2017      	movs	r0, #23
 8003cac:	183a      	adds	r2, r7, r0
 8003cae:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	3318      	adds	r3, #24
 8003cb4:	0019      	movs	r1, r3
 8003cb6:	183b      	adds	r3, r7, r0
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	4a0e      	ldr	r2, [pc, #56]	; (8003cf4 <LL_TIM_IC_SetFilter+0x9c>)
 8003cbc:	5cd3      	ldrb	r3, [r2, r3]
 8003cbe:	18cb      	adds	r3, r1, r3
 8003cc0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	183a      	adds	r2, r7, r0
 8003cc8:	7812      	ldrb	r2, [r2, #0]
 8003cca:	490b      	ldr	r1, [pc, #44]	; (8003cf8 <LL_TIM_IC_SetFilter+0xa0>)
 8003ccc:	5c8a      	ldrb	r2, [r1, r2]
 8003cce:	0011      	movs	r1, r2
 8003cd0:	22f0      	movs	r2, #240	; 0xf0
 8003cd2:	408a      	lsls	r2, r1
 8003cd4:	43d2      	mvns	r2, r2
 8003cd6:	401a      	ands	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	0c1b      	lsrs	r3, r3, #16
 8003cdc:	1839      	adds	r1, r7, r0
 8003cde:	7809      	ldrb	r1, [r1, #0]
 8003ce0:	4805      	ldr	r0, [pc, #20]	; (8003cf8 <LL_TIM_IC_SetFilter+0xa0>)
 8003ce2:	5c41      	ldrb	r1, [r0, r1]
 8003ce4:	408b      	lsls	r3, r1
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	601a      	str	r2, [r3, #0]
}
 8003cec:	46c0      	nop			; (mov r8, r8)
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b006      	add	sp, #24
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	0800743c 	.word	0x0800743c
 8003cf8:	0800744c 	.word	0x0800744c

08003cfc <LL_TIM_IC_SetPolarity>:
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d01e      	beq.n	8003d4c <LL_TIM_IC_SetPolarity+0x50>
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d019      	beq.n	8003d48 <LL_TIM_IC_SetPolarity+0x4c>
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2b10      	cmp	r3, #16
 8003d18:	d014      	beq.n	8003d44 <LL_TIM_IC_SetPolarity+0x48>
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2b40      	cmp	r3, #64	; 0x40
 8003d1e:	d00f      	beq.n	8003d40 <LL_TIM_IC_SetPolarity+0x44>
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	2380      	movs	r3, #128	; 0x80
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d008      	beq.n	8003d3c <LL_TIM_IC_SetPolarity+0x40>
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	2380      	movs	r3, #128	; 0x80
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d101      	bne.n	8003d38 <LL_TIM_IC_SetPolarity+0x3c>
 8003d34:	2305      	movs	r3, #5
 8003d36:	e00a      	b.n	8003d4e <LL_TIM_IC_SetPolarity+0x52>
 8003d38:	2306      	movs	r3, #6
 8003d3a:	e008      	b.n	8003d4e <LL_TIM_IC_SetPolarity+0x52>
 8003d3c:	2304      	movs	r3, #4
 8003d3e:	e006      	b.n	8003d4e <LL_TIM_IC_SetPolarity+0x52>
 8003d40:	2303      	movs	r3, #3
 8003d42:	e004      	b.n	8003d4e <LL_TIM_IC_SetPolarity+0x52>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e002      	b.n	8003d4e <LL_TIM_IC_SetPolarity+0x52>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e000      	b.n	8003d4e <LL_TIM_IC_SetPolarity+0x52>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	2017      	movs	r0, #23
 8003d50:	183a      	adds	r2, r7, r0
 8003d52:	7013      	strb	r3, [r2, #0]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	183a      	adds	r2, r7, r0
 8003d5a:	7812      	ldrb	r2, [r2, #0]
 8003d5c:	490a      	ldr	r1, [pc, #40]	; (8003d88 <LL_TIM_IC_SetPolarity+0x8c>)
 8003d5e:	5c8a      	ldrb	r2, [r1, r2]
 8003d60:	0011      	movs	r1, r2
 8003d62:	220a      	movs	r2, #10
 8003d64:	408a      	lsls	r2, r1
 8003d66:	43d2      	mvns	r2, r2
 8003d68:	401a      	ands	r2, r3
 8003d6a:	183b      	adds	r3, r7, r0
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	4906      	ldr	r1, [pc, #24]	; (8003d88 <LL_TIM_IC_SetPolarity+0x8c>)
 8003d70:	5ccb      	ldrb	r3, [r1, r3]
 8003d72:	0019      	movs	r1, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	408b      	lsls	r3, r1
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	621a      	str	r2, [r3, #32]
}
 8003d7e:	46c0      	nop			; (mov r8, r8)
 8003d80:	46bd      	mov	sp, r7
 8003d82:	b006      	add	sp, #24
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	08007454 	.word	0x08007454

08003d8c <LL_TIM_SetClockSource>:
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	4a05      	ldr	r2, [pc, #20]	; (8003db0 <LL_TIM_SetClockSource+0x24>)
 8003d9c:	401a      	ands	r2, r3
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	431a      	orrs	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	609a      	str	r2, [r3, #8]
}
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	46bd      	mov	sp, r7
 8003daa:	b002      	add	sp, #8
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	ffffbff8 	.word	0xffffbff8

08003db4 <LL_TIM_SetTriggerOutput>:
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2270      	movs	r2, #112	; 0x70
 8003dc4:	4393      	bics	r3, r2
 8003dc6:	001a      	movs	r2, r3
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	605a      	str	r2, [r3, #4]
}
 8003dd0:	46c0      	nop			; (mov r8, r8)
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b002      	add	sp, #8
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <LL_TIM_DisableMasterSlaveMode>:
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2280      	movs	r2, #128	; 0x80
 8003de6:	4393      	bics	r3, r2
 8003de8:	001a      	movs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	609a      	str	r2, [r3, #8]
}
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	46bd      	mov	sp, r7
 8003df2:	b002      	add	sp, #8
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b082      	sub	sp, #8
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2201      	movs	r2, #1
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	601a      	str	r2, [r3, #0]
}
 8003e0a:	46c0      	nop			; (mov r8, r8)
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	b002      	add	sp, #8
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  - SCEN (if Smartcard feature is supported), IREN (if Irda feature is supported) and HDSEL bits in the USART_CR3 register.
  */
#if defined(USART_LIN_SUPPORT)
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	4a07      	ldr	r2, [pc, #28]	; (8003e40 <LL_USART_ConfigAsyncMode+0x2c>)
 8003e22:	401a      	ands	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	605a      	str	r2, [r3, #4]
#endif /* USART_IRDA_SUPPORT */
#else
#if defined(USART_IRDA_SUPPORT)
  CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
#else
  CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2208      	movs	r2, #8
 8003e2e:	4393      	bics	r3, r2
 8003e30:	001a      	movs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	609a      	str	r2, [r3, #8]
#endif /* USART_IRDA_SUPPORT */
#endif /* USART_SMARTCARD_SUPPORT */
}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b002      	add	sp, #8
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	fffff7ff 	.word	0xfffff7ff

08003e44 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e50:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e52:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8003e54:	617b      	str	r3, [r7, #20]
 8003e56:	2301      	movs	r3, #1
 8003e58:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f383 8810 	msr	PRIMASK, r3
}
 8003e60:	46c0      	nop			; (mov r8, r8)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	4a07      	ldr	r2, [pc, #28]	; (8003e84 <LL_USART_DisableIT_CTS+0x40>)
 8003e68:	401a      	ands	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	609a      	str	r2, [r3, #8]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f383 8810 	msr	PRIMASK, r3
}
 8003e78:	46c0      	nop			; (mov r8, r8)
}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b006      	add	sp, #24
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	fffffbff 	.word	0xfffffbff

08003e88 <LL_GPIO_SetPinPull>:
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	68d9      	ldr	r1, [r3, #12]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	435b      	muls	r3, r3
 8003e9c:	001a      	movs	r2, r3
 8003e9e:	0013      	movs	r3, r2
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	189b      	adds	r3, r3, r2
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	400b      	ands	r3, r1
 8003ea8:	001a      	movs	r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	435b      	muls	r3, r3
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	434b      	muls	r3, r1
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	60da      	str	r2, [r3, #12]
}
 8003eb8:	46c0      	nop			; (mov r8, r8)
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	b004      	add	sp, #16
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <LL_GPIO_SetOutputPin>:
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	619a      	str	r2, [r3, #24]
}
 8003ed0:	46c0      	nop			; (mov r8, r8)
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b002      	add	sp, #8
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <LL_GPIO_ResetOutputPin>:
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ee8:	46c0      	nop			; (mov r8, r8)
 8003eea:	46bd      	mov	sp, r7
 8003eec:	b002      	add	sp, #8
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <io_init>:
static void MX_TIM16_Init(void);
static void MX_TIM17_Init(void);

volatile uint16_t adcValues[ADCBUFSIZE];

void io_init(void){
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 8003ef4:	2001      	movs	r0, #1
 8003ef6:	f7ff fd25 	bl	8003944 <LL_APB1_GRP2_EnableClock>
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8003efa:	2380      	movs	r3, #128	; 0x80
 8003efc:	055b      	lsls	r3, r3, #21
 8003efe:	0018      	movs	r0, r3
 8003f00:	f7ff fd0a 	bl	8003918 <LL_APB1_GRP1_EnableClock>

    /* SysTick_IRQn interrupt configuration */
    NVIC_SetPriority(SysTick_IRQn, 3);
 8003f04:	2301      	movs	r3, #1
 8003f06:	425b      	negs	r3, r3
 8003f08:	2103      	movs	r1, #3
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f7ff f9c4 	bl	8003298 <__NVIC_SetPriority>
    SystemClock_Config();
 8003f10:	f000 f816 	bl	8003f40 <SystemClock_Config>

    MX_GPIO_Init();
 8003f14:	f000 fc66 	bl	80047e4 <MX_GPIO_Init>

    MX_DMA_Init();
 8003f18:	f000 fc4e 	bl	80047b8 <MX_DMA_Init>
    MX_ADC_Init();
 8003f1c:	f000 fcf4 	bl	8004908 <MX_ADC_Init>
    MX_TIM1_Init();
 8003f20:	f000 f85c 	bl	8003fdc <MX_TIM1_Init>
    MX_TIM3_Init();
 8003f24:	f000 fa42 	bl	80043ac <MX_TIM3_Init>
    MX_TIM14_Init();
 8003f28:	f000 faf0 	bl	800450c <MX_TIM14_Init>
    MX_TIM16_Init();
 8003f2c:	f000 fb44 	bl	80045b8 <MX_TIM16_Init>
    MX_TIM17_Init();
 8003f30:	f000 fb92 	bl	8004658 <MX_TIM17_Init>
    MX_USART1_UART_Init();
 8003f34:	f000 fbc2 	bl	80046bc <MX_USART1_UART_Init>
}
 8003f38:	46c0      	nop			; (mov r8, r8)
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <SystemClock_Config>:
    while(INTERVAL_TIM->CNT < us);
}


void SystemClock_Config(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
    LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8003f44:	2001      	movs	r0, #1
 8003f46:	f7ff fd13 	bl	8003970 <LL_FLASH_SetLatency>
    while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	f7ff fd24 	bl	8003998 <LL_FLASH_GetLatency>
 8003f50:	0003      	movs	r3, r0
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d1fa      	bne.n	8003f4c <SystemClock_Config+0xc>
    {
    }
    LL_RCC_HSI_Enable();
 8003f56:	f7ff fbc5 	bl	80036e4 <LL_RCC_HSI_Enable>

     /* Wait till HSI is ready */
    while(LL_RCC_HSI_IsReady() != 1)
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	f7ff fbd0 	bl	8003700 <LL_RCC_HSI_IsReady>
 8003f60:	0003      	movs	r3, r0
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d1fa      	bne.n	8003f5c <SystemClock_Config+0x1c>
    {

    }
    LL_RCC_HSI_SetCalibTrimming(16);
 8003f66:	2010      	movs	r0, #16
 8003f68:	f7ff fbda 	bl	8003720 <LL_RCC_HSI_SetCalibTrimming>
    LL_RCC_HSI14_Enable();
 8003f6c:	f7ff fbec 	bl	8003748 <LL_RCC_HSI14_Enable>

     /* Wait till HSI14 is ready */
    while(LL_RCC_HSI14_IsReady() != 1)
 8003f70:	46c0      	nop			; (mov r8, r8)
 8003f72:	f7ff fbf7 	bl	8003764 <LL_RCC_HSI14_IsReady>
 8003f76:	0003      	movs	r3, r0
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d1fa      	bne.n	8003f72 <SystemClock_Config+0x32>
    {

    }
    LL_RCC_HSI14_SetCalibTrimming(16);
 8003f7c:	2010      	movs	r0, #16
 8003f7e:	f7ff fc0f 	bl	80037a0 <LL_RCC_HSI14_SetCalibTrimming>
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_12);
 8003f82:	23a0      	movs	r3, #160	; 0xa0
 8003f84:	039b      	lsls	r3, r3, #14
 8003f86:	0019      	movs	r1, r3
 8003f88:	2000      	movs	r0, #0
 8003f8a:	f7ff fc89 	bl	80038a0 <LL_RCC_PLL_ConfigDomain_SYS>
    LL_RCC_PLL_Enable();
 8003f8e:	f7ff fc65 	bl	800385c <LL_RCC_PLL_Enable>

     /* Wait till PLL is ready */
    while(LL_RCC_PLL_IsReady() != 1)
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	f7ff fc70 	bl	8003878 <LL_RCC_PLL_IsReady>
 8003f98:	0003      	movs	r3, r0
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d1fa      	bne.n	8003f94 <SystemClock_Config+0x54>
    {

    }
    LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	f7ff fc32 	bl	8003808 <LL_RCC_SetAHBPrescaler>
    LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	f7ff fc43 	bl	8003830 <LL_RCC_SetAPB1Prescaler>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8003faa:	2002      	movs	r0, #2
 8003fac:	f7ff fc0c 	bl	80037c8 <LL_RCC_SetSysClkSource>

     /* Wait till System clock is ready */
    while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003fb0:	46c0      	nop			; (mov r8, r8)
 8003fb2:	f7ff fc1d 	bl	80037f0 <LL_RCC_GetSysClkSource>
 8003fb6:	0003      	movs	r3, r0
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d1fa      	bne.n	8003fb2 <SystemClock_Config+0x72>
    {

    }

    LL_SetSystemCoreClock(48000000);
 8003fbc:	4b06      	ldr	r3, [pc, #24]	; (8003fd8 <SystemClock_Config+0x98>)
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f003 f934 	bl	800722c <LL_SetSystemCoreClock>
    LL_RCC_HSI14_EnableADCControl();
 8003fc4:	f7ff fbde 	bl	8003784 <LL_RCC_HSI14_EnableADCControl>
    LL_Init1msTick(48000000);
 8003fc8:	4b03      	ldr	r3, [pc, #12]	; (8003fd8 <SystemClock_Config+0x98>)
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f003 f8fc 	bl	80071c8 <LL_Init1msTick>
}
 8003fd0:	46c0      	nop			; (mov r8, r8)
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	02dc6c00 	.word	0x02dc6c00

08003fdc <MX_TIM1_Init>:

static void MX_TIM1_Init(void)
{
 8003fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fde:	b09b      	sub	sp, #108	; 0x6c
 8003fe0:	af00      	add	r7, sp, #0

    LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003fe2:	2654      	movs	r6, #84	; 0x54
 8003fe4:	19bb      	adds	r3, r7, r6
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	2314      	movs	r3, #20
 8003fea:	001a      	movs	r2, r3
 8003fec:	2100      	movs	r1, #0
 8003fee:	f003 f958 	bl	80072a2 <memset>
    LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003ff2:	2434      	movs	r4, #52	; 0x34
 8003ff4:	193b      	adds	r3, r7, r4
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	2320      	movs	r3, #32
 8003ffa:	001a      	movs	r2, r3
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	f003 f950 	bl	80072a2 <memset>
    LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8004002:	251c      	movs	r5, #28
 8004004:	197b      	adds	r3, r7, r5
 8004006:	0018      	movs	r0, r3
 8004008:	2318      	movs	r3, #24
 800400a:	001a      	movs	r2, r3
 800400c:	2100      	movs	r1, #0
 800400e:	f003 f948 	bl	80072a2 <memset>

    LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004012:	1d3b      	adds	r3, r7, #4
 8004014:	0018      	movs	r0, r3
 8004016:	2318      	movs	r3, #24
 8004018:	001a      	movs	r2, r3
 800401a:	2100      	movs	r1, #0
 800401c:	f003 f941 	bl	80072a2 <memset>

    /* TIM1_CH1 Init */
    LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8004020:	4bdf      	ldr	r3, [pc, #892]	; (80043a0 <MX_TIM1_Init+0x3c4>)
 8004022:	2210      	movs	r2, #16
 8004024:	2102      	movs	r1, #2
 8004026:	0018      	movs	r0, r3
 8004028:	f7ff fa48 	bl	80034bc <LL_DMA_SetDataTransferDirection>
    LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 800402c:	4bdc      	ldr	r3, [pc, #880]	; (80043a0 <MX_TIM1_Init+0x3c4>)
 800402e:	2200      	movs	r2, #0
 8004030:	2102      	movs	r1, #2
 8004032:	0018      	movs	r0, r3
 8004034:	f7ff fb14 	bl	8003660 <LL_DMA_SetChannelPriorityLevel>
    LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_CIRCULAR);
 8004038:	4bd9      	ldr	r3, [pc, #868]	; (80043a0 <MX_TIM1_Init+0x3c4>)
 800403a:	2220      	movs	r2, #32
 800403c:	2102      	movs	r1, #2
 800403e:	0018      	movs	r0, r3
 8004040:	f7ff fa60 	bl	8003504 <LL_DMA_SetMode>
    LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8004044:	4bd6      	ldr	r3, [pc, #856]	; (80043a0 <MX_TIM1_Init+0x3c4>)
 8004046:	2200      	movs	r2, #0
 8004048:	2102      	movs	r1, #2
 800404a:	0018      	movs	r0, r3
 800404c:	f7ff fa7c 	bl	8003548 <LL_DMA_SetPeriphIncMode>
    LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8004050:	4bd3      	ldr	r3, [pc, #844]	; (80043a0 <MX_TIM1_Init+0x3c4>)
 8004052:	2280      	movs	r2, #128	; 0x80
 8004054:	2102      	movs	r1, #2
 8004056:	0018      	movs	r0, r3
 8004058:	f7ff fa98 	bl	800358c <LL_DMA_SetMemoryIncMode>
    LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_HALFWORD);
 800405c:	2380      	movs	r3, #128	; 0x80
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	48cf      	ldr	r0, [pc, #828]	; (80043a0 <MX_TIM1_Init+0x3c4>)
 8004062:	001a      	movs	r2, r3
 8004064:	2102      	movs	r1, #2
 8004066:	f7ff fab3 	bl	80035d0 <LL_DMA_SetPeriphSize>
    LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_HALFWORD);
 800406a:	2380      	movs	r3, #128	; 0x80
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	48cc      	ldr	r0, [pc, #816]	; (80043a0 <MX_TIM1_Init+0x3c4>)
 8004070:	001a      	movs	r2, r3
 8004072:	2102      	movs	r1, #2
 8004074:	f7ff fad0 	bl	8003618 <LL_DMA_SetMemorySize>

    /* TIM1_CH2 Init */
    LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8004078:	4bc9      	ldr	r3, [pc, #804]	; (80043a0 <MX_TIM1_Init+0x3c4>)
 800407a:	2210      	movs	r2, #16
 800407c:	2103      	movs	r1, #3
 800407e:	0018      	movs	r0, r3
 8004080:	f7ff fa1c 	bl	80034bc <LL_DMA_SetDataTransferDirection>
    LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 8004084:	4bc6      	ldr	r3, [pc, #792]	; (80043a0 <MX_TIM1_Init+0x3c4>)
 8004086:	2200      	movs	r2, #0
 8004088:	2103      	movs	r1, #3
 800408a:	0018      	movs	r0, r3
 800408c:	f7ff fae8 	bl	8003660 <LL_DMA_SetChannelPriorityLevel>
    LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_CIRCULAR);
 8004090:	4bc3      	ldr	r3, [pc, #780]	; (80043a0 <MX_TIM1_Init+0x3c4>)
 8004092:	2220      	movs	r2, #32
 8004094:	2103      	movs	r1, #3
 8004096:	0018      	movs	r0, r3
 8004098:	f7ff fa34 	bl	8003504 <LL_DMA_SetMode>
    LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 800409c:	4bc0      	ldr	r3, [pc, #768]	; (80043a0 <MX_TIM1_Init+0x3c4>)
 800409e:	2200      	movs	r2, #0
 80040a0:	2103      	movs	r1, #3
 80040a2:	0018      	movs	r0, r3
 80040a4:	f7ff fa50 	bl	8003548 <LL_DMA_SetPeriphIncMode>
    LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 80040a8:	4bbd      	ldr	r3, [pc, #756]	; (80043a0 <MX_TIM1_Init+0x3c4>)
 80040aa:	2280      	movs	r2, #128	; 0x80
 80040ac:	2103      	movs	r1, #3
 80040ae:	0018      	movs	r0, r3
 80040b0:	f7ff fa6c 	bl	800358c <LL_DMA_SetMemoryIncMode>
    LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_HALFWORD);
 80040b4:	2380      	movs	r3, #128	; 0x80
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	48b9      	ldr	r0, [pc, #740]	; (80043a0 <MX_TIM1_Init+0x3c4>)
 80040ba:	001a      	movs	r2, r3
 80040bc:	2103      	movs	r1, #3
 80040be:	f7ff fa87 	bl	80035d0 <LL_DMA_SetPeriphSize>
    LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_HALFWORD);
 80040c2:	2380      	movs	r3, #128	; 0x80
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	48b6      	ldr	r0, [pc, #728]	; (80043a0 <MX_TIM1_Init+0x3c4>)
 80040c8:	001a      	movs	r2, r3
 80040ca:	2103      	movs	r1, #3
 80040cc:	f7ff faa4 	bl	8003618 <LL_DMA_SetMemorySize>

    /* TIM1_CH3_UP Init */
    LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_5, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80040d0:	4bb3      	ldr	r3, [pc, #716]	; (80043a0 <MX_TIM1_Init+0x3c4>)
 80040d2:	2210      	movs	r2, #16
 80040d4:	2105      	movs	r1, #5
 80040d6:	0018      	movs	r0, r3
 80040d8:	f7ff f9f0 	bl	80034bc <LL_DMA_SetDataTransferDirection>
    LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PRIORITY_LOW);
 80040dc:	4bb0      	ldr	r3, [pc, #704]	; (80043a0 <MX_TIM1_Init+0x3c4>)
 80040de:	2200      	movs	r2, #0
 80040e0:	2105      	movs	r1, #5
 80040e2:	0018      	movs	r0, r3
 80040e4:	f7ff fabc 	bl	8003660 <LL_DMA_SetChannelPriorityLevel>
    LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MODE_CIRCULAR);
 80040e8:	4bad      	ldr	r3, [pc, #692]	; (80043a0 <MX_TIM1_Init+0x3c4>)
 80040ea:	2220      	movs	r2, #32
 80040ec:	2105      	movs	r1, #5
 80040ee:	0018      	movs	r0, r3
 80040f0:	f7ff fa08 	bl	8003504 <LL_DMA_SetMode>
    LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PERIPH_NOINCREMENT);
 80040f4:	4baa      	ldr	r3, [pc, #680]	; (80043a0 <MX_TIM1_Init+0x3c4>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	2105      	movs	r1, #5
 80040fa:	0018      	movs	r0, r3
 80040fc:	f7ff fa24 	bl	8003548 <LL_DMA_SetPeriphIncMode>
    LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MEMORY_INCREMENT);
 8004100:	4ba7      	ldr	r3, [pc, #668]	; (80043a0 <MX_TIM1_Init+0x3c4>)
 8004102:	2280      	movs	r2, #128	; 0x80
 8004104:	2105      	movs	r1, #5
 8004106:	0018      	movs	r0, r3
 8004108:	f7ff fa40 	bl	800358c <LL_DMA_SetMemoryIncMode>
    LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PDATAALIGN_HALFWORD);
 800410c:	2380      	movs	r3, #128	; 0x80
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	48a3      	ldr	r0, [pc, #652]	; (80043a0 <MX_TIM1_Init+0x3c4>)
 8004112:	001a      	movs	r2, r3
 8004114:	2105      	movs	r1, #5
 8004116:	f7ff fa5b 	bl	80035d0 <LL_DMA_SetPeriphSize>
    LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MDATAALIGN_HALFWORD);
 800411a:	2380      	movs	r3, #128	; 0x80
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	48a0      	ldr	r0, [pc, #640]	; (80043a0 <MX_TIM1_Init+0x3c4>)
 8004120:	001a      	movs	r2, r3
 8004122:	2105      	movs	r1, #5
 8004124:	f7ff fa78 	bl	8003618 <LL_DMA_SetMemorySize>

    /* Peripheral clock enable */
    LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_TIM1);
 8004128:	2380      	movs	r3, #128	; 0x80
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	0018      	movs	r0, r3
 800412e:	f7ff fc09 	bl	8003944 <LL_APB1_GRP2_EnableClock>

    /* TIM1 interrupt Init */
    //NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0);
    //NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);

    TIM_InitStruct.Prescaler = 0;
 8004132:	19bb      	adds	r3, r7, r6
 8004134:	2200      	movs	r2, #0
 8004136:	801a      	strh	r2, [r3, #0]
    TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004138:	19bb      	adds	r3, r7, r6
 800413a:	2200      	movs	r2, #0
 800413c:	605a      	str	r2, [r3, #4]
    TIM_InitStruct.Autoreload = 399;
 800413e:	19bb      	adds	r3, r7, r6
 8004140:	2290      	movs	r2, #144	; 0x90
 8004142:	32ff      	adds	r2, #255	; 0xff
 8004144:	609a      	str	r2, [r3, #8]
    TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004146:	19bb      	adds	r3, r7, r6
 8004148:	2200      	movs	r2, #0
 800414a:	60da      	str	r2, [r3, #12]
    TIM_InitStruct.RepetitionCounter = 0;
 800414c:	19bb      	adds	r3, r7, r6
 800414e:	2200      	movs	r2, #0
 8004150:	611a      	str	r2, [r3, #16]
    LL_TIM_Init(TIM1, &TIM_InitStruct);
 8004152:	19bb      	adds	r3, r7, r6
 8004154:	4a93      	ldr	r2, [pc, #588]	; (80043a4 <MX_TIM1_Init+0x3c8>)
 8004156:	0019      	movs	r1, r3
 8004158:	0010      	movs	r0, r2
 800415a:	f002 fc3f 	bl	80069dc <LL_TIM_Init>
    LL_TIM_DisableARRPreload(TIM1);
 800415e:	4b91      	ldr	r3, [pc, #580]	; (80043a4 <MX_TIM1_Init+0x3c8>)
 8004160:	0018      	movs	r0, r3
 8004162:	f7ff fc33 	bl	80039cc <LL_TIM_DisableARRPreload>
    LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8004166:	4b8f      	ldr	r3, [pc, #572]	; (80043a4 <MX_TIM1_Init+0x3c8>)
 8004168:	2100      	movs	r1, #0
 800416a:	0018      	movs	r0, r3
 800416c:	f7ff fe0e 	bl	8003d8c <LL_TIM_SetClockSource>
    LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8004170:	4b8c      	ldr	r3, [pc, #560]	; (80043a4 <MX_TIM1_Init+0x3c8>)
 8004172:	2101      	movs	r1, #1
 8004174:	0018      	movs	r0, r3
 8004176:	f7ff fc83 	bl	8003a80 <LL_TIM_OC_EnablePreload>
    TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800417a:	193b      	adds	r3, r7, r4
 800417c:	2260      	movs	r2, #96	; 0x60
 800417e:	601a      	str	r2, [r3, #0]
    TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004180:	193b      	adds	r3, r7, r4
 8004182:	2200      	movs	r2, #0
 8004184:	605a      	str	r2, [r3, #4]
    TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004186:	193b      	adds	r3, r7, r4
 8004188:	2200      	movs	r2, #0
 800418a:	609a      	str	r2, [r3, #8]
    TIM_OC_InitStruct.CompareValue = 1000;
 800418c:	193b      	adds	r3, r7, r4
 800418e:	22fa      	movs	r2, #250	; 0xfa
 8004190:	0092      	lsls	r2, r2, #2
 8004192:	60da      	str	r2, [r3, #12]
    TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004194:	193b      	adds	r3, r7, r4
 8004196:	2200      	movs	r2, #0
 8004198:	611a      	str	r2, [r3, #16]
    TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 800419a:	193b      	adds	r3, r7, r4
 800419c:	2200      	movs	r2, #0
 800419e:	615a      	str	r2, [r3, #20]
    TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_HIGH;
 80041a0:	193b      	adds	r3, r7, r4
 80041a2:	2280      	movs	r2, #128	; 0x80
 80041a4:	0052      	lsls	r2, r2, #1
 80041a6:	619a      	str	r2, [r3, #24]
    TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80041a8:	193b      	adds	r3, r7, r4
 80041aa:	2200      	movs	r2, #0
 80041ac:	61da      	str	r2, [r3, #28]
    LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80041ae:	193b      	adds	r3, r7, r4
 80041b0:	487c      	ldr	r0, [pc, #496]	; (80043a4 <MX_TIM1_Init+0x3c8>)
 80041b2:	001a      	movs	r2, r3
 80041b4:	2101      	movs	r1, #1
 80041b6:	f002 fc7f 	bl	8006ab8 <LL_TIM_OC_Init>
    LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 80041ba:	4b7a      	ldr	r3, [pc, #488]	; (80043a4 <MX_TIM1_Init+0x3c8>)
 80041bc:	2101      	movs	r1, #1
 80041be:	0018      	movs	r0, r3
 80041c0:	f7ff fc14 	bl	80039ec <LL_TIM_OC_DisableFast>
    LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 80041c4:	4b77      	ldr	r3, [pc, #476]	; (80043a4 <MX_TIM1_Init+0x3c8>)
 80041c6:	2110      	movs	r1, #16
 80041c8:	0018      	movs	r0, r3
 80041ca:	f7ff fc59 	bl	8003a80 <LL_TIM_OC_EnablePreload>
    TIM_OC_InitStruct.CompareValue = 0;
 80041ce:	193b      	adds	r3, r7, r4
 80041d0:	2200      	movs	r2, #0
 80041d2:	60da      	str	r2, [r3, #12]
    LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80041d4:	193b      	adds	r3, r7, r4
 80041d6:	4873      	ldr	r0, [pc, #460]	; (80043a4 <MX_TIM1_Init+0x3c8>)
 80041d8:	001a      	movs	r2, r3
 80041da:	2110      	movs	r1, #16
 80041dc:	f002 fc6c 	bl	8006ab8 <LL_TIM_OC_Init>
    LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 80041e0:	4b70      	ldr	r3, [pc, #448]	; (80043a4 <MX_TIM1_Init+0x3c8>)
 80041e2:	2110      	movs	r1, #16
 80041e4:	0018      	movs	r0, r3
 80041e6:	f7ff fc01 	bl	80039ec <LL_TIM_OC_DisableFast>
    LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 80041ea:	2380      	movs	r3, #128	; 0x80
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	4a6d      	ldr	r2, [pc, #436]	; (80043a4 <MX_TIM1_Init+0x3c8>)
 80041f0:	0019      	movs	r1, r3
 80041f2:	0010      	movs	r0, r2
 80041f4:	f7ff fc44 	bl	8003a80 <LL_TIM_OC_EnablePreload>
    TIM_OC_InitStruct.CompareValue = 1000;
 80041f8:	193b      	adds	r3, r7, r4
 80041fa:	22fa      	movs	r2, #250	; 0xfa
 80041fc:	0092      	lsls	r2, r2, #2
 80041fe:	60da      	str	r2, [r3, #12]
    LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8004200:	193a      	adds	r2, r7, r4
 8004202:	2380      	movs	r3, #128	; 0x80
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	4867      	ldr	r0, [pc, #412]	; (80043a4 <MX_TIM1_Init+0x3c8>)
 8004208:	0019      	movs	r1, r3
 800420a:	f002 fc55 	bl	8006ab8 <LL_TIM_OC_Init>
    LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 800420e:	2380      	movs	r3, #128	; 0x80
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	4a64      	ldr	r2, [pc, #400]	; (80043a4 <MX_TIM1_Init+0x3c8>)
 8004214:	0019      	movs	r1, r3
 8004216:	0010      	movs	r0, r2
 8004218:	f7ff fbe8 	bl	80039ec <LL_TIM_OC_DisableFast>
    LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_UPDATE);
 800421c:	4b61      	ldr	r3, [pc, #388]	; (80043a4 <MX_TIM1_Init+0x3c8>)
 800421e:	2120      	movs	r1, #32
 8004220:	0018      	movs	r0, r3
 8004222:	f7ff fdc7 	bl	8003db4 <LL_TIM_SetTriggerOutput>
    LL_TIM_DisableMasterSlaveMode(TIM1);
 8004226:	4b5f      	ldr	r3, [pc, #380]	; (80043a4 <MX_TIM1_Init+0x3c8>)
 8004228:	0018      	movs	r0, r3
 800422a:	f7ff fdd5 	bl	8003dd8 <LL_TIM_DisableMasterSlaveMode>
    TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 800422e:	0029      	movs	r1, r5
 8004230:	187b      	adds	r3, r7, r1
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]
    TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8004236:	187b      	adds	r3, r7, r1
 8004238:	2200      	movs	r2, #0
 800423a:	605a      	str	r2, [r3, #4]
    TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 800423c:	187b      	adds	r3, r7, r1
 800423e:	2200      	movs	r2, #0
 8004240:	609a      	str	r2, [r3, #8]
    TIM_BDTRInitStruct.DeadTime = 45;
 8004242:	187b      	adds	r3, r7, r1
 8004244:	222d      	movs	r2, #45	; 0x2d
 8004246:	731a      	strb	r2, [r3, #12]
    TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8004248:	187b      	adds	r3, r7, r1
 800424a:	2200      	movs	r2, #0
 800424c:	81da      	strh	r2, [r3, #14]
    TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 800424e:	187b      	adds	r3, r7, r1
 8004250:	2280      	movs	r2, #128	; 0x80
 8004252:	0192      	lsls	r2, r2, #6
 8004254:	611a      	str	r2, [r3, #16]
    TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8004256:	187b      	adds	r3, r7, r1
 8004258:	2200      	movs	r2, #0
 800425a:	615a      	str	r2, [r3, #20]
    LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 800425c:	187b      	adds	r3, r7, r1
 800425e:	4a51      	ldr	r2, [pc, #324]	; (80043a4 <MX_TIM1_Init+0x3c8>)
 8004260:	0019      	movs	r1, r3
 8004262:	0010      	movs	r0, r2
 8004264:	f002 fc82 	bl	8006b6c <LL_TIM_BDTR_Init>
    PB1   ------> TIM1_CH3N
    PA8   ------> TIM1_CH1
    PA9   ------> TIM1_CH2
    PA10   ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8004268:	1d3b      	adds	r3, r7, #4
 800426a:	2280      	movs	r2, #128	; 0x80
 800426c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800426e:	1d3b      	adds	r3, r7, #4
 8004270:	2202      	movs	r2, #2
 8004272:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004274:	1d3b      	adds	r3, r7, #4
 8004276:	2200      	movs	r2, #0
 8004278:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800427a:	1d3b      	adds	r3, r7, #4
 800427c:	2200      	movs	r2, #0
 800427e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004280:	1d3b      	adds	r3, r7, #4
 8004282:	2200      	movs	r2, #0
 8004284:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8004286:	1d3b      	adds	r3, r7, #4
 8004288:	2202      	movs	r2, #2
 800428a:	615a      	str	r2, [r3, #20]
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800428c:	1d3a      	adds	r2, r7, #4
 800428e:	2390      	movs	r3, #144	; 0x90
 8004290:	05db      	lsls	r3, r3, #23
 8004292:	0011      	movs	r1, r2
 8004294:	0018      	movs	r0, r3
 8004296:	f002 f99b 	bl	80065d0 <LL_GPIO_Init>

    GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800429a:	1d3b      	adds	r3, r7, #4
 800429c:	2201      	movs	r2, #1
 800429e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80042a0:	1d3b      	adds	r3, r7, #4
 80042a2:	2202      	movs	r2, #2
 80042a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80042a6:	1d3b      	adds	r3, r7, #4
 80042a8:	2200      	movs	r2, #0
 80042aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80042ac:	1d3b      	adds	r3, r7, #4
 80042ae:	2200      	movs	r2, #0
 80042b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80042b2:	1d3b      	adds	r3, r7, #4
 80042b4:	2200      	movs	r2, #0
 80042b6:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80042b8:	1d3b      	adds	r3, r7, #4
 80042ba:	2202      	movs	r2, #2
 80042bc:	615a      	str	r2, [r3, #20]
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042be:	1d3b      	adds	r3, r7, #4
 80042c0:	4a39      	ldr	r2, [pc, #228]	; (80043a8 <MX_TIM1_Init+0x3cc>)
 80042c2:	0019      	movs	r1, r3
 80042c4:	0010      	movs	r0, r2
 80042c6:	f002 f983 	bl	80065d0 <LL_GPIO_Init>

    GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80042ca:	1d3b      	adds	r3, r7, #4
 80042cc:	2202      	movs	r2, #2
 80042ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80042d0:	1d3b      	adds	r3, r7, #4
 80042d2:	2202      	movs	r2, #2
 80042d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80042d6:	1d3b      	adds	r3, r7, #4
 80042d8:	2200      	movs	r2, #0
 80042da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80042dc:	1d3b      	adds	r3, r7, #4
 80042de:	2200      	movs	r2, #0
 80042e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80042e2:	1d3b      	adds	r3, r7, #4
 80042e4:	2200      	movs	r2, #0
 80042e6:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80042e8:	1d3b      	adds	r3, r7, #4
 80042ea:	2202      	movs	r2, #2
 80042ec:	615a      	str	r2, [r3, #20]
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042ee:	1d3b      	adds	r3, r7, #4
 80042f0:	4a2d      	ldr	r2, [pc, #180]	; (80043a8 <MX_TIM1_Init+0x3cc>)
 80042f2:	0019      	movs	r1, r3
 80042f4:	0010      	movs	r0, r2
 80042f6:	f002 f96b 	bl	80065d0 <LL_GPIO_Init>

    GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80042fa:	1d3b      	adds	r3, r7, #4
 80042fc:	2280      	movs	r2, #128	; 0x80
 80042fe:	0052      	lsls	r2, r2, #1
 8004300:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004302:	1d3b      	adds	r3, r7, #4
 8004304:	2202      	movs	r2, #2
 8004306:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004308:	1d3b      	adds	r3, r7, #4
 800430a:	2200      	movs	r2, #0
 800430c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800430e:	1d3b      	adds	r3, r7, #4
 8004310:	2200      	movs	r2, #0
 8004312:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004314:	1d3b      	adds	r3, r7, #4
 8004316:	2200      	movs	r2, #0
 8004318:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800431a:	1d3b      	adds	r3, r7, #4
 800431c:	2202      	movs	r2, #2
 800431e:	615a      	str	r2, [r3, #20]
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004320:	1d3a      	adds	r2, r7, #4
 8004322:	2390      	movs	r3, #144	; 0x90
 8004324:	05db      	lsls	r3, r3, #23
 8004326:	0011      	movs	r1, r2
 8004328:	0018      	movs	r0, r3
 800432a:	f002 f951 	bl	80065d0 <LL_GPIO_Init>

    GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800432e:	1d3b      	adds	r3, r7, #4
 8004330:	2280      	movs	r2, #128	; 0x80
 8004332:	0092      	lsls	r2, r2, #2
 8004334:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004336:	1d3b      	adds	r3, r7, #4
 8004338:	2202      	movs	r2, #2
 800433a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800433c:	1d3b      	adds	r3, r7, #4
 800433e:	2200      	movs	r2, #0
 8004340:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004342:	1d3b      	adds	r3, r7, #4
 8004344:	2200      	movs	r2, #0
 8004346:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004348:	1d3b      	adds	r3, r7, #4
 800434a:	2200      	movs	r2, #0
 800434c:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800434e:	1d3b      	adds	r3, r7, #4
 8004350:	2202      	movs	r2, #2
 8004352:	615a      	str	r2, [r3, #20]
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004354:	1d3a      	adds	r2, r7, #4
 8004356:	2390      	movs	r3, #144	; 0x90
 8004358:	05db      	lsls	r3, r3, #23
 800435a:	0011      	movs	r1, r2
 800435c:	0018      	movs	r0, r3
 800435e:	f002 f937 	bl	80065d0 <LL_GPIO_Init>

    GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8004362:	1d3b      	adds	r3, r7, #4
 8004364:	2280      	movs	r2, #128	; 0x80
 8004366:	00d2      	lsls	r2, r2, #3
 8004368:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800436a:	1d3b      	adds	r3, r7, #4
 800436c:	2202      	movs	r2, #2
 800436e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004370:	1d3b      	adds	r3, r7, #4
 8004372:	2200      	movs	r2, #0
 8004374:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004376:	1d3b      	adds	r3, r7, #4
 8004378:	2200      	movs	r2, #0
 800437a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800437c:	1d3b      	adds	r3, r7, #4
 800437e:	2200      	movs	r2, #0
 8004380:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8004382:	1d3b      	adds	r3, r7, #4
 8004384:	2202      	movs	r2, #2
 8004386:	615a      	str	r2, [r3, #20]
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004388:	1d3a      	adds	r2, r7, #4
 800438a:	2390      	movs	r3, #144	; 0x90
 800438c:	05db      	lsls	r3, r3, #23
 800438e:	0011      	movs	r1, r2
 8004390:	0018      	movs	r0, r3
 8004392:	f002 f91d 	bl	80065d0 <LL_GPIO_Init>

}
 8004396:	46c0      	nop			; (mov r8, r8)
 8004398:	46bd      	mov	sp, r7
 800439a:	b01b      	add	sp, #108	; 0x6c
 800439c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	40020000 	.word	0x40020000
 80043a4:	40012c00 	.word	0x40012c00
 80043a8:	48000400 	.word	0x48000400

080043ac <MX_TIM3_Init>:

static void MX_TIM3_Init(void)
{
 80043ac:	b590      	push	{r4, r7, lr}
 80043ae:	b08d      	sub	sp, #52	; 0x34
 80043b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80043b2:	241c      	movs	r4, #28
 80043b4:	193b      	adds	r3, r7, r4
 80043b6:	0018      	movs	r0, r3
 80043b8:	2314      	movs	r3, #20
 80043ba:	001a      	movs	r2, r3
 80043bc:	2100      	movs	r1, #0
 80043be:	f002 ff70 	bl	80072a2 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c2:	1d3b      	adds	r3, r7, #4
 80043c4:	0018      	movs	r0, r3
 80043c6:	2318      	movs	r3, #24
 80043c8:	001a      	movs	r2, r3
 80043ca:	2100      	movs	r1, #0
 80043cc:	f002 ff69 	bl	80072a2 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80043d0:	2002      	movs	r0, #2
 80043d2:	f7ff faa1 	bl	8003918 <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80043d6:	2380      	movs	r3, #128	; 0x80
 80043d8:	029b      	lsls	r3, r3, #10
 80043da:	0018      	movs	r0, r3
 80043dc:	f7ff fa86 	bl	80038ec <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PA6   ------> TIM3_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80043e0:	1d3b      	adds	r3, r7, #4
 80043e2:	2240      	movs	r2, #64	; 0x40
 80043e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80043e6:	1d3b      	adds	r3, r7, #4
 80043e8:	2202      	movs	r2, #2
 80043ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80043ec:	1d3b      	adds	r3, r7, #4
 80043ee:	2200      	movs	r2, #0
 80043f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80043f2:	1d3b      	adds	r3, r7, #4
 80043f4:	2200      	movs	r2, #0
 80043f6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80043f8:	1d3b      	adds	r3, r7, #4
 80043fa:	2200      	movs	r2, #0
 80043fc:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80043fe:	1d3b      	adds	r3, r7, #4
 8004400:	2201      	movs	r2, #1
 8004402:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004404:	1d3a      	adds	r2, r7, #4
 8004406:	2390      	movs	r3, #144	; 0x90
 8004408:	05db      	lsls	r3, r3, #23
 800440a:	0011      	movs	r1, r2
 800440c:	0018      	movs	r0, r3
 800440e:	f002 f8df 	bl	80065d0 <LL_GPIO_Init>

  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_6, LL_GPIO_PULL_UP);
 8004412:	2390      	movs	r3, #144	; 0x90
 8004414:	05db      	lsls	r3, r3, #23
 8004416:	2201      	movs	r2, #1
 8004418:	2140      	movs	r1, #64	; 0x40
 800441a:	0018      	movs	r0, r3
 800441c:	f7ff fd34 	bl	8003e88 <LL_GPIO_SetPinPull>

  /* TIM3 DMA Init */

  /* TIM3_CH1_TRIG Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8004420:	4b37      	ldr	r3, [pc, #220]	; (8004500 <MX_TIM3_Init+0x154>)
 8004422:	2200      	movs	r2, #0
 8004424:	2104      	movs	r1, #4
 8004426:	0018      	movs	r0, r3
 8004428:	f7ff f848 	bl	80034bc <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_LOW);
 800442c:	4b34      	ldr	r3, [pc, #208]	; (8004500 <MX_TIM3_Init+0x154>)
 800442e:	2200      	movs	r2, #0
 8004430:	2104      	movs	r1, #4
 8004432:	0018      	movs	r0, r3
 8004434:	f7ff f914 	bl	8003660 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_NORMAL);
 8004438:	4b31      	ldr	r3, [pc, #196]	; (8004500 <MX_TIM3_Init+0x154>)
 800443a:	2200      	movs	r2, #0
 800443c:	2104      	movs	r1, #4
 800443e:	0018      	movs	r0, r3
 8004440:	f7ff f860 	bl	8003504 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 8004444:	4b2e      	ldr	r3, [pc, #184]	; (8004500 <MX_TIM3_Init+0x154>)
 8004446:	2200      	movs	r2, #0
 8004448:	2104      	movs	r1, #4
 800444a:	0018      	movs	r0, r3
 800444c:	f7ff f87c 	bl	8003548 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 8004450:	4b2b      	ldr	r3, [pc, #172]	; (8004500 <MX_TIM3_Init+0x154>)
 8004452:	2280      	movs	r2, #128	; 0x80
 8004454:	2104      	movs	r1, #4
 8004456:	0018      	movs	r0, r3
 8004458:	f7ff f898 	bl	800358c <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_HALFWORD);
 800445c:	2380      	movs	r3, #128	; 0x80
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	4827      	ldr	r0, [pc, #156]	; (8004500 <MX_TIM3_Init+0x154>)
 8004462:	001a      	movs	r2, r3
 8004464:	2104      	movs	r1, #4
 8004466:	f7ff f8b3 	bl	80035d0 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_HALFWORD);
 800446a:	2380      	movs	r3, #128	; 0x80
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	4824      	ldr	r0, [pc, #144]	; (8004500 <MX_TIM3_Init+0x154>)
 8004470:	001a      	movs	r2, r3
 8004472:	2104      	movs	r1, #4
 8004474:	f7ff f8d0 	bl	8003618 <LL_DMA_SetMemorySize>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, 0);
 8004478:	2100      	movs	r1, #0
 800447a:	2010      	movs	r0, #16
 800447c:	f7fe ff0c 	bl	8003298 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8004480:	2010      	movs	r0, #16
 8004482:	f7fe feef 	bl	8003264 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 47;
 8004486:	193b      	adds	r3, r7, r4
 8004488:	222f      	movs	r2, #47	; 0x2f
 800448a:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800448c:	193b      	adds	r3, r7, r4
 800448e:	2200      	movs	r2, #0
 8004490:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 65535;
 8004492:	193b      	adds	r3, r7, r4
 8004494:	4a1b      	ldr	r2, [pc, #108]	; (8004504 <MX_TIM3_Init+0x158>)
 8004496:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004498:	193b      	adds	r3, r7, r4
 800449a:	2200      	movs	r2, #0
 800449c:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800449e:	193b      	adds	r3, r7, r4
 80044a0:	4a19      	ldr	r2, [pc, #100]	; (8004508 <MX_TIM3_Init+0x15c>)
 80044a2:	0019      	movs	r1, r3
 80044a4:	0010      	movs	r0, r2
 80044a6:	f002 fa99 	bl	80069dc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 80044aa:	4b17      	ldr	r3, [pc, #92]	; (8004508 <MX_TIM3_Init+0x15c>)
 80044ac:	0018      	movs	r0, r3
 80044ae:	f7ff fa8d 	bl	80039cc <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80044b2:	4b15      	ldr	r3, [pc, #84]	; (8004508 <MX_TIM3_Init+0x15c>)
 80044b4:	2100      	movs	r1, #0
 80044b6:	0018      	movs	r0, r3
 80044b8:	f7ff fc7c 	bl	8003db4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80044bc:	4b12      	ldr	r3, [pc, #72]	; (8004508 <MX_TIM3_Init+0x15c>)
 80044be:	0018      	movs	r0, r3
 80044c0:	f7ff fc8a 	bl	8003dd8 <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80044c4:	2380      	movs	r3, #128	; 0x80
 80044c6:	025b      	lsls	r3, r3, #9
 80044c8:	480f      	ldr	r0, [pc, #60]	; (8004508 <MX_TIM3_Init+0x15c>)
 80044ca:	001a      	movs	r2, r3
 80044cc:	2101      	movs	r1, #1
 80044ce:	f7ff fb1f 	bl	8003b10 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 80044d2:	4b0d      	ldr	r3, [pc, #52]	; (8004508 <MX_TIM3_Init+0x15c>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	2101      	movs	r1, #1
 80044d8:	0018      	movs	r0, r3
 80044da:	f7ff fb6b 	bl	8003bb4 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 80044de:	4b0a      	ldr	r3, [pc, #40]	; (8004508 <MX_TIM3_Init+0x15c>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	2101      	movs	r1, #1
 80044e4:	0018      	movs	r0, r3
 80044e6:	f7ff fbb7 	bl	8003c58 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 80044ea:	4b07      	ldr	r3, [pc, #28]	; (8004508 <MX_TIM3_Init+0x15c>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	2101      	movs	r1, #1
 80044f0:	0018      	movs	r0, r3
 80044f2:	f7ff fc03 	bl	8003cfc <LL_TIM_IC_SetPolarity>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	46bd      	mov	sp, r7
 80044fa:	b00d      	add	sp, #52	; 0x34
 80044fc:	bd90      	pop	{r4, r7, pc}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	40020000 	.word	0x40020000
 8004504:	0000ffff 	.word	0x0000ffff
 8004508:	40000400 	.word	0x40000400

0800450c <MX_TIM14_Init>:

static void MX_TIM14_Init(void)
{
 800450c:	b590      	push	{r4, r7, lr}
 800450e:	b08f      	sub	sp, #60	; 0x3c
 8004510:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM14_Init 0 */

    /* USER CODE END TIM14_Init 0 */

    LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004512:	2424      	movs	r4, #36	; 0x24
 8004514:	193b      	adds	r3, r7, r4
 8004516:	0018      	movs	r0, r3
 8004518:	2314      	movs	r3, #20
 800451a:	001a      	movs	r2, r3
 800451c:	2100      	movs	r1, #0
 800451e:	f002 fec0 	bl	80072a2 <memset>
    LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8004522:	1d3b      	adds	r3, r7, #4
 8004524:	0018      	movs	r0, r3
 8004526:	2320      	movs	r3, #32
 8004528:	001a      	movs	r2, r3
 800452a:	2100      	movs	r1, #0
 800452c:	f002 feb9 	bl	80072a2 <memset>

    /* Peripheral clock enable */
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM14);
 8004530:	2380      	movs	r3, #128	; 0x80
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	0018      	movs	r0, r3
 8004536:	f7ff f9ef 	bl	8003918 <LL_APB1_GRP1_EnableClock>

    /* TIM14 interrupt Init */
    NVIC_SetPriority(TIM14_IRQn, 0);
 800453a:	2100      	movs	r1, #0
 800453c:	2013      	movs	r0, #19
 800453e:	f7fe feab 	bl	8003298 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM14_IRQn);
 8004542:	2013      	movs	r0, #19
 8004544:	f7fe fe8e 	bl	8003264 <__NVIC_EnableIRQ>

    /* USER CODE BEGIN TIM14_Init 1 */

    /* USER CODE END TIM14_Init 1 */
    TIM_InitStruct.Prescaler = 8;
 8004548:	193b      	adds	r3, r7, r4
 800454a:	2208      	movs	r2, #8
 800454c:	801a      	strh	r2, [r3, #0]
    TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800454e:	193b      	adds	r3, r7, r4
 8004550:	2200      	movs	r2, #0
 8004552:	605a      	str	r2, [r3, #4]
    TIM_InitStruct.Autoreload = 15999;
 8004554:	193b      	adds	r3, r7, r4
 8004556:	4a16      	ldr	r2, [pc, #88]	; (80045b0 <MX_TIM14_Init+0xa4>)
 8004558:	609a      	str	r2, [r3, #8]
    TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800455a:	193b      	adds	r3, r7, r4
 800455c:	2200      	movs	r2, #0
 800455e:	60da      	str	r2, [r3, #12]
    LL_TIM_Init(TIM14, &TIM_InitStruct);
 8004560:	193b      	adds	r3, r7, r4
 8004562:	4a14      	ldr	r2, [pc, #80]	; (80045b4 <MX_TIM14_Init+0xa8>)
 8004564:	0019      	movs	r1, r3
 8004566:	0010      	movs	r0, r2
 8004568:	f002 fa38 	bl	80069dc <LL_TIM_Init>
    LL_TIM_EnableARRPreload(TIM14);
 800456c:	4b11      	ldr	r3, [pc, #68]	; (80045b4 <MX_TIM14_Init+0xa8>)
 800456e:	0018      	movs	r0, r3
 8004570:	f7ff fa1e 	bl	80039b0 <LL_TIM_EnableARRPreload>
    TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8004574:	1d3b      	adds	r3, r7, #4
 8004576:	2200      	movs	r2, #0
 8004578:	601a      	str	r2, [r3, #0]
    TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800457a:	1d3b      	adds	r3, r7, #4
 800457c:	2200      	movs	r2, #0
 800457e:	605a      	str	r2, [r3, #4]
    TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004580:	1d3b      	adds	r3, r7, #4
 8004582:	2200      	movs	r2, #0
 8004584:	609a      	str	r2, [r3, #8]
    TIM_OC_InitStruct.CompareValue = 0;
 8004586:	1d3b      	adds	r3, r7, #4
 8004588:	2200      	movs	r2, #0
 800458a:	60da      	str	r2, [r3, #12]
    TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800458c:	1d3b      	adds	r3, r7, #4
 800458e:	2200      	movs	r2, #0
 8004590:	611a      	str	r2, [r3, #16]
    LL_TIM_OC_Init(TIM14, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8004592:	1d3b      	adds	r3, r7, #4
 8004594:	4807      	ldr	r0, [pc, #28]	; (80045b4 <MX_TIM14_Init+0xa8>)
 8004596:	001a      	movs	r2, r3
 8004598:	2101      	movs	r1, #1
 800459a:	f002 fa8d 	bl	8006ab8 <LL_TIM_OC_Init>
    LL_TIM_OC_DisableFast(TIM14, LL_TIM_CHANNEL_CH1);
 800459e:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <MX_TIM14_Init+0xa8>)
 80045a0:	2101      	movs	r1, #1
 80045a2:	0018      	movs	r0, r3
 80045a4:	f7ff fa22 	bl	80039ec <LL_TIM_OC_DisableFast>
    /* USER CODE BEGIN TIM14_Init 2 */

    /* USER CODE END TIM14_Init 2 */

}
 80045a8:	46c0      	nop			; (mov r8, r8)
 80045aa:	46bd      	mov	sp, r7
 80045ac:	b00f      	add	sp, #60	; 0x3c
 80045ae:	bd90      	pop	{r4, r7, pc}
 80045b0:	00003e7f 	.word	0x00003e7f
 80045b4:	40002000 	.word	0x40002000

080045b8 <MX_TIM16_Init>:

static void MX_TIM16_Init(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0

    uint32_t PRS = (SystemCoreClock/(1e6/INTERVAL_PERIOD)) - 1;
 80045be:	4b21      	ldr	r3, [pc, #132]	; (8004644 <MX_TIM16_Init+0x8c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	0018      	movs	r0, r3
 80045c4:	f7fe f842 	bl	800264c <__aeabi_ui2d>
 80045c8:	2200      	movs	r2, #0
 80045ca:	4b1f      	ldr	r3, [pc, #124]	; (8004648 <MX_TIM16_Init+0x90>)
 80045cc:	f7fc fee4 	bl	8001398 <__aeabi_ddiv>
 80045d0:	0002      	movs	r2, r0
 80045d2:	000b      	movs	r3, r1
 80045d4:	0010      	movs	r0, r2
 80045d6:	0019      	movs	r1, r3
 80045d8:	2200      	movs	r2, #0
 80045da:	4b1c      	ldr	r3, [pc, #112]	; (800464c <MX_TIM16_Init+0x94>)
 80045dc:	f7fd fc3e 	bl	8001e5c <__aeabi_dsub>
 80045e0:	0002      	movs	r2, r0
 80045e2:	000b      	movs	r3, r1
 80045e4:	0010      	movs	r0, r2
 80045e6:	0019      	movs	r1, r3
 80045e8:	f7fb ff56 	bl	8000498 <__aeabi_d2uiz>
 80045ec:	0003      	movs	r3, r0
 80045ee:	617b      	str	r3, [r7, #20]
    LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80045f0:	003b      	movs	r3, r7
 80045f2:	0018      	movs	r0, r3
 80045f4:	2314      	movs	r3, #20
 80045f6:	001a      	movs	r2, r3
 80045f8:	2100      	movs	r1, #0
 80045fa:	f002 fe52 	bl	80072a2 <memset>

    /* Peripheral clock enable */
    LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_TIM16);
 80045fe:	2380      	movs	r3, #128	; 0x80
 8004600:	029b      	lsls	r3, r3, #10
 8004602:	0018      	movs	r0, r3
 8004604:	f7ff f99e 	bl	8003944 <LL_APB1_GRP2_EnableClock>

    /* USER CODE BEGIN TIM16_Init 1 */

    /* USER CODE END TIM16_Init 1 */
    TIM_InitStruct.Prescaler = PRS;//20us
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	b29a      	uxth	r2, r3
 800460c:	003b      	movs	r3, r7
 800460e:	801a      	strh	r2, [r3, #0]
    TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004610:	003b      	movs	r3, r7
 8004612:	2200      	movs	r2, #0
 8004614:	605a      	str	r2, [r3, #4]
    TIM_InitStruct.Autoreload = 65535;
 8004616:	003b      	movs	r3, r7
 8004618:	4a0d      	ldr	r2, [pc, #52]	; (8004650 <MX_TIM16_Init+0x98>)
 800461a:	609a      	str	r2, [r3, #8]
    TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800461c:	003b      	movs	r3, r7
 800461e:	2200      	movs	r2, #0
 8004620:	60da      	str	r2, [r3, #12]
    TIM_InitStruct.RepetitionCounter = 0;
 8004622:	003b      	movs	r3, r7
 8004624:	2200      	movs	r2, #0
 8004626:	611a      	str	r2, [r3, #16]
    LL_TIM_Init(TIM16, &TIM_InitStruct);
 8004628:	003b      	movs	r3, r7
 800462a:	4a0a      	ldr	r2, [pc, #40]	; (8004654 <MX_TIM16_Init+0x9c>)
 800462c:	0019      	movs	r1, r3
 800462e:	0010      	movs	r0, r2
 8004630:	f002 f9d4 	bl	80069dc <LL_TIM_Init>
    LL_TIM_EnableARRPreload(TIM16);
 8004634:	4b07      	ldr	r3, [pc, #28]	; (8004654 <MX_TIM16_Init+0x9c>)
 8004636:	0018      	movs	r0, r3
 8004638:	f7ff f9ba 	bl	80039b0 <LL_TIM_EnableARRPreload>

}
 800463c:	46c0      	nop			; (mov r8, r8)
 800463e:	46bd      	mov	sp, r7
 8004640:	b006      	add	sp, #24
 8004642:	bd80      	pop	{r7, pc}
 8004644:	2000000c 	.word	0x2000000c
 8004648:	412e8480 	.word	0x412e8480
 800464c:	3ff00000 	.word	0x3ff00000
 8004650:	0000ffff 	.word	0x0000ffff
 8004654:	40014400 	.word	0x40014400

08004658 <MX_TIM17_Init>:

static void MX_TIM17_Init(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0

    LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800465e:	1d3b      	adds	r3, r7, #4
 8004660:	0018      	movs	r0, r3
 8004662:	2314      	movs	r3, #20
 8004664:	001a      	movs	r2, r3
 8004666:	2100      	movs	r1, #0
 8004668:	f002 fe1b 	bl	80072a2 <memset>

    /* Peripheral clock enable */
    LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_TIM17);
 800466c:	2380      	movs	r3, #128	; 0x80
 800466e:	02db      	lsls	r3, r3, #11
 8004670:	0018      	movs	r0, r3
 8004672:	f7ff f967 	bl	8003944 <LL_APB1_GRP2_EnableClock>

    /* USER CODE BEGIN TIM17_Init 1 */

    /* USER CODE END TIM17_Init 1 */
    TIM_InitStruct.Prescaler = 479;
 8004676:	1d3b      	adds	r3, r7, #4
 8004678:	22e0      	movs	r2, #224	; 0xe0
 800467a:	32ff      	adds	r2, #255	; 0xff
 800467c:	801a      	strh	r2, [r3, #0]
    TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800467e:	1d3b      	adds	r3, r7, #4
 8004680:	2200      	movs	r2, #0
 8004682:	605a      	str	r2, [r3, #4]
    TIM_InitStruct.Autoreload = 65535;
 8004684:	1d3b      	adds	r3, r7, #4
 8004686:	4a0b      	ldr	r2, [pc, #44]	; (80046b4 <MX_TIM17_Init+0x5c>)
 8004688:	609a      	str	r2, [r3, #8]
    TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800468a:	1d3b      	adds	r3, r7, #4
 800468c:	2200      	movs	r2, #0
 800468e:	60da      	str	r2, [r3, #12]
    TIM_InitStruct.RepetitionCounter = 0;
 8004690:	1d3b      	adds	r3, r7, #4
 8004692:	2200      	movs	r2, #0
 8004694:	611a      	str	r2, [r3, #16]
    LL_TIM_Init(TIM17, &TIM_InitStruct);
 8004696:	1d3b      	adds	r3, r7, #4
 8004698:	4a07      	ldr	r2, [pc, #28]	; (80046b8 <MX_TIM17_Init+0x60>)
 800469a:	0019      	movs	r1, r3
 800469c:	0010      	movs	r0, r2
 800469e:	f002 f99d 	bl	80069dc <LL_TIM_Init>
    LL_TIM_EnableARRPreload(TIM17);
 80046a2:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <MX_TIM17_Init+0x60>)
 80046a4:	0018      	movs	r0, r3
 80046a6:	f7ff f983 	bl	80039b0 <LL_TIM_EnableARRPreload>
    /* USER CODE BEGIN TIM17_Init 2 */

    /* USER CODE END TIM17_Init 2 */

}
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	46bd      	mov	sp, r7
 80046ae:	b006      	add	sp, #24
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	46c0      	nop			; (mov r8, r8)
 80046b4:	0000ffff 	.word	0x0000ffff
 80046b8:	40014800 	.word	0x40014800

080046bc <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 80046bc:	b590      	push	{r4, r7, lr}
 80046be:	b08f      	sub	sp, #60	; 0x3c
 80046c0:	af00      	add	r7, sp, #0
    LL_USART_InitTypeDef USART_InitStruct = {0};
 80046c2:	241c      	movs	r4, #28
 80046c4:	193b      	adds	r3, r7, r4
 80046c6:	0018      	movs	r0, r3
 80046c8:	231c      	movs	r3, #28
 80046ca:	001a      	movs	r2, r3
 80046cc:	2100      	movs	r1, #0
 80046ce:	f002 fde8 	bl	80072a2 <memset>
    LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d2:	1d3b      	adds	r3, r7, #4
 80046d4:	0018      	movs	r0, r3
 80046d6:	2318      	movs	r3, #24
 80046d8:	001a      	movs	r2, r3
 80046da:	2100      	movs	r1, #0
 80046dc:	f002 fde1 	bl	80072a2 <memset>

    /* Peripheral clock enable */
    LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_USART1);
 80046e0:	2380      	movs	r3, #128	; 0x80
 80046e2:	01db      	lsls	r3, r3, #7
 80046e4:	0018      	movs	r0, r3
 80046e6:	f7ff f92d 	bl	8003944 <LL_APB1_GRP2_EnableClock>

    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80046ea:	2380      	movs	r3, #128	; 0x80
 80046ec:	02db      	lsls	r3, r3, #11
 80046ee:	0018      	movs	r0, r3
 80046f0:	f7ff f8fc 	bl	80038ec <LL_AHB1_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6   ------> USART1_TX
    PB7   ------> USART1_RX
    */
    GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80046f4:	1d3b      	adds	r3, r7, #4
 80046f6:	2240      	movs	r2, #64	; 0x40
 80046f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80046fa:	1d3b      	adds	r3, r7, #4
 80046fc:	2202      	movs	r2, #2
 80046fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8004700:	1d3b      	adds	r3, r7, #4
 8004702:	2203      	movs	r2, #3
 8004704:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004706:	1d3b      	adds	r3, r7, #4
 8004708:	2200      	movs	r2, #0
 800470a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800470c:	1d3b      	adds	r3, r7, #4
 800470e:	2200      	movs	r2, #0
 8004710:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8004712:	1d3b      	adds	r3, r7, #4
 8004714:	2200      	movs	r2, #0
 8004716:	615a      	str	r2, [r3, #20]
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004718:	1d3b      	adds	r3, r7, #4
 800471a:	4a25      	ldr	r2, [pc, #148]	; (80047b0 <MX_USART1_UART_Init+0xf4>)
 800471c:	0019      	movs	r1, r3
 800471e:	0010      	movs	r0, r2
 8004720:	f001 ff56 	bl	80065d0 <LL_GPIO_Init>

    GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8004724:	1d3b      	adds	r3, r7, #4
 8004726:	2280      	movs	r2, #128	; 0x80
 8004728:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800472a:	1d3b      	adds	r3, r7, #4
 800472c:	2202      	movs	r2, #2
 800472e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8004730:	1d3b      	adds	r3, r7, #4
 8004732:	2203      	movs	r2, #3
 8004734:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004736:	1d3b      	adds	r3, r7, #4
 8004738:	2200      	movs	r2, #0
 800473a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800473c:	1d3b      	adds	r3, r7, #4
 800473e:	2200      	movs	r2, #0
 8004740:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8004742:	1d3b      	adds	r3, r7, #4
 8004744:	2200      	movs	r2, #0
 8004746:	615a      	str	r2, [r3, #20]
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004748:	1d3b      	adds	r3, r7, #4
 800474a:	4a19      	ldr	r2, [pc, #100]	; (80047b0 <MX_USART1_UART_Init+0xf4>)
 800474c:	0019      	movs	r1, r3
 800474e:	0010      	movs	r0, r2
 8004750:	f001 ff3e 	bl	80065d0 <LL_GPIO_Init>

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    USART_InitStruct.BaudRate = 115200;
 8004754:	193b      	adds	r3, r7, r4
 8004756:	22e1      	movs	r2, #225	; 0xe1
 8004758:	0252      	lsls	r2, r2, #9
 800475a:	601a      	str	r2, [r3, #0]
    USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800475c:	0021      	movs	r1, r4
 800475e:	187b      	adds	r3, r7, r1
 8004760:	2200      	movs	r2, #0
 8004762:	605a      	str	r2, [r3, #4]
    USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004764:	187b      	adds	r3, r7, r1
 8004766:	2200      	movs	r2, #0
 8004768:	609a      	str	r2, [r3, #8]
    USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800476a:	187b      	adds	r3, r7, r1
 800476c:	2200      	movs	r2, #0
 800476e:	60da      	str	r2, [r3, #12]
    USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004770:	187b      	adds	r3, r7, r1
 8004772:	220c      	movs	r2, #12
 8004774:	611a      	str	r2, [r3, #16]
    USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004776:	187b      	adds	r3, r7, r1
 8004778:	2200      	movs	r2, #0
 800477a:	615a      	str	r2, [r3, #20]
    USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800477c:	187b      	adds	r3, r7, r1
 800477e:	2200      	movs	r2, #0
 8004780:	619a      	str	r2, [r3, #24]
    LL_USART_Init(USART1, &USART_InitStruct);
 8004782:	187b      	adds	r3, r7, r1
 8004784:	4a0b      	ldr	r2, [pc, #44]	; (80047b4 <MX_USART1_UART_Init+0xf8>)
 8004786:	0019      	movs	r1, r3
 8004788:	0010      	movs	r0, r2
 800478a:	f002 fcab 	bl	80070e4 <LL_USART_Init>
    LL_USART_DisableIT_CTS(USART1);
 800478e:	4b09      	ldr	r3, [pc, #36]	; (80047b4 <MX_USART1_UART_Init+0xf8>)
 8004790:	0018      	movs	r0, r3
 8004792:	f7ff fb57 	bl	8003e44 <LL_USART_DisableIT_CTS>
    LL_USART_ConfigAsyncMode(USART1);
 8004796:	4b07      	ldr	r3, [pc, #28]	; (80047b4 <MX_USART1_UART_Init+0xf8>)
 8004798:	0018      	movs	r0, r3
 800479a:	f7ff fb3b 	bl	8003e14 <LL_USART_ConfigAsyncMode>
    LL_USART_Enable(USART1);
 800479e:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <MX_USART1_UART_Init+0xf8>)
 80047a0:	0018      	movs	r0, r3
 80047a2:	f7ff fb28 	bl	8003df6 <LL_USART_Enable>
}
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	46bd      	mov	sp, r7
 80047aa:	b00f      	add	sp, #60	; 0x3c
 80047ac:	bd90      	pop	{r4, r7, pc}
 80047ae:	46c0      	nop			; (mov r8, r8)
 80047b0:	48000400 	.word	0x48000400
 80047b4:	40013800 	.word	0x40013800

080047b8 <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
    /* Init with LL driver */
    /* DMA controller clock enable */
    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80047bc:	2001      	movs	r0, #1
 80047be:	f7ff f895 	bl	80038ec <LL_AHB1_GRP1_EnableClock>

    NVIC_SetPriority(DMA1_Channel1_IRQn, 1U);
 80047c2:	2101      	movs	r1, #1
 80047c4:	2009      	movs	r0, #9
 80047c6:	f7fe fd67 	bl	8003298 <__NVIC_SetPriority>
    NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80047ca:	2009      	movs	r0, #9
 80047cc:	f7fe fd4a 	bl	8003264 <__NVIC_EnableIRQ>

    /* DMA interrupt init */
    /* DMA1_Channel4_5_IRQn interrupt configuration */
    NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0);
 80047d0:	2100      	movs	r1, #0
 80047d2:	200b      	movs	r0, #11
 80047d4:	f7fe fd60 	bl	8003298 <__NVIC_SetPriority>
    NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80047d8:	200b      	movs	r0, #11
 80047da:	f7fe fd43 	bl	8003264 <__NVIC_EnableIRQ>
}
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
    LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047ea:	003b      	movs	r3, r7
 80047ec:	0018      	movs	r0, r3
 80047ee:	2318      	movs	r3, #24
 80047f0:	001a      	movs	r2, r3
 80047f2:	2100      	movs	r1, #0
 80047f4:	f002 fd55 	bl	80072a2 <memset>

    /* GPIO Ports Clock Enable */
    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80047f8:	2380      	movs	r3, #128	; 0x80
 80047fa:	029b      	lsls	r3, r3, #10
 80047fc:	0018      	movs	r0, r3
 80047fe:	f7ff f875 	bl	80038ec <LL_AHB1_GRP1_EnableClock>
    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004802:	2380      	movs	r3, #128	; 0x80
 8004804:	02db      	lsls	r3, r3, #11
 8004806:	0018      	movs	r0, r3
 8004808:	f7ff f870 	bl	80038ec <LL_AHB1_GRP1_EnableClock>

    /**/
    LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_15);
 800480c:	2380      	movs	r3, #128	; 0x80
 800480e:	021a      	lsls	r2, r3, #8
 8004810:	2390      	movs	r3, #144	; 0x90
 8004812:	05db      	lsls	r3, r3, #23
 8004814:	0011      	movs	r1, r2
 8004816:	0018      	movs	r0, r3
 8004818:	f7ff fb5e 	bl	8003ed8 <LL_GPIO_ResetOutputPin>

    /**/
    GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800481c:	003b      	movs	r3, r7
 800481e:	2280      	movs	r2, #128	; 0x80
 8004820:	0212      	lsls	r2, r2, #8
 8004822:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004824:	003b      	movs	r3, r7
 8004826:	2201      	movs	r2, #1
 8004828:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800482a:	003b      	movs	r3, r7
 800482c:	2200      	movs	r2, #0
 800482e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004830:	003b      	movs	r3, r7
 8004832:	2200      	movs	r2, #0
 8004834:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004836:	003b      	movs	r3, r7
 8004838:	2200      	movs	r2, #0
 800483a:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800483c:	003a      	movs	r2, r7
 800483e:	2390      	movs	r3, #144	; 0x90
 8004840:	05db      	lsls	r3, r3, #23
 8004842:	0011      	movs	r1, r2
 8004844:	0018      	movs	r0, r3
 8004846:	f001 fec3 	bl	80065d0 <LL_GPIO_Init>

    //for uart
    GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800484a:	003b      	movs	r3, r7
 800484c:	2280      	movs	r2, #128	; 0x80
 800484e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004850:	003b      	movs	r3, r7
 8004852:	2201      	movs	r2, #1
 8004854:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004856:	003b      	movs	r3, r7
 8004858:	2200      	movs	r2, #0
 800485a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800485c:	003b      	movs	r3, r7
 800485e:	2200      	movs	r2, #0
 8004860:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004862:	003b      	movs	r3, r7
 8004864:	2200      	movs	r2, #0
 8004866:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004868:	003b      	movs	r3, r7
 800486a:	4a26      	ldr	r2, [pc, #152]	; (8004904 <MX_GPIO_Init+0x120>)
 800486c:	0019      	movs	r1, r3
 800486e:	0010      	movs	r0, r2
 8004870:	f001 feae 	bl	80065d0 <LL_GPIO_Init>
    LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_7);
 8004874:	4b23      	ldr	r3, [pc, #140]	; (8004904 <MX_GPIO_Init+0x120>)
 8004876:	2180      	movs	r1, #128	; 0x80
 8004878:	0018      	movs	r0, r3
 800487a:	f7ff fb21 	bl	8003ec0 <LL_GPIO_SetOutputPin>

#ifndef TEST_PIN

    GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800487e:	003b      	movs	r3, r7
 8004880:	2208      	movs	r2, #8
 8004882:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004884:	003b      	movs	r3, r7
 8004886:	2201      	movs	r2, #1
 8004888:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800488a:	003b      	movs	r3, r7
 800488c:	2200      	movs	r2, #0
 800488e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004890:	003b      	movs	r3, r7
 8004892:	2200      	movs	r2, #0
 8004894:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004896:	003b      	movs	r3, r7
 8004898:	2200      	movs	r2, #0
 800489a:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800489c:	003b      	movs	r3, r7
 800489e:	4a19      	ldr	r2, [pc, #100]	; (8004904 <MX_GPIO_Init+0x120>)
 80048a0:	0019      	movs	r1, r3
 80048a2:	0010      	movs	r0, r2
 80048a4:	f001 fe94 	bl	80065d0 <LL_GPIO_Init>

    GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80048a8:	003b      	movs	r3, r7
 80048aa:	2210      	movs	r2, #16
 80048ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80048ae:	003b      	movs	r3, r7
 80048b0:	2201      	movs	r2, #1
 80048b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80048b4:	003b      	movs	r3, r7
 80048b6:	2200      	movs	r2, #0
 80048b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80048ba:	003b      	movs	r3, r7
 80048bc:	2200      	movs	r2, #0
 80048be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80048c0:	003b      	movs	r3, r7
 80048c2:	2200      	movs	r2, #0
 80048c4:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048c6:	003b      	movs	r3, r7
 80048c8:	4a0e      	ldr	r2, [pc, #56]	; (8004904 <MX_GPIO_Init+0x120>)
 80048ca:	0019      	movs	r1, r3
 80048cc:	0010      	movs	r0, r2
 80048ce:	f001 fe7f 	bl	80065d0 <LL_GPIO_Init>

    GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80048d2:	003b      	movs	r3, r7
 80048d4:	2220      	movs	r2, #32
 80048d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80048d8:	003b      	movs	r3, r7
 80048da:	2201      	movs	r2, #1
 80048dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80048de:	003b      	movs	r3, r7
 80048e0:	2200      	movs	r2, #0
 80048e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80048e4:	003b      	movs	r3, r7
 80048e6:	2200      	movs	r2, #0
 80048e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80048ea:	003b      	movs	r3, r7
 80048ec:	2200      	movs	r2, #0
 80048ee:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048f0:	003b      	movs	r3, r7
 80048f2:	4a04      	ldr	r2, [pc, #16]	; (8004904 <MX_GPIO_Init+0x120>)
 80048f4:	0019      	movs	r1, r3
 80048f6:	0010      	movs	r0, r2
 80048f8:	f001 fe6a 	bl	80065d0 <LL_GPIO_Init>

#endif

}
 80048fc:	46c0      	nop			; (mov r8, r8)
 80048fe:	46bd      	mov	sp, r7
 8004900:	b006      	add	sp, #24
 8004902:	bd80      	pop	{r7, pc}
 8004904:	48000400 	.word	0x48000400

08004908 <MX_ADC_Init>:

static void MX_ADC_Init(void)
{
 8004908:	b590      	push	{r4, r7, lr}
 800490a:	b09b      	sub	sp, #108	; 0x6c
 800490c:	af00      	add	r7, sp, #0

    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800490e:	2380      	movs	r3, #128	; 0x80
 8004910:	029b      	lsls	r3, r3, #10
 8004912:	0018      	movs	r0, r3
 8004914:	f7fe ffea 	bl	80038ec <LL_AHB1_GRP1_EnableClock>
    LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_ADC1);
 8004918:	2380      	movs	r3, #128	; 0x80
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	0018      	movs	r0, r3
 800491e:	f7ff f811 	bl	8003944 <LL_APB1_GRP2_EnableClock>
    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8004922:	2001      	movs	r0, #1
 8004924:	f7fe ffe2 	bl	80038ec <LL_AHB1_GRP1_EnableClock>
    PA2   ------> ADC_IN2
    PA3   ------> ADC_IN3
    PA4   ------> ADC_IN4
    PA5   ------> ADC_IN5
    */
    LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004928:	2450      	movs	r4, #80	; 0x50
 800492a:	193b      	adds	r3, r7, r4
 800492c:	0018      	movs	r0, r3
 800492e:	2318      	movs	r3, #24
 8004930:	001a      	movs	r2, r3
 8004932:	2100      	movs	r1, #0
 8004934:	f002 fcb5 	bl	80072a2 <memset>
    GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8004938:	193b      	adds	r3, r7, r4
 800493a:	2202      	movs	r2, #2
 800493c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800493e:	193b      	adds	r3, r7, r4
 8004940:	2203      	movs	r2, #3
 8004942:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004944:	193b      	adds	r3, r7, r4
 8004946:	2200      	movs	r2, #0
 8004948:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800494a:	193a      	adds	r2, r7, r4
 800494c:	2390      	movs	r3, #144	; 0x90
 800494e:	05db      	lsls	r3, r3, #23
 8004950:	0011      	movs	r1, r2
 8004952:	0018      	movs	r0, r3
 8004954:	f001 fe3c 	bl	80065d0 <LL_GPIO_Init>

    GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8004958:	193b      	adds	r3, r7, r4
 800495a:	2204      	movs	r2, #4
 800495c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800495e:	193b      	adds	r3, r7, r4
 8004960:	2203      	movs	r2, #3
 8004962:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004964:	193b      	adds	r3, r7, r4
 8004966:	2200      	movs	r2, #0
 8004968:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800496a:	193a      	adds	r2, r7, r4
 800496c:	2390      	movs	r3, #144	; 0x90
 800496e:	05db      	lsls	r3, r3, #23
 8004970:	0011      	movs	r1, r2
 8004972:	0018      	movs	r0, r3
 8004974:	f001 fe2c 	bl	80065d0 <LL_GPIO_Init>

    GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8004978:	193b      	adds	r3, r7, r4
 800497a:	2208      	movs	r2, #8
 800497c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800497e:	193b      	adds	r3, r7, r4
 8004980:	2203      	movs	r2, #3
 8004982:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004984:	193b      	adds	r3, r7, r4
 8004986:	2200      	movs	r2, #0
 8004988:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800498a:	193a      	adds	r2, r7, r4
 800498c:	2390      	movs	r3, #144	; 0x90
 800498e:	05db      	lsls	r3, r3, #23
 8004990:	0011      	movs	r1, r2
 8004992:	0018      	movs	r0, r3
 8004994:	f001 fe1c 	bl	80065d0 <LL_GPIO_Init>

    GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8004998:	193b      	adds	r3, r7, r4
 800499a:	2210      	movs	r2, #16
 800499c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800499e:	193b      	adds	r3, r7, r4
 80049a0:	2203      	movs	r2, #3
 80049a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80049a4:	193b      	adds	r3, r7, r4
 80049a6:	2200      	movs	r2, #0
 80049a8:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049aa:	193a      	adds	r2, r7, r4
 80049ac:	2390      	movs	r3, #144	; 0x90
 80049ae:	05db      	lsls	r3, r3, #23
 80049b0:	0011      	movs	r1, r2
 80049b2:	0018      	movs	r0, r3
 80049b4:	f001 fe0c 	bl	80065d0 <LL_GPIO_Init>

    GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80049b8:	193b      	adds	r3, r7, r4
 80049ba:	2220      	movs	r2, #32
 80049bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80049be:	193b      	adds	r3, r7, r4
 80049c0:	2203      	movs	r2, #3
 80049c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80049c4:	193b      	adds	r3, r7, r4
 80049c6:	2200      	movs	r2, #0
 80049c8:	611a      	str	r2, [r3, #16]
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ca:	193a      	adds	r2, r7, r4
 80049cc:	2390      	movs	r3, #144	; 0x90
 80049ce:	05db      	lsls	r3, r3, #23
 80049d0:	0011      	movs	r1, r2
 80049d2:	0018      	movs	r0, r3
 80049d4:	f001 fdfc 	bl	80065d0 <LL_GPIO_Init>

    LL_DMA_DeInit(DMA1, LL_DMA_CHANNEL_1);
 80049d8:	4b4b      	ldr	r3, [pc, #300]	; (8004b08 <MX_ADC_Init+0x200>)
 80049da:	2101      	movs	r1, #1
 80049dc:	0018      	movs	r0, r3
 80049de:	f001 fc7f 	bl	80062e0 <LL_DMA_DeInit>
    LL_DMA_InitTypeDef dmaInit;
        dmaInit.PeriphOrM2MSrcAddress = LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA);
 80049e2:	4b4a      	ldr	r3, [pc, #296]	; (8004b0c <MX_ADC_Init+0x204>)
 80049e4:	2100      	movs	r1, #0
 80049e6:	0018      	movs	r0, r3
 80049e8:	f7fe fcc4 	bl	8003374 <LL_ADC_DMA_GetRegAddr>
 80049ec:	0002      	movs	r2, r0
 80049ee:	2128      	movs	r1, #40	; 0x28
 80049f0:	187b      	adds	r3, r7, r1
 80049f2:	601a      	str	r2, [r3, #0]
        dmaInit.MemoryOrM2MDstAddress = (uint32_t)adcValues;
 80049f4:	4a46      	ldr	r2, [pc, #280]	; (8004b10 <MX_ADC_Init+0x208>)
 80049f6:	187b      	adds	r3, r7, r1
 80049f8:	605a      	str	r2, [r3, #4]
        dmaInit.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 80049fa:	187b      	adds	r3, r7, r1
 80049fc:	2200      	movs	r2, #0
 80049fe:	609a      	str	r2, [r3, #8]
        dmaInit.NbData = ADCBUFSIZE;
 8004a00:	187b      	adds	r3, r7, r1
 8004a02:	2206      	movs	r2, #6
 8004a04:	621a      	str	r2, [r3, #32]
        dmaInit.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 8004a06:	187b      	adds	r3, r7, r1
 8004a08:	2200      	movs	r2, #0
 8004a0a:	611a      	str	r2, [r3, #16]
        dmaInit.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8004a0c:	187b      	adds	r3, r7, r1
 8004a0e:	2280      	movs	r2, #128	; 0x80
 8004a10:	615a      	str	r2, [r3, #20]
        dmaInit.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_HALFWORD;
 8004a12:	187b      	adds	r3, r7, r1
 8004a14:	2280      	movs	r2, #128	; 0x80
 8004a16:	0052      	lsls	r2, r2, #1
 8004a18:	619a      	str	r2, [r3, #24]
        dmaInit.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_HALFWORD;
 8004a1a:	187b      	adds	r3, r7, r1
 8004a1c:	2280      	movs	r2, #128	; 0x80
 8004a1e:	00d2      	lsls	r2, r2, #3
 8004a20:	61da      	str	r2, [r3, #28]
        dmaInit.Mode = LL_DMA_MODE_CIRCULAR;
 8004a22:	187b      	adds	r3, r7, r1
 8004a24:	2220      	movs	r2, #32
 8004a26:	60da      	str	r2, [r3, #12]
        dmaInit.Priority = LL_DMA_PRIORITY_HIGH;
 8004a28:	187b      	adds	r3, r7, r1
 8004a2a:	2280      	movs	r2, #128	; 0x80
 8004a2c:	0192      	lsls	r2, r2, #6
 8004a2e:	625a      	str	r2, [r3, #36]	; 0x24
        LL_DMA_Init(DMA1, LL_DMA_CHANNEL_1, &dmaInit);
 8004a30:	187b      	adds	r3, r7, r1
 8004a32:	4835      	ldr	r0, [pc, #212]	; (8004b08 <MX_ADC_Init+0x200>)
 8004a34:	001a      	movs	r2, r3
 8004a36:	2101      	movs	r1, #1
 8004a38:	f001 fcd8 	bl	80063ec <LL_DMA_Init>


    LL_ADC_CommonDeInit(__LL_ADC_COMMON_INSTANCE(ADC1));
 8004a3c:	4b35      	ldr	r3, [pc, #212]	; (8004b14 <MX_ADC_Init+0x20c>)
 8004a3e:	0018      	movs	r0, r3
 8004a40:	f001 fa88 	bl	8005f54 <LL_ADC_CommonDeInit>
    LL_ADC_DeInit(ADC1);
 8004a44:	4b31      	ldr	r3, [pc, #196]	; (8004b0c <MX_ADC_Init+0x204>)
 8004a46:	0018      	movs	r0, r3
 8004a48:	f001 fa98 	bl	8005f7c <LL_ADC_DeInit>
    LL_ADC_InitTypeDef adcInit;
        adcInit.Clock = LL_ADC_CLOCK_ASYNC;
 8004a4c:	2118      	movs	r1, #24
 8004a4e:	187b      	adds	r3, r7, r1
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]
        adcInit.Resolution = LL_ADC_RESOLUTION_12B;
 8004a54:	187b      	adds	r3, r7, r1
 8004a56:	2200      	movs	r2, #0
 8004a58:	605a      	str	r2, [r3, #4]
        adcInit.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8004a5a:	187b      	adds	r3, r7, r1
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	609a      	str	r2, [r3, #8]
        adcInit.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8004a60:	187b      	adds	r3, r7, r1
 8004a62:	2200      	movs	r2, #0
 8004a64:	60da      	str	r2, [r3, #12]
        LL_ADC_Init(ADC1, &adcInit);
 8004a66:	187b      	adds	r3, r7, r1
 8004a68:	4a28      	ldr	r2, [pc, #160]	; (8004b0c <MX_ADC_Init+0x204>)
 8004a6a:	0019      	movs	r1, r3
 8004a6c:	0010      	movs	r0, r2
 8004a6e:	f001 fb25 	bl	80060bc <LL_ADC_Init>

    LL_ADC_REG_InitTypeDef adcRegInit;
        adcRegInit.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8004a72:	1d3b      	adds	r3, r7, #4
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]
        adcRegInit.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8004a78:	1d3b      	adds	r3, r7, #4
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	605a      	str	r2, [r3, #4]
        adcRegInit.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8004a7e:	1d3b      	adds	r3, r7, #4
 8004a80:	2280      	movs	r2, #128	; 0x80
 8004a82:	0192      	lsls	r2, r2, #6
 8004a84:	609a      	str	r2, [r3, #8]
        adcRegInit.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8004a86:	1d3b      	adds	r3, r7, #4
 8004a88:	2203      	movs	r2, #3
 8004a8a:	60da      	str	r2, [r3, #12]
        adcRegInit.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 8004a8c:	1d3b      	adds	r3, r7, #4
 8004a8e:	2280      	movs	r2, #128	; 0x80
 8004a90:	0152      	lsls	r2, r2, #5
 8004a92:	611a      	str	r2, [r3, #16]
        LL_ADC_REG_Init(ADC1, &adcRegInit);
 8004a94:	1d3b      	adds	r3, r7, #4
 8004a96:	4a1d      	ldr	r2, [pc, #116]	; (8004b0c <MX_ADC_Init+0x204>)
 8004a98:	0019      	movs	r1, r3
 8004a9a:	0010      	movs	r0, r2
 8004a9c:	f001 fb44 	bl	8006128 <LL_ADC_REG_Init>

    LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_TEMPSENSOR);
 8004aa0:	2380      	movs	r3, #128	; 0x80
 8004aa2:	041b      	lsls	r3, r3, #16
 8004aa4:	4a1b      	ldr	r2, [pc, #108]	; (8004b14 <MX_ADC_Init+0x20c>)
 8004aa6:	0019      	movs	r1, r3
 8004aa8:	0010      	movs	r0, r2
 8004aaa:	f7fe fc6f 	bl	800338c <LL_ADC_SetCommonPathInternalCh>
    LL_ADC_REG_SetSequencerChannels(ADC1, TARGET_ADC_CHANNEL_MASK);
 8004aae:	4a1a      	ldr	r2, [pc, #104]	; (8004b18 <MX_ADC_Init+0x210>)
 8004ab0:	4b16      	ldr	r3, [pc, #88]	; (8004b0c <MX_ADC_Init+0x204>)
 8004ab2:	0011      	movs	r1, r2
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f7fe fca1 	bl	80033fc <LL_ADC_REG_SetSequencerChannels>
    LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 8004aba:	4b14      	ldr	r3, [pc, #80]	; (8004b0c <MX_ADC_Init+0x204>)
 8004abc:	2100      	movs	r1, #0
 8004abe:	0018      	movs	r0, r3
 8004ac0:	f7fe fc8a 	bl	80033d8 <LL_ADC_REG_SetSequencerScanDirection>
    LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004ac4:	4b11      	ldr	r3, [pc, #68]	; (8004b0c <MX_ADC_Init+0x204>)
 8004ac6:	2107      	movs	r1, #7
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f7fe fc73 	bl	80033b4 <LL_ADC_SetSamplingTimeCommonChannels>

    //LL_ADC_StartCalibration(ADC1);
    //while (LL_ADC_IsCalibrationOnGoing(ADC1));
    //LL_ADC_ClearFlag_ADRDY(ADC1);

    LL_ADC_Enable(ADC1);
 8004ace:	4b0f      	ldr	r3, [pc, #60]	; (8004b0c <MX_ADC_Init+0x204>)
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	f7fe fca1 	bl	8003418 <LL_ADC_Enable>
    while (!LL_ADC_IsEnabled(ADC1));
 8004ad6:	46c0      	nop			; (mov r8, r8)
 8004ad8:	4b0c      	ldr	r3, [pc, #48]	; (8004b0c <MX_ADC_Init+0x204>)
 8004ada:	0018      	movs	r0, r3
 8004adc:	f7fe fcae 	bl	800343c <LL_ADC_IsEnabled>
 8004ae0:	1e03      	subs	r3, r0, #0
 8004ae2:	d0f9      	beq.n	8004ad8 <MX_ADC_Init+0x1d0>

    LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
 8004ae4:	4b08      	ldr	r3, [pc, #32]	; (8004b08 <MX_ADC_Init+0x200>)
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f7fe fddd 	bl	80036a8 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 8004aee:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <MX_ADC_Init+0x200>)
 8004af0:	2101      	movs	r1, #1
 8004af2:	0018      	movs	r0, r3
 8004af4:	f7fe fcc4 	bl	8003480 <LL_DMA_EnableChannel>
    LL_ADC_REG_StartConversion(ADC1);
 8004af8:	4b04      	ldr	r3, [pc, #16]	; (8004b0c <MX_ADC_Init+0x204>)
 8004afa:	0018      	movs	r0, r3
 8004afc:	f7fe fcae 	bl	800345c <LL_ADC_REG_StartConversion>
}
 8004b00:	46c0      	nop			; (mov r8, r8)
 8004b02:	46bd      	mov	sp, r7
 8004b04:	b01b      	add	sp, #108	; 0x6c
 8004b06:	bd90      	pop	{r4, r7, pc}
 8004b08:	40020000 	.word	0x40020000
 8004b0c:	40012400 	.word	0x40012400
 8004b10:	2000018c 	.word	0x2000018c
 8004b14:	40012708 	.word	0x40012708
 8004b18:	dc01003e 	.word	0xdc01003e

08004b1c <LL_TIM_EnableCounter>:
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	601a      	str	r2, [r3, #0]
}
 8004b30:	46c0      	nop			; (mov r8, r8)
 8004b32:	46bd      	mov	sp, r7
 8004b34:	b002      	add	sp, #8
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <LL_TIM_DisableCounter>:
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2201      	movs	r2, #1
 8004b46:	4393      	bics	r3, r2
 8004b48:	001a      	movs	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	601a      	str	r2, [r3, #0]
}
 8004b4e:	46c0      	nop			; (mov r8, r8)
 8004b50:	46bd      	mov	sp, r7
 8004b52:	b002      	add	sp, #8
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <LL_TIM_SetAutoReload>:
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b082      	sub	sp, #8
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
 8004b5e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	b002      	add	sp, #8
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <LL_TIM_CC_EnableChannel>:
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b082      	sub	sp, #8
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
 8004b76:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a1a      	ldr	r2, [r3, #32]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	621a      	str	r2, [r3, #32]
}
 8004b84:	46c0      	nop			; (mov r8, r8)
 8004b86:	46bd      	mov	sp, r7
 8004b88:	b002      	add	sp, #8
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <LL_TIM_CC_DisableChannel>:
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	43d2      	mvns	r2, r2
 8004b9e:	401a      	ands	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	621a      	str	r2, [r3, #32]
}
 8004ba4:	46c0      	nop			; (mov r8, r8)
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	b002      	add	sp, #8
 8004baa:	bd80      	pop	{r7, pc}

08004bac <LL_TIM_OC_SetMode>:
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d01e      	beq.n	8004bfc <LL_TIM_OC_SetMode+0x50>
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2b04      	cmp	r3, #4
 8004bc2:	d019      	beq.n	8004bf8 <LL_TIM_OC_SetMode+0x4c>
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b10      	cmp	r3, #16
 8004bc8:	d014      	beq.n	8004bf4 <LL_TIM_OC_SetMode+0x48>
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	2b40      	cmp	r3, #64	; 0x40
 8004bce:	d00f      	beq.n	8004bf0 <LL_TIM_OC_SetMode+0x44>
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	2380      	movs	r3, #128	; 0x80
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d008      	beq.n	8004bec <LL_TIM_OC_SetMode+0x40>
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	2380      	movs	r3, #128	; 0x80
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d101      	bne.n	8004be8 <LL_TIM_OC_SetMode+0x3c>
 8004be4:	2305      	movs	r3, #5
 8004be6:	e00a      	b.n	8004bfe <LL_TIM_OC_SetMode+0x52>
 8004be8:	2306      	movs	r3, #6
 8004bea:	e008      	b.n	8004bfe <LL_TIM_OC_SetMode+0x52>
 8004bec:	2304      	movs	r3, #4
 8004bee:	e006      	b.n	8004bfe <LL_TIM_OC_SetMode+0x52>
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e004      	b.n	8004bfe <LL_TIM_OC_SetMode+0x52>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	e002      	b.n	8004bfe <LL_TIM_OC_SetMode+0x52>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <LL_TIM_OC_SetMode+0x52>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	2017      	movs	r0, #23
 8004c00:	183a      	adds	r2, r7, r0
 8004c02:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	3318      	adds	r3, #24
 8004c08:	0019      	movs	r1, r3
 8004c0a:	183b      	adds	r3, r7, r0
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	4a0e      	ldr	r2, [pc, #56]	; (8004c48 <LL_TIM_OC_SetMode+0x9c>)
 8004c10:	5cd3      	ldrb	r3, [r2, r3]
 8004c12:	18cb      	adds	r3, r1, r3
 8004c14:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	183a      	adds	r2, r7, r0
 8004c1c:	7812      	ldrb	r2, [r2, #0]
 8004c1e:	490b      	ldr	r1, [pc, #44]	; (8004c4c <LL_TIM_OC_SetMode+0xa0>)
 8004c20:	5c8a      	ldrb	r2, [r1, r2]
 8004c22:	0011      	movs	r1, r2
 8004c24:	2273      	movs	r2, #115	; 0x73
 8004c26:	408a      	lsls	r2, r1
 8004c28:	43d2      	mvns	r2, r2
 8004c2a:	401a      	ands	r2, r3
 8004c2c:	183b      	adds	r3, r7, r0
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	4906      	ldr	r1, [pc, #24]	; (8004c4c <LL_TIM_OC_SetMode+0xa0>)
 8004c32:	5ccb      	ldrb	r3, [r1, r3]
 8004c34:	0019      	movs	r1, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	408b      	lsls	r3, r1
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	601a      	str	r2, [r3, #0]
}
 8004c40:	46c0      	nop			; (mov r8, r8)
 8004c42:	46bd      	mov	sp, r7
 8004c44:	b006      	add	sp, #24
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	0800745c 	.word	0x0800745c
 8004c4c:	08007464 	.word	0x08007464

08004c50 <LL_TIM_OC_SetDeadTime>:
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->BDTR, TIM_BDTR_DTG, DeadTime);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5e:	22ff      	movs	r2, #255	; 0xff
 8004c60:	4393      	bics	r3, r2
 8004c62:	001a      	movs	r2, r3
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004c6c:	46c0      	nop			; (mov r8, r8)
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	b002      	add	sp, #8
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <LL_TIM_OC_SetCompareCH1>:
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004c84:	46c0      	nop			; (mov r8, r8)
 8004c86:	46bd      	mov	sp, r7
 8004c88:	b002      	add	sp, #8
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <LL_TIM_OC_SetCompareCH2>:
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004c9c:	46c0      	nop			; (mov r8, r8)
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	b002      	add	sp, #8
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <LL_TIM_OC_SetCompareCH3>:
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004cb4:	46c0      	nop			; (mov r8, r8)
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	b002      	add	sp, #8
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <LL_TIM_EnableAllOutputs>:
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc8:	2280      	movs	r2, #128	; 0x80
 8004cca:	0212      	lsls	r2, r2, #8
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004cd2:	46c0      	nop			; (mov r8, r8)
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	b002      	add	sp, #8
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <LL_TIM_EnableIT_UPDATE>:
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b082      	sub	sp, #8
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	60da      	str	r2, [r3, #12]
}
 8004cee:	46c0      	nop			; (mov r8, r8)
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	b002      	add	sp, #8
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <LL_TIM_GenerateEvent_COM>:
  * @rmtoll EGR          COMG          LL_TIM_GenerateEvent_COM
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_COM(TIM_TypeDef *TIMx)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	2220      	movs	r2, #32
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	615a      	str	r2, [r3, #20]
}
 8004d0a:	46c0      	nop			; (mov r8, r8)
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	b002      	add	sp, #8
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <irq_primask_disable>:
    __set_PRIMASK(state);
}

// 屏蔽全部中断
static inline void irq_primask_disable(void)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b082      	sub	sp, #8
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	2301      	movs	r3, #1
 8004d1a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f383 8810 	msr	PRIMASK, r3
}
 8004d22:	46c0      	nop			; (mov r8, r8)
    __set_PRIMASK(1);
}
 8004d24:	46c0      	nop			; (mov r8, r8)
 8004d26:	46bd      	mov	sp, r7
 8004d28:	b002      	add	sp, #8
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <irq_primask_enable>:

// 接触屏蔽全部中断
static inline void irq_primask_enable(void) {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	2300      	movs	r3, #0
 8004d34:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f383 8810 	msr	PRIMASK, r3
}
 8004d3c:	46c0      	nop			; (mov r8, r8)
    __set_PRIMASK(0);
}
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	46bd      	mov	sp, r7
 8004d42:	b002      	add	sp, #8
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <init_constants>:
uint32_t calculate_pwm_sin(uint8_t sine_offset){
    return ((pwmSin[sine_offset] / 360.0f)) * _pwm_step; //get_pwm_duty();
}
*/
static void init_constants(uint16_t frequency, uint16_t pwm_dead_time_ns)
{
 8004d48:	b590      	push	{r4, r7, lr}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	0002      	movs	r2, r0
 8004d50:	1dbb      	adds	r3, r7, #6
 8004d52:	801a      	strh	r2, [r3, #0]
 8004d54:	1d3b      	adds	r3, r7, #4
 8004d56:	1c0a      	adds	r2, r1, #0
 8004d58:	801a      	strh	r2, [r3, #0]
    _pwm_freq = frequency;
 8004d5a:	4b34      	ldr	r3, [pc, #208]	; (8004e2c <init_constants+0xe4>)
 8004d5c:	1dba      	adds	r2, r7, #6
 8004d5e:	8812      	ldrh	r2, [r2, #0]
 8004d60:	801a      	strh	r2, [r3, #0]
    _pwm_step = (SystemCoreClock / frequency) - 1;
 8004d62:	4b33      	ldr	r3, [pc, #204]	; (8004e30 <init_constants+0xe8>)
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	1dbb      	adds	r3, r7, #6
 8004d68:	881b      	ldrh	r3, [r3, #0]
 8004d6a:	0019      	movs	r1, r3
 8004d6c:	0010      	movs	r0, r2
 8004d6e:	f7fb f9cb 	bl	8000108 <__udivsi3>
 8004d72:	0003      	movs	r3, r0
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	3b01      	subs	r3, #1
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	4b2e      	ldr	r3, [pc, #184]	; (8004e34 <init_constants+0xec>)
 8004d7c:	801a      	strh	r2, [r3, #0]

    _pwm_max = _pwm_step ;//1999
 8004d7e:	4b2d      	ldr	r3, [pc, #180]	; (8004e34 <init_constants+0xec>)
 8004d80:	881a      	ldrh	r2, [r3, #0]
 8004d82:	4b2d      	ldr	r3, [pc, #180]	; (8004e38 <init_constants+0xf0>)
 8004d84:	801a      	strh	r2, [r3, #0]
    _pwm_mid = _pwm_max / 2;
 8004d86:	4b2c      	ldr	r3, [pc, #176]	; (8004e38 <init_constants+0xf0>)
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	085b      	lsrs	r3, r3, #1
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	4b2b      	ldr	r3, [pc, #172]	; (8004e3c <init_constants+0xf4>)
 8004d90:	801a      	strh	r2, [r3, #0]
    _pwm_min = (uint16_t)((pwm_dead_time_ns / 1e9f) / (1.0f / SystemCoreClock));
 8004d92:	1d3b      	adds	r3, r7, #4
 8004d94:	881b      	ldrh	r3, [r3, #0]
 8004d96:	0018      	movs	r0, r3
 8004d98:	f7fb ff32 	bl	8000c00 <__aeabi_i2f>
 8004d9c:	1c03      	adds	r3, r0, #0
 8004d9e:	4928      	ldr	r1, [pc, #160]	; (8004e40 <init_constants+0xf8>)
 8004da0:	1c18      	adds	r0, r3, #0
 8004da2:	f7fb fb97 	bl	80004d4 <__aeabi_fdiv>
 8004da6:	1c03      	adds	r3, r0, #0
 8004da8:	1c1c      	adds	r4, r3, #0
 8004daa:	4b21      	ldr	r3, [pc, #132]	; (8004e30 <init_constants+0xe8>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	0018      	movs	r0, r3
 8004db0:	f7fb ff74 	bl	8000c9c <__aeabi_ui2f>
 8004db4:	1c03      	adds	r3, r0, #0
 8004db6:	1c19      	adds	r1, r3, #0
 8004db8:	20fe      	movs	r0, #254	; 0xfe
 8004dba:	0580      	lsls	r0, r0, #22
 8004dbc:	f7fb fb8a 	bl	80004d4 <__aeabi_fdiv>
 8004dc0:	1c03      	adds	r3, r0, #0
 8004dc2:	1c19      	adds	r1, r3, #0
 8004dc4:	1c20      	adds	r0, r4, #0
 8004dc6:	f7fb fb85 	bl	80004d4 <__aeabi_fdiv>
 8004dca:	1c03      	adds	r3, r0, #0
 8004dcc:	1c18      	adds	r0, r3, #0
 8004dce:	f7fb fb4b 	bl	8000468 <__aeabi_f2uiz>
 8004dd2:	0003      	movs	r3, r0
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	4b1b      	ldr	r3, [pc, #108]	; (8004e44 <init_constants+0xfc>)
 8004dd8:	801a      	strh	r2, [r3, #0]
    _step = 1;
 8004dda:	4b1b      	ldr	r3, [pc, #108]	; (8004e48 <init_constants+0x100>)
 8004ddc:	2201      	movs	r2, #1
 8004dde:	701a      	strb	r2, [r3, #0]
    _pwm_duty = _pwm_min;
 8004de0:	4b18      	ldr	r3, [pc, #96]	; (8004e44 <init_constants+0xfc>)
 8004de2:	881a      	ldrh	r2, [r3, #0]
 8004de4:	4b19      	ldr	r3, [pc, #100]	; (8004e4c <init_constants+0x104>)
 8004de6:	801a      	strh	r2, [r3, #0]
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_5);

    irq_primask_enable();
#endif

    set_timer_autoreload(TIM14, 300);//50HZ
 8004de8:	2396      	movs	r3, #150	; 0x96
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	4a18      	ldr	r2, [pc, #96]	; (8004e50 <init_constants+0x108>)
 8004dee:	0019      	movs	r1, r3
 8004df0:	0010      	movs	r0, r2
 8004df2:	f000 f83f 	bl	8004e74 <set_timer_autoreload>
    //LL_TIM_EnableIT_UPDATE(TIM1);
    LL_TIM_OC_SetDeadTime(TIM1, pwm_dead_time_ns);
 8004df6:	1d3b      	adds	r3, r7, #4
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	4a16      	ldr	r2, [pc, #88]	; (8004e54 <init_constants+0x10c>)
 8004dfc:	0019      	movs	r1, r3
 8004dfe:	0010      	movs	r0, r2
 8004e00:	f7ff ff26 	bl	8004c50 <LL_TIM_OC_SetDeadTime>
    LL_TIM_SetAutoReload(TIM1,  _pwm_step);//24kHZ
 8004e04:	4b0b      	ldr	r3, [pc, #44]	; (8004e34 <init_constants+0xec>)
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	001a      	movs	r2, r3
 8004e0a:	4b12      	ldr	r3, [pc, #72]	; (8004e54 <init_constants+0x10c>)
 8004e0c:	0011      	movs	r1, r2
 8004e0e:	0018      	movs	r0, r3
 8004e10:	f7ff fea1 	bl	8004b56 <LL_TIM_SetAutoReload>
    LL_TIM_EnableAllOutputs(TIM1);
 8004e14:	4b0f      	ldr	r3, [pc, #60]	; (8004e54 <init_constants+0x10c>)
 8004e16:	0018      	movs	r0, r3
 8004e18:	f7ff ff50 	bl	8004cbc <LL_TIM_EnableAllOutputs>
    LL_TIM_EnableCounter(TIM1);
 8004e1c:	4b0d      	ldr	r3, [pc, #52]	; (8004e54 <init_constants+0x10c>)
 8004e1e:	0018      	movs	r0, r3
 8004e20:	f7ff fe7c 	bl	8004b1c <LL_TIM_EnableCounter>

}
 8004e24:	46c0      	nop			; (mov r8, r8)
 8004e26:	46bd      	mov	sp, r7
 8004e28:	b003      	add	sp, #12
 8004e2a:	bd90      	pop	{r4, r7, pc}
 8004e2c:	200001a2 	.word	0x200001a2
 8004e30:	2000000c 	.word	0x2000000c
 8004e34:	200001a4 	.word	0x200001a4
 8004e38:	20000198 	.word	0x20000198
 8004e3c:	2000019a 	.word	0x2000019a
 8004e40:	4e6e6b28 	.word	0x4e6e6b28
 8004e44:	2000019c 	.word	0x2000019c
 8004e48:	2000019e 	.word	0x2000019e
 8004e4c:	200001a0 	.word	0x200001a0
 8004e50:	40002000 	.word	0x40002000
 8004e54:	40012c00 	.word	0x40012c00

08004e58 <motor_pwm_init>:

void motor_pwm_init(void) {
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
    init_constants(24000, 45);//24 khz,  sys_freq/45 ns
 8004e5c:	4b04      	ldr	r3, [pc, #16]	; (8004e70 <motor_pwm_init+0x18>)
 8004e5e:	212d      	movs	r1, #45	; 0x2d
 8004e60:	0018      	movs	r0, r3
 8004e62:	f7ff ff71 	bl	8004d48 <init_constants>
    motor_pwm_set_freewheeling();
 8004e66:	f000 fa29 	bl	80052bc <motor_pwm_set_freewheeling>
}
 8004e6a:	46c0      	nop			; (mov r8, r8)
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	00005dc0 	.word	0x00005dc0

08004e74 <set_timer_autoreload>:
    /*if(max_rpm>12000){
        uprintf("m_rpm:%d,m_thr:%d,m_bemf:%d\n", max_rpm, mosfet_thr, max_bemf_volt);
    }*/
}

void set_timer_autoreload(TIM_TypeDef *TIMx, uint32_t freq){
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
    LL_TIM_SetAutoReload(TIMx, (SystemCoreClock / freq)-1);//1khz-1);//HZ
 8004e7e:	4b08      	ldr	r3, [pc, #32]	; (8004ea0 <set_timer_autoreload+0x2c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6839      	ldr	r1, [r7, #0]
 8004e84:	0018      	movs	r0, r3
 8004e86:	f7fb f93f 	bl	8000108 <__udivsi3>
 8004e8a:	0003      	movs	r3, r0
 8004e8c:	1e5a      	subs	r2, r3, #1
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	0011      	movs	r1, r2
 8004e92:	0018      	movs	r0, r3
 8004e94:	f7ff fe5f 	bl	8004b56 <LL_TIM_SetAutoReload>
}
 8004e98:	46c0      	nop			; (mov r8, r8)
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	b002      	add	sp, #8
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	2000000c 	.word	0x2000000c

08004ea4 <set_comutate_freq>:

void set_comutate_freq(uint32_t freq){
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
    set_timer_autoreload(TIM14, freq);//comutator
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a06      	ldr	r2, [pc, #24]	; (8004ec8 <set_comutate_freq+0x24>)
 8004eb0:	0019      	movs	r1, r3
 8004eb2:	0010      	movs	r0, r2
 8004eb4:	f7ff ffde 	bl	8004e74 <set_timer_autoreload>
    _comate_freq = freq;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	4b03      	ldr	r3, [pc, #12]	; (8004ecc <set_comutate_freq+0x28>)
 8004ebe:	801a      	strh	r2, [r3, #0]
}
 8004ec0:	46c0      	nop			; (mov r8, r8)
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	b002      	add	sp, #8
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40002000 	.word	0x40002000
 8004ecc:	200001a6 	.word	0x200001a6

08004ed0 <phase_float>:

uint16_t get_rpm(){
    return (6000000 / (actual_time * (com_block / 2)));
}

static inline void phase_float(motorPhase_e phase){
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	0002      	movs	r2, r0
 8004ed8:	1dfb      	adds	r3, r7, #7
 8004eda:	701a      	strb	r2, [r3, #0]
    switch(phase) {
 8004edc:	1dfb      	adds	r3, r7, #7
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d02c      	beq.n	8004f3e <phase_float+0x6e>
 8004ee4:	dc3c      	bgt.n	8004f60 <phase_float+0x90>
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <phase_float+0x20>
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d016      	beq.n	8004f1c <phase_float+0x4c>
            LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH1);
            LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH1N);
            //CFetLoOn();
            break;
        default:
            break;
 8004eee:	e037      	b.n	8004f60 <phase_float+0x90>
            LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_INACTIVE);
 8004ef0:	2380      	movs	r3, #128	; 0x80
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	481d      	ldr	r0, [pc, #116]	; (8004f6c <phase_float+0x9c>)
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	0019      	movs	r1, r3
 8004efa:	f7ff fe57 	bl	8004bac <LL_TIM_OC_SetMode>
            LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH3);
 8004efe:	2380      	movs	r3, #128	; 0x80
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	4a1a      	ldr	r2, [pc, #104]	; (8004f6c <phase_float+0x9c>)
 8004f04:	0019      	movs	r1, r3
 8004f06:	0010      	movs	r0, r2
 8004f08:	f7ff fe40 	bl	8004b8c <LL_TIM_CC_DisableChannel>
            LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH3N);
 8004f0c:	2380      	movs	r3, #128	; 0x80
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	4a16      	ldr	r2, [pc, #88]	; (8004f6c <phase_float+0x9c>)
 8004f12:	0019      	movs	r1, r3
 8004f14:	0010      	movs	r0, r2
 8004f16:	f7ff fe39 	bl	8004b8c <LL_TIM_CC_DisableChannel>
            break;
 8004f1a:	e022      	b.n	8004f62 <phase_float+0x92>
            LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_INACTIVE);
 8004f1c:	4b13      	ldr	r3, [pc, #76]	; (8004f6c <phase_float+0x9c>)
 8004f1e:	2220      	movs	r2, #32
 8004f20:	2110      	movs	r1, #16
 8004f22:	0018      	movs	r0, r3
 8004f24:	f7ff fe42 	bl	8004bac <LL_TIM_OC_SetMode>
            LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH2);
 8004f28:	4b10      	ldr	r3, [pc, #64]	; (8004f6c <phase_float+0x9c>)
 8004f2a:	2110      	movs	r1, #16
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	f7ff fe2d 	bl	8004b8c <LL_TIM_CC_DisableChannel>
            LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH2N);
 8004f32:	4b0e      	ldr	r3, [pc, #56]	; (8004f6c <phase_float+0x9c>)
 8004f34:	2140      	movs	r1, #64	; 0x40
 8004f36:	0018      	movs	r0, r3
 8004f38:	f7ff fe28 	bl	8004b8c <LL_TIM_CC_DisableChannel>
            break;
 8004f3c:	e011      	b.n	8004f62 <phase_float+0x92>
            LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_INACTIVE);
 8004f3e:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <phase_float+0x9c>)
 8004f40:	2220      	movs	r2, #32
 8004f42:	2101      	movs	r1, #1
 8004f44:	0018      	movs	r0, r3
 8004f46:	f7ff fe31 	bl	8004bac <LL_TIM_OC_SetMode>
            LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH1);
 8004f4a:	4b08      	ldr	r3, [pc, #32]	; (8004f6c <phase_float+0x9c>)
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	0018      	movs	r0, r3
 8004f50:	f7ff fe1c 	bl	8004b8c <LL_TIM_CC_DisableChannel>
            LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH1N);
 8004f54:	4b05      	ldr	r3, [pc, #20]	; (8004f6c <phase_float+0x9c>)
 8004f56:	2104      	movs	r1, #4
 8004f58:	0018      	movs	r0, r3
 8004f5a:	f7ff fe17 	bl	8004b8c <LL_TIM_CC_DisableChannel>
            break;
 8004f5e:	e000      	b.n	8004f62 <phase_float+0x92>
            break;
 8004f60:	46c0      	nop			; (mov r8, r8)
    }
}
 8004f62:	46c0      	nop			; (mov r8, r8)
 8004f64:	46bd      	mov	sp, r7
 8004f66:	b002      	add	sp, #8
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	46c0      	nop			; (mov r8, r8)
 8004f6c:	40012c00 	.word	0x40012c00

08004f70 <phase_n_pwm>:

static inline void phase_n_pwm(motorPhase_e phase, uint_fast16_t pwm_val){
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	0002      	movs	r2, r0
 8004f78:	6039      	str	r1, [r7, #0]
 8004f7a:	1dfb      	adds	r3, r7, #7
 8004f7c:	701a      	strb	r2, [r3, #0]

    switch(phase) {
 8004f7e:	1dfb      	adds	r3, r7, #7
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d02c      	beq.n	8004fe0 <phase_n_pwm+0x70>
 8004f86:	dc3c      	bgt.n	8005002 <phase_n_pwm+0x92>
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d002      	beq.n	8004f92 <phase_n_pwm+0x22>
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d016      	beq.n	8004fbe <phase_n_pwm+0x4e>
            LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH1);
            LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1N);
            //CFetHiOff();
            break;
        default:
            break;
 8004f90:	e037      	b.n	8005002 <phase_n_pwm+0x92>
            LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_PWM1);
 8004f92:	2380      	movs	r3, #128	; 0x80
 8004f94:	005b      	lsls	r3, r3, #1
 8004f96:	481d      	ldr	r0, [pc, #116]	; (800500c <phase_n_pwm+0x9c>)
 8004f98:	2260      	movs	r2, #96	; 0x60
 8004f9a:	0019      	movs	r1, r3
 8004f9c:	f7ff fe06 	bl	8004bac <LL_TIM_OC_SetMode>
            LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH3);
 8004fa0:	2380      	movs	r3, #128	; 0x80
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	4a19      	ldr	r2, [pc, #100]	; (800500c <phase_n_pwm+0x9c>)
 8004fa6:	0019      	movs	r1, r3
 8004fa8:	0010      	movs	r0, r2
 8004faa:	f7ff fdef 	bl	8004b8c <LL_TIM_CC_DisableChannel>
            LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH3N);
 8004fae:	2380      	movs	r3, #128	; 0x80
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	4a16      	ldr	r2, [pc, #88]	; (800500c <phase_n_pwm+0x9c>)
 8004fb4:	0019      	movs	r1, r3
 8004fb6:	0010      	movs	r0, r2
 8004fb8:	f7ff fdd9 	bl	8004b6e <LL_TIM_CC_EnableChannel>
            break;
 8004fbc:	e022      	b.n	8005004 <phase_n_pwm+0x94>
            LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1);
 8004fbe:	4b13      	ldr	r3, [pc, #76]	; (800500c <phase_n_pwm+0x9c>)
 8004fc0:	2260      	movs	r2, #96	; 0x60
 8004fc2:	2110      	movs	r1, #16
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	f7ff fdf1 	bl	8004bac <LL_TIM_OC_SetMode>
            LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH2);
 8004fca:	4b10      	ldr	r3, [pc, #64]	; (800500c <phase_n_pwm+0x9c>)
 8004fcc:	2110      	movs	r1, #16
 8004fce:	0018      	movs	r0, r3
 8004fd0:	f7ff fddc 	bl	8004b8c <LL_TIM_CC_DisableChannel>
            LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH2N);
 8004fd4:	4b0d      	ldr	r3, [pc, #52]	; (800500c <phase_n_pwm+0x9c>)
 8004fd6:	2140      	movs	r1, #64	; 0x40
 8004fd8:	0018      	movs	r0, r3
 8004fda:	f7ff fdc8 	bl	8004b6e <LL_TIM_CC_EnableChannel>
            break;
 8004fde:	e011      	b.n	8005004 <phase_n_pwm+0x94>
            LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1);
 8004fe0:	4b0a      	ldr	r3, [pc, #40]	; (800500c <phase_n_pwm+0x9c>)
 8004fe2:	2260      	movs	r2, #96	; 0x60
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	f7ff fde0 	bl	8004bac <LL_TIM_OC_SetMode>
            LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH1);
 8004fec:	4b07      	ldr	r3, [pc, #28]	; (800500c <phase_n_pwm+0x9c>)
 8004fee:	2101      	movs	r1, #1
 8004ff0:	0018      	movs	r0, r3
 8004ff2:	f7ff fdcb 	bl	8004b8c <LL_TIM_CC_DisableChannel>
            LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1N);
 8004ff6:	4b05      	ldr	r3, [pc, #20]	; (800500c <phase_n_pwm+0x9c>)
 8004ff8:	2104      	movs	r1, #4
 8004ffa:	0018      	movs	r0, r3
 8004ffc:	f7ff fdb7 	bl	8004b6e <LL_TIM_CC_EnableChannel>
            break;
 8005000:	e000      	b.n	8005004 <phase_n_pwm+0x94>
            break;
 8005002:	46c0      	nop			; (mov r8, r8)
    }
}
 8005004:	46c0      	nop			; (mov r8, r8)
 8005006:	46bd      	mov	sp, r7
 8005008:	b002      	add	sp, #8
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40012c00 	.word	0x40012c00

08005010 <phase_p_pwm>:

static inline void phase_p_pwm(motorPhase_e phase, uint_fast16_t pwm_val){
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	0002      	movs	r2, r0
 8005018:	6039      	str	r1, [r7, #0]
 800501a:	1dfb      	adds	r3, r7, #7
 800501c:	701a      	strb	r2, [r3, #0]

    switch(phase) {
 800501e:	1dfb      	adds	r3, r7, #7
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	2b02      	cmp	r3, #2
 8005024:	d02c      	beq.n	8005080 <phase_p_pwm+0x70>
 8005026:	dc3c      	bgt.n	80050a2 <phase_p_pwm+0x92>
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <phase_p_pwm+0x22>
 800502c:	2b01      	cmp	r3, #1
 800502e:	d016      	beq.n	800505e <phase_p_pwm+0x4e>
            LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
            //CFetLoOff();
            break;

        default:
            break;
 8005030:	e037      	b.n	80050a2 <phase_p_pwm+0x92>
            LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_PWM1);
 8005032:	2380      	movs	r3, #128	; 0x80
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	481d      	ldr	r0, [pc, #116]	; (80050ac <phase_p_pwm+0x9c>)
 8005038:	2260      	movs	r2, #96	; 0x60
 800503a:	0019      	movs	r1, r3
 800503c:	f7ff fdb6 	bl	8004bac <LL_TIM_OC_SetMode>
            LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH3N);
 8005040:	2380      	movs	r3, #128	; 0x80
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	4a19      	ldr	r2, [pc, #100]	; (80050ac <phase_p_pwm+0x9c>)
 8005046:	0019      	movs	r1, r3
 8005048:	0010      	movs	r0, r2
 800504a:	f7ff fd9f 	bl	8004b8c <LL_TIM_CC_DisableChannel>
            LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH3);
 800504e:	2380      	movs	r3, #128	; 0x80
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	4a16      	ldr	r2, [pc, #88]	; (80050ac <phase_p_pwm+0x9c>)
 8005054:	0019      	movs	r1, r3
 8005056:	0010      	movs	r0, r2
 8005058:	f7ff fd89 	bl	8004b6e <LL_TIM_CC_EnableChannel>
            break;
 800505c:	e022      	b.n	80050a4 <phase_p_pwm+0x94>
            LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1);
 800505e:	4b13      	ldr	r3, [pc, #76]	; (80050ac <phase_p_pwm+0x9c>)
 8005060:	2260      	movs	r2, #96	; 0x60
 8005062:	2110      	movs	r1, #16
 8005064:	0018      	movs	r0, r3
 8005066:	f7ff fda1 	bl	8004bac <LL_TIM_OC_SetMode>
            LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH2N);
 800506a:	4b10      	ldr	r3, [pc, #64]	; (80050ac <phase_p_pwm+0x9c>)
 800506c:	2140      	movs	r1, #64	; 0x40
 800506e:	0018      	movs	r0, r3
 8005070:	f7ff fd8c 	bl	8004b8c <LL_TIM_CC_DisableChannel>
            LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH2);
 8005074:	4b0d      	ldr	r3, [pc, #52]	; (80050ac <phase_p_pwm+0x9c>)
 8005076:	2110      	movs	r1, #16
 8005078:	0018      	movs	r0, r3
 800507a:	f7ff fd78 	bl	8004b6e <LL_TIM_CC_EnableChannel>
            break;
 800507e:	e011      	b.n	80050a4 <phase_p_pwm+0x94>
            LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1);
 8005080:	4b0a      	ldr	r3, [pc, #40]	; (80050ac <phase_p_pwm+0x9c>)
 8005082:	2260      	movs	r2, #96	; 0x60
 8005084:	2101      	movs	r1, #1
 8005086:	0018      	movs	r0, r3
 8005088:	f7ff fd90 	bl	8004bac <LL_TIM_OC_SetMode>
            LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH1N);
 800508c:	4b07      	ldr	r3, [pc, #28]	; (80050ac <phase_p_pwm+0x9c>)
 800508e:	2104      	movs	r1, #4
 8005090:	0018      	movs	r0, r3
 8005092:	f7ff fd7b 	bl	8004b8c <LL_TIM_CC_DisableChannel>
            LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
 8005096:	4b05      	ldr	r3, [pc, #20]	; (80050ac <phase_p_pwm+0x9c>)
 8005098:	2101      	movs	r1, #1
 800509a:	0018      	movs	r0, r3
 800509c:	f7ff fd67 	bl	8004b6e <LL_TIM_CC_EnableChannel>
            break;
 80050a0:	e000      	b.n	80050a4 <phase_p_pwm+0x94>
            break;
 80050a2:	46c0      	nop			; (mov r8, r8)
    }
}
 80050a4:	46c0      	nop			; (mov r8, r8)
 80050a6:	46bd      	mov	sp, r7
 80050a8:	b002      	add	sp, #8
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	40012c00 	.word	0x40012c00

080050b0 <motor_pwm_stop>:


static inline void motor_pwm_stop(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0

    LL_TIM_OC_SetCompareCH1(TIM1, _pwm_mid);
 80050b4:	4b29      	ldr	r3, [pc, #164]	; (800515c <motor_pwm_stop+0xac>)
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	001a      	movs	r2, r3
 80050ba:	4b29      	ldr	r3, [pc, #164]	; (8005160 <motor_pwm_stop+0xb0>)
 80050bc:	0011      	movs	r1, r2
 80050be:	0018      	movs	r0, r3
 80050c0:	f7ff fdd8 	bl	8004c74 <LL_TIM_OC_SetCompareCH1>
    LL_TIM_OC_SetCompareCH2(TIM1, _pwm_mid);
 80050c4:	4b25      	ldr	r3, [pc, #148]	; (800515c <motor_pwm_stop+0xac>)
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	001a      	movs	r2, r3
 80050ca:	4b25      	ldr	r3, [pc, #148]	; (8005160 <motor_pwm_stop+0xb0>)
 80050cc:	0011      	movs	r1, r2
 80050ce:	0018      	movs	r0, r3
 80050d0:	f7ff fddc 	bl	8004c8c <LL_TIM_OC_SetCompareCH2>
    LL_TIM_OC_SetCompareCH3(TIM1, _pwm_mid);
 80050d4:	4b21      	ldr	r3, [pc, #132]	; (800515c <motor_pwm_stop+0xac>)
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	001a      	movs	r2, r3
 80050da:	4b21      	ldr	r3, [pc, #132]	; (8005160 <motor_pwm_stop+0xb0>)
 80050dc:	0011      	movs	r1, r2
 80050de:	0018      	movs	r0, r3
 80050e0:	f7ff fde0 	bl	8004ca4 <LL_TIM_OC_SetCompareCH3>

    LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_FORCED_INACTIVE);
 80050e4:	4b1e      	ldr	r3, [pc, #120]	; (8005160 <motor_pwm_stop+0xb0>)
 80050e6:	2240      	movs	r2, #64	; 0x40
 80050e8:	2101      	movs	r1, #1
 80050ea:	0018      	movs	r0, r3
 80050ec:	f7ff fd5e 	bl	8004bac <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
 80050f0:	4b1b      	ldr	r3, [pc, #108]	; (8005160 <motor_pwm_stop+0xb0>)
 80050f2:	2101      	movs	r1, #1
 80050f4:	0018      	movs	r0, r3
 80050f6:	f7ff fd3a 	bl	8004b6e <LL_TIM_CC_EnableChannel>
    LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH1N);
 80050fa:	4b19      	ldr	r3, [pc, #100]	; (8005160 <motor_pwm_stop+0xb0>)
 80050fc:	2104      	movs	r1, #4
 80050fe:	0018      	movs	r0, r3
 8005100:	f7ff fd44 	bl	8004b8c <LL_TIM_CC_DisableChannel>

    LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_FORCED_INACTIVE);
 8005104:	4b16      	ldr	r3, [pc, #88]	; (8005160 <motor_pwm_stop+0xb0>)
 8005106:	2240      	movs	r2, #64	; 0x40
 8005108:	2110      	movs	r1, #16
 800510a:	0018      	movs	r0, r3
 800510c:	f7ff fd4e 	bl	8004bac <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH2);
 8005110:	4b13      	ldr	r3, [pc, #76]	; (8005160 <motor_pwm_stop+0xb0>)
 8005112:	2110      	movs	r1, #16
 8005114:	0018      	movs	r0, r3
 8005116:	f7ff fd2a 	bl	8004b6e <LL_TIM_CC_EnableChannel>
    LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH2N);
 800511a:	4b11      	ldr	r3, [pc, #68]	; (8005160 <motor_pwm_stop+0xb0>)
 800511c:	2140      	movs	r1, #64	; 0x40
 800511e:	0018      	movs	r0, r3
 8005120:	f7ff fd34 	bl	8004b8c <LL_TIM_CC_DisableChannel>

    LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_FORCED_INACTIVE);
 8005124:	2380      	movs	r3, #128	; 0x80
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	480d      	ldr	r0, [pc, #52]	; (8005160 <motor_pwm_stop+0xb0>)
 800512a:	2240      	movs	r2, #64	; 0x40
 800512c:	0019      	movs	r1, r3
 800512e:	f7ff fd3d 	bl	8004bac <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH3);
 8005132:	2380      	movs	r3, #128	; 0x80
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	4a0a      	ldr	r2, [pc, #40]	; (8005160 <motor_pwm_stop+0xb0>)
 8005138:	0019      	movs	r1, r3
 800513a:	0010      	movs	r0, r2
 800513c:	f7ff fd17 	bl	8004b6e <LL_TIM_CC_EnableChannel>
    LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH3N);
 8005140:	2380      	movs	r3, #128	; 0x80
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	4a06      	ldr	r2, [pc, #24]	; (8005160 <motor_pwm_stop+0xb0>)
 8005146:	0019      	movs	r1, r3
 8005148:	0010      	movs	r0, r2
 800514a:	f7ff fd1f 	bl	8004b8c <LL_TIM_CC_DisableChannel>

    /* Generate TIM1 COM event by software */
    LL_TIM_GenerateEvent_COM(TIM1);
 800514e:	4b04      	ldr	r3, [pc, #16]	; (8005160 <motor_pwm_stop+0xb0>)
 8005150:	0018      	movs	r0, r3
 8005152:	f7ff fdd0 	bl	8004cf6 <LL_TIM_GenerateEvent_COM>
}
 8005156:	46c0      	nop			; (mov r8, r8)
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	2000019a 	.word	0x2000019a
 8005160:	40012c00 	.word	0x40012c00

08005164 <motor_pwm_brake>:

static void motor_pwm_brake(void)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	af00      	add	r7, sp, #0
    LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_FORCED_INACTIVE);
 8005168:	4b1d      	ldr	r3, [pc, #116]	; (80051e0 <motor_pwm_brake+0x7c>)
 800516a:	2240      	movs	r2, #64	; 0x40
 800516c:	2101      	movs	r1, #1
 800516e:	0018      	movs	r0, r3
 8005170:	f7ff fd1c 	bl	8004bac <LL_TIM_OC_SetMode>
    LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH1);
 8005174:	4b1a      	ldr	r3, [pc, #104]	; (80051e0 <motor_pwm_brake+0x7c>)
 8005176:	2101      	movs	r1, #1
 8005178:	0018      	movs	r0, r3
 800517a:	f7ff fd07 	bl	8004b8c <LL_TIM_CC_DisableChannel>
    LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH1N);
 800517e:	4b18      	ldr	r3, [pc, #96]	; (80051e0 <motor_pwm_brake+0x7c>)
 8005180:	2104      	movs	r1, #4
 8005182:	0018      	movs	r0, r3
 8005184:	f7ff fd02 	bl	8004b8c <LL_TIM_CC_DisableChannel>

    LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_FORCED_INACTIVE);
 8005188:	4b15      	ldr	r3, [pc, #84]	; (80051e0 <motor_pwm_brake+0x7c>)
 800518a:	2240      	movs	r2, #64	; 0x40
 800518c:	2110      	movs	r1, #16
 800518e:	0018      	movs	r0, r3
 8005190:	f7ff fd0c 	bl	8004bac <LL_TIM_OC_SetMode>
    LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH2);
 8005194:	4b12      	ldr	r3, [pc, #72]	; (80051e0 <motor_pwm_brake+0x7c>)
 8005196:	2110      	movs	r1, #16
 8005198:	0018      	movs	r0, r3
 800519a:	f7ff fcf7 	bl	8004b8c <LL_TIM_CC_DisableChannel>
    LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH2N);
 800519e:	4b10      	ldr	r3, [pc, #64]	; (80051e0 <motor_pwm_brake+0x7c>)
 80051a0:	2140      	movs	r1, #64	; 0x40
 80051a2:	0018      	movs	r0, r3
 80051a4:	f7ff fcf2 	bl	8004b8c <LL_TIM_CC_DisableChannel>

    LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_FORCED_INACTIVE);
 80051a8:	2380      	movs	r3, #128	; 0x80
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	480c      	ldr	r0, [pc, #48]	; (80051e0 <motor_pwm_brake+0x7c>)
 80051ae:	2240      	movs	r2, #64	; 0x40
 80051b0:	0019      	movs	r1, r3
 80051b2:	f7ff fcfb 	bl	8004bac <LL_TIM_OC_SetMode>
    LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH3);
 80051b6:	2380      	movs	r3, #128	; 0x80
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	4a09      	ldr	r2, [pc, #36]	; (80051e0 <motor_pwm_brake+0x7c>)
 80051bc:	0019      	movs	r1, r3
 80051be:	0010      	movs	r0, r2
 80051c0:	f7ff fce4 	bl	8004b8c <LL_TIM_CC_DisableChannel>
    LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH3N);
 80051c4:	2380      	movs	r3, #128	; 0x80
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	4a05      	ldr	r2, [pc, #20]	; (80051e0 <motor_pwm_brake+0x7c>)
 80051ca:	0019      	movs	r1, r3
 80051cc:	0010      	movs	r0, r2
 80051ce:	f7ff fcdd 	bl	8004b8c <LL_TIM_CC_DisableChannel>

    /* Generate TIM1 COM event by software */
    LL_TIM_GenerateEvent_COM(TIM1);
 80051d2:	4b03      	ldr	r3, [pc, #12]	; (80051e0 <motor_pwm_brake+0x7c>)
 80051d4:	0018      	movs	r0, r3
 80051d6:	f7ff fd8e 	bl	8004cf6 <LL_TIM_GenerateEvent_COM>
}
 80051da:	46c0      	nop			; (mov r8, r8)
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	40012c00 	.word	0x40012c00

080051e4 <motor_step>:


void motor_step(uint8_t step, uint_fast16_t pwm_val){
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	0002      	movs	r2, r0
 80051ec:	6039      	str	r1, [r7, #0]
 80051ee:	1dfb      	adds	r3, r7, #7
 80051f0:	701a      	strb	r2, [r3, #0]

    switch (step) {
 80051f2:	1dfb      	adds	r3, r7, #7
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	2b06      	cmp	r3, #6
 80051f8:	d858      	bhi.n	80052ac <motor_step+0xc8>
 80051fa:	009a      	lsls	r2, r3, #2
 80051fc:	4b2e      	ldr	r3, [pc, #184]	; (80052b8 <motor_step+0xd4>)
 80051fe:	18d3      	adds	r3, r2, r3
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	469f      	mov	pc, r3
        case 1:
            phase_p_pwm(PHASE_A, pwm_val);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	0019      	movs	r1, r3
 8005208:	2000      	movs	r0, #0
 800520a:	f7ff ff01 	bl	8005010 <phase_p_pwm>
            phase_n_pwm(PHASE_B, pwm_val);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	0019      	movs	r1, r3
 8005212:	2001      	movs	r0, #1
 8005214:	f7ff feac 	bl	8004f70 <phase_n_pwm>
            phase_float(PHASE_C);
 8005218:	2002      	movs	r0, #2
 800521a:	f7ff fe59 	bl	8004ed0 <phase_float>
            break;
 800521e:	e046      	b.n	80052ae <motor_step+0xca>
        case 2:
            phase_p_pwm(PHASE_A, pwm_val);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	0019      	movs	r1, r3
 8005224:	2000      	movs	r0, #0
 8005226:	f7ff fef3 	bl	8005010 <phase_p_pwm>
            phase_n_pwm(PHASE_C, pwm_val);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	0019      	movs	r1, r3
 800522e:	2002      	movs	r0, #2
 8005230:	f7ff fe9e 	bl	8004f70 <phase_n_pwm>
            phase_float(PHASE_B);
 8005234:	2001      	movs	r0, #1
 8005236:	f7ff fe4b 	bl	8004ed0 <phase_float>
            break;
 800523a:	e038      	b.n	80052ae <motor_step+0xca>
        case 3:
            phase_p_pwm(PHASE_B, pwm_val);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	0019      	movs	r1, r3
 8005240:	2001      	movs	r0, #1
 8005242:	f7ff fee5 	bl	8005010 <phase_p_pwm>
            phase_n_pwm(PHASE_C, pwm_val);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	0019      	movs	r1, r3
 800524a:	2002      	movs	r0, #2
 800524c:	f7ff fe90 	bl	8004f70 <phase_n_pwm>
            phase_float(PHASE_A);
 8005250:	2000      	movs	r0, #0
 8005252:	f7ff fe3d 	bl	8004ed0 <phase_float>
            break;
 8005256:	e02a      	b.n	80052ae <motor_step+0xca>
        case 4:
            phase_p_pwm(PHASE_B, pwm_val);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	0019      	movs	r1, r3
 800525c:	2001      	movs	r0, #1
 800525e:	f7ff fed7 	bl	8005010 <phase_p_pwm>
            phase_n_pwm(PHASE_A, pwm_val);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	0019      	movs	r1, r3
 8005266:	2000      	movs	r0, #0
 8005268:	f7ff fe82 	bl	8004f70 <phase_n_pwm>
            phase_float(PHASE_C);
 800526c:	2002      	movs	r0, #2
 800526e:	f7ff fe2f 	bl	8004ed0 <phase_float>
            break;
 8005272:	e01c      	b.n	80052ae <motor_step+0xca>
        case 5:
            phase_p_pwm(PHASE_C, pwm_val);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	0019      	movs	r1, r3
 8005278:	2002      	movs	r0, #2
 800527a:	f7ff fec9 	bl	8005010 <phase_p_pwm>
            phase_n_pwm(PHASE_A, pwm_val);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	0019      	movs	r1, r3
 8005282:	2000      	movs	r0, #0
 8005284:	f7ff fe74 	bl	8004f70 <phase_n_pwm>
            phase_float(PHASE_B);
 8005288:	2001      	movs	r0, #1
 800528a:	f7ff fe21 	bl	8004ed0 <phase_float>
            break;
 800528e:	e00e      	b.n	80052ae <motor_step+0xca>
        case 6:
            phase_p_pwm(PHASE_C, pwm_val);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	0019      	movs	r1, r3
 8005294:	2002      	movs	r0, #2
 8005296:	f7ff febb 	bl	8005010 <phase_p_pwm>
            phase_n_pwm(PHASE_B, pwm_val);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	0019      	movs	r1, r3
 800529e:	2001      	movs	r0, #1
 80052a0:	f7ff fe66 	bl	8004f70 <phase_n_pwm>
            phase_float(PHASE_A);
 80052a4:	2000      	movs	r0, #0
 80052a6:	f7ff fe13 	bl	8004ed0 <phase_float>
            break;
 80052aa:	e000      	b.n	80052ae <motor_step+0xca>
        default:
            break;
 80052ac:	46c0      	nop			; (mov r8, r8)
    }
}
 80052ae:	46c0      	nop			; (mov r8, r8)
 80052b0:	46bd      	mov	sp, r7
 80052b2:	b002      	add	sp, #8
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	46c0      	nop			; (mov r8, r8)
 80052b8:	0800746c 	.word	0x0800746c

080052bc <motor_pwm_set_freewheeling>:

void motor_pwm_set_freewheeling(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
    irq_primask_disable();
 80052c0:	f7ff fd27 	bl	8004d12 <irq_primask_disable>
    motor_pwm_stop();
 80052c4:	f7ff fef4 	bl	80050b0 <motor_pwm_stop>
    irq_primask_enable();
 80052c8:	f7ff fd30 	bl	8004d2c <irq_primask_enable>
}
 80052cc:	46c0      	nop			; (mov r8, r8)
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <motor_pwm_set_break>:

void motor_pwm_set_break(void)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	af00      	add	r7, sp, #0
    irq_primask_disable();
 80052d6:	f7ff fd1c 	bl	8004d12 <irq_primask_disable>
    motor_pwm_brake();
 80052da:	f7ff ff43 	bl	8005164 <motor_pwm_brake>
    irq_primask_enable();
 80052de:	f7ff fd25 	bl	8004d2c <irq_primask_enable>
}
 80052e2:	46c0      	nop			; (mov r8, r8)
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <set_pwm_compare>:

uint8_t back_pwm, break_motor=1;

void set_pwm_compare(uint32_t duty_cycle){
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
    //duty_cycle = duty_cycle < _pwm_mid ? _pwm_mid : duty_cycle;
    LL_TIM_OC_SetCompareCH1(TIM1, duty_cycle);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a0a      	ldr	r2, [pc, #40]	; (800531c <set_pwm_compare+0x34>)
 80052f4:	0019      	movs	r1, r3
 80052f6:	0010      	movs	r0, r2
 80052f8:	f7ff fcbc 	bl	8004c74 <LL_TIM_OC_SetCompareCH1>
    LL_TIM_OC_SetCompareCH2(TIM1, duty_cycle);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a07      	ldr	r2, [pc, #28]	; (800531c <set_pwm_compare+0x34>)
 8005300:	0019      	movs	r1, r3
 8005302:	0010      	movs	r0, r2
 8005304:	f7ff fcc2 	bl	8004c8c <LL_TIM_OC_SetCompareCH2>
    LL_TIM_OC_SetCompareCH3(TIM1, duty_cycle);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a04      	ldr	r2, [pc, #16]	; (800531c <set_pwm_compare+0x34>)
 800530c:	0019      	movs	r1, r3
 800530e:	0010      	movs	r0, r2
 8005310:	f7ff fcc8 	bl	8004ca4 <LL_TIM_OC_SetCompareCH3>
}
 8005314:	46c0      	nop			; (mov r8, r8)
 8005316:	46bd      	mov	sp, r7
 8005318:	b002      	add	sp, #8
 800531a:	bd80      	pop	{r7, pc}
 800531c:	40012c00 	.word	0x40012c00

08005320 <comutate_start_motor>:

void comutate_start_motor(){
 8005320:	b580      	push	{r7, lr}
 8005322:	af00      	add	r7, sp, #0
    motor_pwm_brake();
 8005324:	f7ff ff1e 	bl	8005164 <motor_pwm_brake>
    LL_TIM_EnableIT_UPDATE(TIM14);
 8005328:	4b05      	ldr	r3, [pc, #20]	; (8005340 <comutate_start_motor+0x20>)
 800532a:	0018      	movs	r0, r3
 800532c:	f7ff fcd5 	bl	8004cda <LL_TIM_EnableIT_UPDATE>
    LL_TIM_EnableCounter(TIM14);//comutation timer
 8005330:	4b03      	ldr	r3, [pc, #12]	; (8005340 <comutate_start_motor+0x20>)
 8005332:	0018      	movs	r0, r3
 8005334:	f7ff fbf2 	bl	8004b1c <LL_TIM_EnableCounter>
}
 8005338:	46c0      	nop			; (mov r8, r8)
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	46c0      	nop			; (mov r8, r8)
 8005340:	40002000 	.word	0x40002000

08005344 <motor_pwm_set_pwm_val>:

void motor_pwm_set_pwm_val(uint32_t duty_cycle) {
 8005344:	b5b0      	push	{r4, r5, r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]

      // uprintf("d:%d, min:%d, max:%d, p0:%d\n", duty_cycle, _pwm_min, _pwm_max, get_pwm_duty());
    if(motor.running == 0 && duty_cycle > (_pwm_min) && duty_cycle < _pwm_max){
 800534c:	4b57      	ldr	r3, [pc, #348]	; (80054ac <motor_pwm_set_pwm_val+0x168>)
 800534e:	791b      	ldrb	r3, [r3, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d110      	bne.n	8005376 <motor_pwm_set_pwm_val+0x32>
 8005354:	4b56      	ldr	r3, [pc, #344]	; (80054b0 <motor_pwm_set_pwm_val+0x16c>)
 8005356:	881b      	ldrh	r3, [r3, #0]
 8005358:	001a      	movs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4293      	cmp	r3, r2
 800535e:	d90a      	bls.n	8005376 <motor_pwm_set_pwm_val+0x32>
 8005360:	4b54      	ldr	r3, [pc, #336]	; (80054b4 <motor_pwm_set_pwm_val+0x170>)
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	001a      	movs	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4293      	cmp	r3, r2
 800536a:	d204      	bcs.n	8005376 <motor_pwm_set_pwm_val+0x32>
        comutate_start_motor();//comitate başlat
 800536c:	f7ff ffd8 	bl	8005320 <comutate_start_motor>
        motor.running = 1;
 8005370:	4b4e      	ldr	r3, [pc, #312]	; (80054ac <motor_pwm_set_pwm_val+0x168>)
 8005372:	2201      	movs	r2, #1
 8005374:	711a      	strb	r2, [r3, #4]
    }
    if(motor.running){
 8005376:	4b4d      	ldr	r3, [pc, #308]	; (80054ac <motor_pwm_set_pwm_val+0x168>)
 8005378:	791b      	ldrb	r3, [r3, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d100      	bne.n	8005380 <motor_pwm_set_pwm_val+0x3c>
 800537e:	e088      	b.n	8005492 <motor_pwm_set_pwm_val+0x14e>
        _pwm_duty = LOWPASS_ALP(_pwm_duty, duty_cycle, 0.4);
 8005380:	4b4d      	ldr	r3, [pc, #308]	; (80054b8 <motor_pwm_set_pwm_val+0x174>)
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	0018      	movs	r0, r3
 8005386:	f7fd f931 	bl	80025ec <__aeabi_i2d>
 800538a:	4a4c      	ldr	r2, [pc, #304]	; (80054bc <motor_pwm_set_pwm_val+0x178>)
 800538c:	4b4c      	ldr	r3, [pc, #304]	; (80054c0 <motor_pwm_set_pwm_val+0x17c>)
 800538e:	f7fc faf9 	bl	8001984 <__aeabi_dmul>
 8005392:	0002      	movs	r2, r0
 8005394:	000b      	movs	r3, r1
 8005396:	0014      	movs	r4, r2
 8005398:	001d      	movs	r5, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7fd f956 	bl	800264c <__aeabi_ui2d>
 80053a0:	4a48      	ldr	r2, [pc, #288]	; (80054c4 <motor_pwm_set_pwm_val+0x180>)
 80053a2:	4b49      	ldr	r3, [pc, #292]	; (80054c8 <motor_pwm_set_pwm_val+0x184>)
 80053a4:	f7fc faee 	bl	8001984 <__aeabi_dmul>
 80053a8:	0002      	movs	r2, r0
 80053aa:	000b      	movs	r3, r1
 80053ac:	0020      	movs	r0, r4
 80053ae:	0029      	movs	r1, r5
 80053b0:	f7fb fcb6 	bl	8000d20 <__aeabi_dadd>
 80053b4:	0002      	movs	r2, r0
 80053b6:	000b      	movs	r3, r1
 80053b8:	0010      	movs	r0, r2
 80053ba:	0019      	movs	r1, r3
 80053bc:	f7fb f86c 	bl	8000498 <__aeabi_d2uiz>
 80053c0:	0003      	movs	r3, r0
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	4b3c      	ldr	r3, [pc, #240]	; (80054b8 <motor_pwm_set_pwm_val+0x174>)
 80053c6:	801a      	strh	r2, [r3, #0]
        //_pwm_duty = run_comutate(duty_cycle);
        //stoped
        if(_pwm_duty <= (_pwm_min+2)){
 80053c8:	4b3b      	ldr	r3, [pc, #236]	; (80054b8 <motor_pwm_set_pwm_val+0x174>)
 80053ca:	881b      	ldrh	r3, [r3, #0]
 80053cc:	001a      	movs	r2, r3
 80053ce:	4b38      	ldr	r3, [pc, #224]	; (80054b0 <motor_pwm_set_pwm_val+0x16c>)
 80053d0:	881b      	ldrh	r3, [r3, #0]
 80053d2:	3302      	adds	r3, #2
 80053d4:	429a      	cmp	r2, r3
 80053d6:	dc15      	bgt.n	8005404 <motor_pwm_set_pwm_val+0xc0>
            //uprintf("stop\n");
            motor_pwm_set_freewheeling();
 80053d8:	f7ff ff70 	bl	80052bc <motor_pwm_set_freewheeling>
            LL_TIM_DisableCounter(TIM14);//comutate timer'ını sıfırla
 80053dc:	4b3b      	ldr	r3, [pc, #236]	; (80054cc <motor_pwm_set_pwm_val+0x188>)
 80053de:	0018      	movs	r0, r3
 80053e0:	f7ff fbaa 	bl	8004b38 <LL_TIM_DisableCounter>
            //set_comutate_freq(0);
            motor.running = 0;
 80053e4:	4b31      	ldr	r3, [pc, #196]	; (80054ac <motor_pwm_set_pwm_val+0x168>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	711a      	strb	r2, [r3, #4]
            break_motor = 0;
 80053ea:	4b39      	ldr	r3, [pc, #228]	; (80054d0 <motor_pwm_set_pwm_val+0x18c>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	701a      	strb	r2, [r3, #0]
            speed_pwm = _pwm_mid;//_pwm_max * (mosfet_thr / 1000);
 80053f0:	4b38      	ldr	r3, [pc, #224]	; (80054d4 <motor_pwm_set_pwm_val+0x190>)
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	001a      	movs	r2, r3
 80053f6:	4b38      	ldr	r3, [pc, #224]	; (80054d8 <motor_pwm_set_pwm_val+0x194>)
 80053f8:	601a      	str	r2, [r3, #0]
            _comate_freq = 300;
 80053fa:	4b38      	ldr	r3, [pc, #224]	; (80054dc <motor_pwm_set_pwm_val+0x198>)
 80053fc:	2296      	movs	r2, #150	; 0x96
 80053fe:	0052      	lsls	r2, r2, #1
 8005400:	801a      	strh	r2, [r3, #0]
 8005402:	e036      	b.n	8005472 <motor_pwm_set_pwm_val+0x12e>
        }
        //running
        else if(back_pwm !=_pwm_duty && TIM1->CNT % 20==0){//pid lazım
 8005404:	4b36      	ldr	r3, [pc, #216]	; (80054e0 <motor_pwm_set_pwm_val+0x19c>)
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	b29a      	uxth	r2, r3
 800540a:	4b2b      	ldr	r3, [pc, #172]	; (80054b8 <motor_pwm_set_pwm_val+0x174>)
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	429a      	cmp	r2, r3
 8005410:	d02f      	beq.n	8005472 <motor_pwm_set_pwm_val+0x12e>
 8005412:	4b34      	ldr	r3, [pc, #208]	; (80054e4 <motor_pwm_set_pwm_val+0x1a0>)
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	2114      	movs	r1, #20
 8005418:	0018      	movs	r0, r3
 800541a:	f7fa fefb 	bl	8000214 <__aeabi_uidivmod>
 800541e:	1e0b      	subs	r3, r1, #0
 8005420:	d127      	bne.n	8005472 <motor_pwm_set_pwm_val+0x12e>
            uint16_t freq = (uint16_t)map(_pwm_duty, _pwm_min, _pwm_max, 1500, 40000);
 8005422:	4b25      	ldr	r3, [pc, #148]	; (80054b8 <motor_pwm_set_pwm_val+0x174>)
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	001a      	movs	r2, r3
 8005428:	4b21      	ldr	r3, [pc, #132]	; (80054b0 <motor_pwm_set_pwm_val+0x16c>)
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	4a2e      	ldr	r2, [pc, #184]	; (80054e8 <motor_pwm_set_pwm_val+0x1a4>)
 8005430:	435a      	muls	r2, r3
 8005432:	4b20      	ldr	r3, [pc, #128]	; (80054b4 <motor_pwm_set_pwm_val+0x170>)
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	0019      	movs	r1, r3
 8005438:	4b1d      	ldr	r3, [pc, #116]	; (80054b0 <motor_pwm_set_pwm_val+0x16c>)
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	1acb      	subs	r3, r1, r3
 800543e:	0019      	movs	r1, r3
 8005440:	0010      	movs	r0, r2
 8005442:	f7fa feeb 	bl	800021c <__divsi3>
 8005446:	0003      	movs	r3, r0
 8005448:	b29a      	uxth	r2, r3
 800544a:	240e      	movs	r4, #14
 800544c:	193b      	adds	r3, r7, r4
 800544e:	4927      	ldr	r1, [pc, #156]	; (80054ec <motor_pwm_set_pwm_val+0x1a8>)
 8005450:	468c      	mov	ip, r1
 8005452:	4462      	add	r2, ip
 8005454:	801a      	strh	r2, [r3, #0]
            set_comutate_freq(freq);
 8005456:	193b      	adds	r3, r7, r4
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	0018      	movs	r0, r3
 800545c:	f7ff fd22 	bl	8004ea4 <set_comutate_freq>
            back_pwm = _pwm_duty;
 8005460:	4b15      	ldr	r3, [pc, #84]	; (80054b8 <motor_pwm_set_pwm_val+0x174>)
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	b2da      	uxtb	r2, r3
 8005466:	4b1e      	ldr	r3, [pc, #120]	; (80054e0 <motor_pwm_set_pwm_val+0x19c>)
 8005468:	701a      	strb	r2, [r3, #0]
            _comate_freq = freq;
 800546a:	4b1c      	ldr	r3, [pc, #112]	; (80054dc <motor_pwm_set_pwm_val+0x198>)
 800546c:	193a      	adds	r2, r7, r4
 800546e:	8812      	ldrh	r2, [r2, #0]
 8005470:	801a      	strh	r2, [r3, #0]
        }

        //check_rpm_threshold();

        if(speed_pwm > 750){
 8005472:	4b19      	ldr	r3, [pc, #100]	; (80054d8 <motor_pwm_set_pwm_val+0x194>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a1e      	ldr	r2, [pc, #120]	; (80054f0 <motor_pwm_set_pwm_val+0x1ac>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d913      	bls.n	80054a4 <motor_pwm_set_pwm_val+0x160>
            set_pwm_compare(speed_pwm);
 800547c:	4b16      	ldr	r3, [pc, #88]	; (80054d8 <motor_pwm_set_pwm_val+0x194>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	0018      	movs	r0, r3
 8005482:	f7ff ff31 	bl	80052e8 <set_pwm_compare>
            speed_pwm--;
 8005486:	4b14      	ldr	r3, [pc, #80]	; (80054d8 <motor_pwm_set_pwm_val+0x194>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	1e5a      	subs	r2, r3, #1
 800548c:	4b12      	ldr	r3, [pc, #72]	; (80054d8 <motor_pwm_set_pwm_val+0x194>)
 800548e:	601a      	str	r2, [r3, #0]
    }

    //test
    //uprintf("rpm_time:%d\n", speed_pwm);

}
 8005490:	e008      	b.n	80054a4 <motor_pwm_set_pwm_val+0x160>
    }else if(break_motor){
 8005492:	4b0f      	ldr	r3, [pc, #60]	; (80054d0 <motor_pwm_set_pwm_val+0x18c>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d004      	beq.n	80054a4 <motor_pwm_set_pwm_val+0x160>
        motor_pwm_set_break();
 800549a:	f7ff ff1a 	bl	80052d2 <motor_pwm_set_break>
        break_motor = 0;
 800549e:	4b0c      	ldr	r3, [pc, #48]	; (80054d0 <motor_pwm_set_pwm_val+0x18c>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	701a      	strb	r2, [r3, #0]
}
 80054a4:	46c0      	nop			; (mov r8, r8)
 80054a6:	46bd      	mov	sp, r7
 80054a8:	b004      	add	sp, #16
 80054aa:	bdb0      	pop	{r4, r5, r7, pc}
 80054ac:	200001b8 	.word	0x200001b8
 80054b0:	2000019c 	.word	0x2000019c
 80054b4:	20000198 	.word	0x20000198
 80054b8:	200001a0 	.word	0x200001a0
 80054bc:	33333333 	.word	0x33333333
 80054c0:	3fe33333 	.word	0x3fe33333
 80054c4:	9999999a 	.word	0x9999999a
 80054c8:	3fd99999 	.word	0x3fd99999
 80054cc:	40002000 	.word	0x40002000
 80054d0:	20000009 	.word	0x20000009
 80054d4:	2000019a 	.word	0x2000019a
 80054d8:	200001b4 	.word	0x200001b4
 80054dc:	200001a6 	.word	0x200001a6
 80054e0:	200001be 	.word	0x200001be
 80054e4:	40012c00 	.word	0x40012c00
 80054e8:	00009664 	.word	0x00009664
 80054ec:	000005dc 	.word	0x000005dc
 80054f0:	000002ee 	.word	0x000002ee

080054f4 <comutate_timer_callback>:


/* TIMER LOOP INTERRUPT */
void comutate_timer_callback(){
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0

    uint8_t current_state;
    //uint32_t com_time_us;
    if (_step == 1 || _step == 6){
 80054fa:	4b40      	ldr	r3, [pc, #256]	; (80055fc <comutate_timer_callback+0x108>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d003      	beq.n	800550a <comutate_timer_callback+0x16>
 8005502:	4b3e      	ldr	r3, [pc, #248]	; (80055fc <comutate_timer_callback+0x108>)
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b06      	cmp	r3, #6
 8005508:	d106      	bne.n	8005518 <comutate_timer_callback+0x24>
       current_state = get_comutator_value(2);
 800550a:	2002      	movs	r0, #2
 800550c:	f7fd fb32 	bl	8002b74 <get_comutator_value>
 8005510:	0003      	movs	r3, r0
 8005512:	001a      	movs	r2, r3
 8005514:	1dfb      	adds	r3, r7, #7
 8005516:	701a      	strb	r2, [r3, #0]
    }
    if (_step == 3 || _step == 2){            //        in phase two or 5 read from phase A Pf1
 8005518:	4b38      	ldr	r3, [pc, #224]	; (80055fc <comutate_timer_callback+0x108>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b03      	cmp	r3, #3
 800551e:	d003      	beq.n	8005528 <comutate_timer_callback+0x34>
 8005520:	4b36      	ldr	r3, [pc, #216]	; (80055fc <comutate_timer_callback+0x108>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	2b02      	cmp	r3, #2
 8005526:	d106      	bne.n	8005536 <comutate_timer_callback+0x42>
        current_state = get_comutator_value(1);
 8005528:	2001      	movs	r0, #1
 800552a:	f7fd fb23 	bl	8002b74 <get_comutator_value>
 800552e:	0003      	movs	r3, r0
 8005530:	001a      	movs	r2, r3
 8005532:	1dfb      	adds	r3, r7, #7
 8005534:	701a      	strb	r2, [r3, #0]
    }
    if (_step == 5 || _step == 4){                         // phase B pf0
 8005536:	4b31      	ldr	r3, [pc, #196]	; (80055fc <comutate_timer_callback+0x108>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	2b05      	cmp	r3, #5
 800553c:	d003      	beq.n	8005546 <comutate_timer_callback+0x52>
 800553e:	4b2f      	ldr	r3, [pc, #188]	; (80055fc <comutate_timer_callback+0x108>)
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	2b04      	cmp	r3, #4
 8005544:	d106      	bne.n	8005554 <comutate_timer_callback+0x60>
        current_state =  get_comutator_value(0);
 8005546:	2000      	movs	r0, #0
 8005548:	f7fd fb14 	bl	8002b74 <get_comutator_value>
 800554c:	0003      	movs	r3, r0
 800554e:	001a      	movs	r2, r3
 8005550:	1dfb      	adds	r3, r7, #7
 8005552:	701a      	strb	r2, [r3, #0]
    }

    if(_comate_freq < 3000 && !current_state){
 8005554:	4b2a      	ldr	r3, [pc, #168]	; (8005600 <comutate_timer_callback+0x10c>)
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	4a2a      	ldr	r2, [pc, #168]	; (8005604 <comutate_timer_callback+0x110>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d80a      	bhi.n	8005574 <comutate_timer_callback+0x80>
 800555e:	1dfb      	adds	r3, r7, #7
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d106      	bne.n	8005574 <comutate_timer_callback+0x80>
       _step++;
 8005566:	4b25      	ldr	r3, [pc, #148]	; (80055fc <comutate_timer_callback+0x108>)
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	3301      	adds	r3, #1
 800556c:	b2da      	uxtb	r2, r3
 800556e:	4b23      	ldr	r3, [pc, #140]	; (80055fc <comutate_timer_callback+0x108>)
 8005570:	701a      	strb	r2, [r3, #0]
 8005572:	e018      	b.n	80055a6 <comutate_timer_callback+0xb2>
                desync_check = 1;
            }
            rising = !(step % 2);
        }*/

        if (rising){
 8005574:	4b24      	ldr	r3, [pc, #144]	; (8005608 <comutate_timer_callback+0x114>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00a      	beq.n	8005592 <comutate_timer_callback+0x9e>
            if (current_state){
 800557c:	1dfb      	adds	r3, r7, #7
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d010      	beq.n	80055a6 <comutate_timer_callback+0xb2>
                _step++;
 8005584:	4b1d      	ldr	r3, [pc, #116]	; (80055fc <comutate_timer_callback+0x108>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	3301      	adds	r3, #1
 800558a:	b2da      	uxtb	r2, r3
 800558c:	4b1b      	ldr	r3, [pc, #108]	; (80055fc <comutate_timer_callback+0x108>)
 800558e:	701a      	strb	r2, [r3, #0]
 8005590:	e009      	b.n	80055a6 <comutate_timer_callback+0xb2>
                bad_count++;
                if(bad_count > 2){
                bemfcounter = 0;
                }*/
        } else{
            if(!current_state){
 8005592:	1dfb      	adds	r3, r7, #7
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d105      	bne.n	80055a6 <comutate_timer_callback+0xb2>
                _step++;
 800559a:	4b18      	ldr	r3, [pc, #96]	; (80055fc <comutate_timer_callback+0x108>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	3301      	adds	r3, #1
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	4b16      	ldr	r3, [pc, #88]	; (80055fc <comutate_timer_callback+0x108>)
 80055a4:	701a      	strb	r2, [r3, #0]
              }
            }*/
        }
    }

    if(_step>6){
 80055a6:	4b15      	ldr	r3, [pc, #84]	; (80055fc <comutate_timer_callback+0x108>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b06      	cmp	r3, #6
 80055ac:	d90f      	bls.n	80055ce <comutate_timer_callback+0xda>
        _step = 1;
 80055ae:	4b13      	ldr	r3, [pc, #76]	; (80055fc <comutate_timer_callback+0x108>)
 80055b0:	2201      	movs	r2, #1
 80055b2:	701a      	strb	r2, [r3, #0]
        //set_pwm_compare(_pwm_duty / 2);

        uint32_t com_time_us = TIM17->CNT - back_com_time;
 80055b4:	4b15      	ldr	r3, [pc, #84]	; (800560c <comutate_timer_callback+0x118>)
 80055b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055b8:	4b15      	ldr	r3, [pc, #84]	; (8005610 <comutate_timer_callback+0x11c>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	603b      	str	r3, [r7, #0]
        if(com_time_us < 0)com_time_us += 0xFFFF;
        back_com_time =  TIM17->CNT;
 80055c0:	4b12      	ldr	r3, [pc, #72]	; (800560c <comutate_timer_callback+0x118>)
 80055c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055c4:	4b12      	ldr	r3, [pc, #72]	; (8005610 <comutate_timer_callback+0x11c>)
 80055c6:	601a      	str	r2, [r3, #0]
        }else{
            speed_pwm = speed_pwm<50 ? 50 : speed_pwm-1;
            set_pwm_compare(speed_pwm);//remove
        }*/

        actual_time = com_time_us;
 80055c8:	4b12      	ldr	r3, [pc, #72]	; (8005614 <comutate_timer_callback+0x120>)
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	601a      	str	r2, [r3, #0]
        }*/

        ////set_timer_autoreload(TIM1, com_time_us);
    }

    if(backstep !=_step){
 80055ce:	4b12      	ldr	r3, [pc, #72]	; (8005618 <comutate_timer_callback+0x124>)
 80055d0:	781a      	ldrb	r2, [r3, #0]
 80055d2:	4b0a      	ldr	r3, [pc, #40]	; (80055fc <comutate_timer_callback+0x108>)
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d00b      	beq.n	80055f2 <comutate_timer_callback+0xfe>
        motor_step(_step, _pwm_duty);
 80055da:	4b08      	ldr	r3, [pc, #32]	; (80055fc <comutate_timer_callback+0x108>)
 80055dc:	781a      	ldrb	r2, [r3, #0]
 80055de:	4b0f      	ldr	r3, [pc, #60]	; (800561c <comutate_timer_callback+0x128>)
 80055e0:	881b      	ldrh	r3, [r3, #0]
 80055e2:	0019      	movs	r1, r3
 80055e4:	0010      	movs	r0, r2
 80055e6:	f7ff fdfd 	bl	80051e4 <motor_step>
        backstep = _step;
 80055ea:	4b04      	ldr	r3, [pc, #16]	; (80055fc <comutate_timer_callback+0x108>)
 80055ec:	781a      	ldrb	r2, [r3, #0]
 80055ee:	4b0a      	ldr	r3, [pc, #40]	; (8005618 <comutate_timer_callback+0x124>)
 80055f0:	701a      	strb	r2, [r3, #0]
    }
}
 80055f2:	46c0      	nop			; (mov r8, r8)
 80055f4:	46bd      	mov	sp, r7
 80055f6:	b002      	add	sp, #8
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	2000019e 	.word	0x2000019e
 8005600:	200001a6 	.word	0x200001a6
 8005604:	00000bb7 	.word	0x00000bb7
 8005608:	20000008 	.word	0x20000008
 800560c:	40014800 	.word	0x40014800
 8005610:	200001ac 	.word	0x200001ac
 8005614:	200001b0 	.word	0x200001b0
 8005618:	200001a8 	.word	0x200001a8
 800561c:	200001a0 	.word	0x200001a0

08005620 <timer_sinus_callback>:

void timer_sinus_callback(){ }
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
 8005624:	46c0      	nop			; (mov r8, r8)
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
	...

0800562c <motorTuneReady>:


/* AUDIO */
void motorTuneReady() {
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0
    set_pwm_compare(100);
 8005630:	2064      	movs	r0, #100	; 0x64
 8005632:	f7ff fe59 	bl	80052e8 <set_pwm_compare>
  motor_step(1, 100);
 8005636:	2164      	movs	r1, #100	; 0x64
 8005638:	2001      	movs	r0, #1
 800563a:	f7ff fdd3 	bl	80051e4 <motor_step>
  TIM1->PSC = 70;
 800563e:	4b0d      	ldr	r3, [pc, #52]	; (8005674 <motorTuneReady+0x48>)
 8005640:	2246      	movs	r2, #70	; 0x46
 8005642:	629a      	str	r2, [r3, #40]	; 0x28
  LL_mDelay(150);
 8005644:	2096      	movs	r0, #150	; 0x96
 8005646:	f001 fdcf 	bl	80071e8 <LL_mDelay>
  TIM1->PSC = 50;
 800564a:	4b0a      	ldr	r3, [pc, #40]	; (8005674 <motorTuneReady+0x48>)
 800564c:	2232      	movs	r2, #50	; 0x32
 800564e:	629a      	str	r2, [r3, #40]	; 0x28
  LL_mDelay(150);
 8005650:	2096      	movs	r0, #150	; 0x96
 8005652:	f001 fdc9 	bl	80071e8 <LL_mDelay>
  TIM1->PSC = 40;
 8005656:	4b07      	ldr	r3, [pc, #28]	; (8005674 <motorTuneReady+0x48>)
 8005658:	2228      	movs	r2, #40	; 0x28
 800565a:	629a      	str	r2, [r3, #40]	; 0x28
  LL_mDelay(150);
 800565c:	2096      	movs	r0, #150	; 0x96
 800565e:	f001 fdc3 	bl	80071e8 <LL_mDelay>
  TIM1->PSC = 0;
 8005662:	4b04      	ldr	r3, [pc, #16]	; (8005674 <motorTuneReady+0x48>)
 8005664:	2200      	movs	r2, #0
 8005666:	629a      	str	r2, [r3, #40]	; 0x28
  motor_pwm_set_freewheeling();
 8005668:	f7ff fe28 	bl	80052bc <motor_pwm_set_freewheeling>
}
 800566c:	46c0      	nop			; (mov r8, r8)
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	40012c00 	.word	0x40012c00

08005678 <motorTuneInput>:

void motorTuneInput(uint8_t motorStepDebug) {
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	0002      	movs	r2, r0
 8005680:	1dfb      	adds	r3, r7, #7
 8005682:	701a      	strb	r2, [r3, #0]
    set_pwm_compare(100);
 8005684:	2064      	movs	r0, #100	; 0x64
 8005686:	f7ff fe2f 	bl	80052e8 <set_pwm_compare>
  motor_step(motorStepDebug, 20);
 800568a:	1dfb      	adds	r3, r7, #7
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2114      	movs	r1, #20
 8005690:	0018      	movs	r0, r3
 8005692:	f7ff fda7 	bl	80051e4 <motor_step>
  TIM1->PSC = 75;
 8005696:	4b0a      	ldr	r3, [pc, #40]	; (80056c0 <motorTuneInput+0x48>)
 8005698:	224b      	movs	r2, #75	; 0x4b
 800569a:	629a      	str	r2, [r3, #40]	; 0x28
  LL_mDelay(100);
 800569c:	2064      	movs	r0, #100	; 0x64
 800569e:	f001 fda3 	bl	80071e8 <LL_mDelay>
  TIM1->PSC = 50;
 80056a2:	4b07      	ldr	r3, [pc, #28]	; (80056c0 <motorTuneInput+0x48>)
 80056a4:	2232      	movs	r2, #50	; 0x32
 80056a6:	629a      	str	r2, [r3, #40]	; 0x28
  LL_mDelay(100);
 80056a8:	2064      	movs	r0, #100	; 0x64
 80056aa:	f001 fd9d 	bl	80071e8 <LL_mDelay>

  TIM1->PSC = 0;
 80056ae:	4b04      	ldr	r3, [pc, #16]	; (80056c0 <motorTuneInput+0x48>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	629a      	str	r2, [r3, #40]	; 0x28
  motor_pwm_set_freewheeling();
 80056b4:	f7ff fe02 	bl	80052bc <motor_pwm_set_freewheeling>
}
 80056b8:	46c0      	nop			; (mov r8, r8)
 80056ba:	46bd      	mov	sp, r7
 80056bc:	b002      	add	sp, #8
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	40012c00 	.word	0x40012c00

080056c4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80056c8:	f3bf 8f4f 	dsb	sy
}
 80056cc:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056ce:	4b04      	ldr	r3, [pc, #16]	; (80056e0 <__NVIC_SystemReset+0x1c>)
 80056d0:	4a04      	ldr	r2, [pc, #16]	; (80056e4 <__NVIC_SystemReset+0x20>)
 80056d2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80056d4:	f3bf 8f4f 	dsb	sy
}
 80056d8:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80056da:	46c0      	nop			; (mov r8, r8)
 80056dc:	e7fd      	b.n	80056da <__NVIC_SystemReset+0x16>
 80056de:	46c0      	nop			; (mov r8, r8)
 80056e0:	e000ed00 	.word	0xe000ed00
 80056e4:	05fa0004 	.word	0x05fa0004

080056e8 <LL_GPIO_SetOutputPin>:
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	619a      	str	r2, [r3, #24]
}
 80056f8:	46c0      	nop			; (mov r8, r8)
 80056fa:	46bd      	mov	sp, r7
 80056fc:	b002      	add	sp, #8
 80056fe:	bd80      	pop	{r7, pc}

08005700 <LL_GPIO_ResetOutputPin>:
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005710:	46c0      	nop			; (mov r8, r8)
 8005712:	46bd      	mov	sp, r7
 8005714:	b002      	add	sp, #8
 8005716:	bd80      	pop	{r7, pc}

08005718 <main>:
extern pwm_signal_t signal;
extern pwm_config_t config;

//struct motor_adc_sample _sample;

int main(void){
 8005718:	b590      	push	{r4, r7, lr}
 800571a:	b083      	sub	sp, #12
 800571c:	af02      	add	r7, sp, #8

    io_init();
 800571e:	f7fe fbe7 	bl	8003ef0 <io_init>
    init_input();
 8005722:	f7fd fcb3 	bl	800308c <init_input>
    motor_pwm_init();
 8005726:	f7ff fb97 	bl	8004e58 <motor_pwm_init>
    init_comutator();
 800572a:	f7fd fa53 	bl	8002bd4 <init_comutator>
    //init_adc();

    status_led_on();
 800572e:	2380      	movs	r3, #128	; 0x80
 8005730:	021a      	lsls	r2, r3, #8
 8005732:	2390      	movs	r3, #144	; 0x90
 8005734:	05db      	lsls	r3, r3, #23
 8005736:	0011      	movs	r1, r2
 8005738:	0018      	movs	r0, r3
 800573a:	f7ff ffd5 	bl	80056e8 <LL_GPIO_SetOutputPin>

    uprintf("Motor Driver v2.0\n");
 800573e:	4b34      	ldr	r3, [pc, #208]	; (8005810 <main+0xf8>)
 8005740:	0018      	movs	r0, r3
 8005742:	f000 fb3a 	bl	8005dba <uprintf>
    uprintf("EEPROM load..\n");
 8005746:	4b33      	ldr	r3, [pc, #204]	; (8005814 <main+0xfc>)
 8005748:	0018      	movs	r0, r3
 800574a:	f000 fb36 	bl	8005dba <uprintf>
    uprintf("min: %d, max: %d, ver: %d, prs: %lu\n", config.calibzero, config.calibmax, config.ver, config.prs);
 800574e:	4b32      	ldr	r3, [pc, #200]	; (8005818 <main+0x100>)
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	0019      	movs	r1, r3
 8005754:	4b30      	ldr	r3, [pc, #192]	; (8005818 <main+0x100>)
 8005756:	885b      	ldrh	r3, [r3, #2]
 8005758:	001a      	movs	r2, r3
 800575a:	4b2f      	ldr	r3, [pc, #188]	; (8005818 <main+0x100>)
 800575c:	89db      	ldrh	r3, [r3, #14]
 800575e:	001c      	movs	r4, r3
 8005760:	4b2d      	ldr	r3, [pc, #180]	; (8005818 <main+0x100>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	482d      	ldr	r0, [pc, #180]	; (800581c <main+0x104>)
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	0023      	movs	r3, r4
 800576a:	f000 fb26 	bl	8005dba <uprintf>

    motorTuneReady();
 800576e:	f7ff ff5d 	bl	800562c <motorTuneReady>

    LL_mDelay(1500);
 8005772:	4b2b      	ldr	r3, [pc, #172]	; (8005820 <main+0x108>)
 8005774:	0018      	movs	r0, r3
 8005776:	f001 fd37 	bl	80071e8 <LL_mDelay>

    while(1){

        adc_update_run();
 800577a:	f7fd f8f5 	bl	8002968 <adc_update_run>
        signal.state = 1;
        signal.timout = 10;
        signal.armed = 1;
        signal.pwm = 1990;
#else
        capture_callback();
 800577e:	f7fd fcc1 	bl	8003104 <capture_callback>
#endif
        if(signal.state == 4){
 8005782:	4b28      	ldr	r3, [pc, #160]	; (8005824 <main+0x10c>)
 8005784:	791b      	ldrb	r3, [r3, #4]
 8005786:	2b04      	cmp	r3, #4
 8005788:	d109      	bne.n	800579e <main+0x86>
            motorTuneInput(1);
 800578a:	2001      	movs	r0, #1
 800578c:	f7ff ff74 	bl	8005678 <motorTuneInput>
            signal.armed = 1;
 8005790:	4b24      	ldr	r3, [pc, #144]	; (8005824 <main+0x10c>)
 8005792:	2201      	movs	r2, #1
 8005794:	715a      	strb	r2, [r3, #5]
            signal.state = 1;
 8005796:	4b23      	ldr	r3, [pc, #140]	; (8005824 <main+0x10c>)
 8005798:	2201      	movs	r2, #1
 800579a:	711a      	strb	r2, [r3, #4]
 800579c:	e7ed      	b.n	800577a <main+0x62>
        }
        else if(signal.armed){
 800579e:	4b21      	ldr	r3, [pc, #132]	; (8005824 <main+0x10c>)
 80057a0:	795b      	ldrb	r3, [r3, #5]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00d      	beq.n	80057c2 <main+0xaa>
            status_led_off();
 80057a6:	2380      	movs	r3, #128	; 0x80
 80057a8:	021a      	lsls	r2, r3, #8
 80057aa:	2390      	movs	r3, #144	; 0x90
 80057ac:	05db      	lsls	r3, r3, #23
 80057ae:	0011      	movs	r1, r2
 80057b0:	0018      	movs	r0, r3
 80057b2:	f7ff ffa5 	bl	8005700 <LL_GPIO_ResetOutputPin>
            //uprintf("s:%d, min:%d, max:%d, p0:%ld p1: %d p2: %d\n", signal.state, config.calibzero, config.calibmax, signal.pwm,  get_pwm_duty(), signal.capture);
            motor_pwm_set_pwm_val(signal.pwm);
 80057b6:	4b1b      	ldr	r3, [pc, #108]	; (8005824 <main+0x10c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	0018      	movs	r0, r3
 80057bc:	f7ff fdc2 	bl	8005344 <motor_pwm_set_pwm_val>
 80057c0:	e7db      	b.n	800577a <main+0x62>
        }
        else if(signal.state == 0 && --signal.timout < 2){//sinyal yok sıfırla.
 80057c2:	4b18      	ldr	r3, [pc, #96]	; (8005824 <main+0x10c>)
 80057c4:	791b      	ldrb	r3, [r3, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d111      	bne.n	80057ee <main+0xd6>
 80057ca:	4a16      	ldr	r2, [pc, #88]	; (8005824 <main+0x10c>)
 80057cc:	238c      	movs	r3, #140	; 0x8c
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	5ad3      	ldrh	r3, [r2, r3]
 80057d2:	3b01      	subs	r3, #1
 80057d4:	b299      	uxth	r1, r3
 80057d6:	4a13      	ldr	r2, [pc, #76]	; (8005824 <main+0x10c>)
 80057d8:	238c      	movs	r3, #140	; 0x8c
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	52d1      	strh	r1, [r2, r3]
 80057de:	4a11      	ldr	r2, [pc, #68]	; (8005824 <main+0x10c>)
 80057e0:	238c      	movs	r3, #140	; 0x8c
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	5ad3      	ldrh	r3, [r2, r3]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d801      	bhi.n	80057ee <main+0xd6>
            NVIC_SystemReset();
 80057ea:	f7ff ff6b 	bl	80056c4 <__NVIC_SystemReset>
        }
        else if(signal.state == 2){
 80057ee:	4b0d      	ldr	r3, [pc, #52]	; (8005824 <main+0x10c>)
 80057f0:	791b      	ldrb	r3, [r3, #4]
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d1c1      	bne.n	800577a <main+0x62>
            //calibre mode
            uprintf("signal calibrating.. %d %d\n", 75-config.calibleft, signal.capture);
 80057f6:	4b08      	ldr	r3, [pc, #32]	; (8005818 <main+0x100>)
 80057f8:	889b      	ldrh	r3, [r3, #4]
 80057fa:	001a      	movs	r2, r3
 80057fc:	234b      	movs	r3, #75	; 0x4b
 80057fe:	1a99      	subs	r1, r3, r2
 8005800:	4b08      	ldr	r3, [pc, #32]	; (8005824 <main+0x10c>)
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	4b08      	ldr	r3, [pc, #32]	; (8005828 <main+0x110>)
 8005806:	0018      	movs	r0, r3
 8005808:	f000 fad7 	bl	8005dba <uprintf>
        adc_update_run();
 800580c:	e7b5      	b.n	800577a <main+0x62>
 800580e:	46c0      	nop			; (mov r8, r8)
 8005810:	080072cc 	.word	0x080072cc
 8005814:	080072e0 	.word	0x080072e0
 8005818:	20000174 	.word	0x20000174
 800581c:	080072f0 	.word	0x080072f0
 8005820:	000005dc 	.word	0x000005dc
 8005824:	20000058 	.word	0x20000058
 8005828:	08007318 	.word	0x08007318

0800582c <LL_DMA_IsActiveFlag_TC1>:
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2202      	movs	r2, #2
 800583a:	4013      	ands	r3, r2
 800583c:	3b02      	subs	r3, #2
 800583e:	425a      	negs	r2, r3
 8005840:	4153      	adcs	r3, r2
 8005842:	b2db      	uxtb	r3, r3
}
 8005844:	0018      	movs	r0, r3
 8005846:	46bd      	mov	sp, r7
 8005848:	b002      	add	sp, #8
 800584a:	bd80      	pop	{r7, pc}

0800584c <LL_DMA_IsActiveFlag_TC2>:
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2220      	movs	r2, #32
 800585a:	4013      	ands	r3, r2
 800585c:	3b20      	subs	r3, #32
 800585e:	425a      	negs	r2, r3
 8005860:	4153      	adcs	r3, r2
 8005862:	b2db      	uxtb	r3, r3
}
 8005864:	0018      	movs	r0, r3
 8005866:	46bd      	mov	sp, r7
 8005868:	b002      	add	sp, #8
 800586a:	bd80      	pop	{r7, pc}

0800586c <LL_DMA_IsActiveFlag_TC3>:
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	2380      	movs	r3, #128	; 0x80
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4013      	ands	r3, r2
 800587e:	4a05      	ldr	r2, [pc, #20]	; (8005894 <LL_DMA_IsActiveFlag_TC3+0x28>)
 8005880:	4694      	mov	ip, r2
 8005882:	4463      	add	r3, ip
 8005884:	425a      	negs	r2, r3
 8005886:	4153      	adcs	r3, r2
 8005888:	b2db      	uxtb	r3, r3
}
 800588a:	0018      	movs	r0, r3
 800588c:	46bd      	mov	sp, r7
 800588e:	b002      	add	sp, #8
 8005890:	bd80      	pop	{r7, pc}
 8005892:	46c0      	nop			; (mov r8, r8)
 8005894:	fffffe00 	.word	0xfffffe00

08005898 <LL_DMA_IsActiveFlag_TC4>:
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	2380      	movs	r3, #128	; 0x80
 80058a6:	019b      	lsls	r3, r3, #6
 80058a8:	4013      	ands	r3, r2
 80058aa:	4a05      	ldr	r2, [pc, #20]	; (80058c0 <LL_DMA_IsActiveFlag_TC4+0x28>)
 80058ac:	4694      	mov	ip, r2
 80058ae:	4463      	add	r3, ip
 80058b0:	425a      	negs	r2, r3
 80058b2:	4153      	adcs	r3, r2
 80058b4:	b2db      	uxtb	r3, r3
}
 80058b6:	0018      	movs	r0, r3
 80058b8:	46bd      	mov	sp, r7
 80058ba:	b002      	add	sp, #8
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	46c0      	nop			; (mov r8, r8)
 80058c0:	ffffe000 	.word	0xffffe000

080058c4 <LL_DMA_IsActiveFlag_TC5>:
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5));
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	2380      	movs	r3, #128	; 0x80
 80058d2:	029b      	lsls	r3, r3, #10
 80058d4:	4013      	ands	r3, r2
 80058d6:	4a05      	ldr	r2, [pc, #20]	; (80058ec <LL_DMA_IsActiveFlag_TC5+0x28>)
 80058d8:	4694      	mov	ip, r2
 80058da:	4463      	add	r3, ip
 80058dc:	425a      	negs	r2, r3
 80058de:	4153      	adcs	r3, r2
 80058e0:	b2db      	uxtb	r3, r3
}
 80058e2:	0018      	movs	r0, r3
 80058e4:	46bd      	mov	sp, r7
 80058e6:	b002      	add	sp, #8
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	46c0      	nop			; (mov r8, r8)
 80058ec:	fffe0000 	.word	0xfffe0000

080058f0 <LL_DMA_IsActiveFlag_HT4>:
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF4) == (DMA_ISR_HTIF4));
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	2380      	movs	r3, #128	; 0x80
 80058fe:	01db      	lsls	r3, r3, #7
 8005900:	4013      	ands	r3, r2
 8005902:	4a05      	ldr	r2, [pc, #20]	; (8005918 <LL_DMA_IsActiveFlag_HT4+0x28>)
 8005904:	4694      	mov	ip, r2
 8005906:	4463      	add	r3, ip
 8005908:	425a      	negs	r2, r3
 800590a:	4153      	adcs	r3, r2
 800590c:	b2db      	uxtb	r3, r3
}
 800590e:	0018      	movs	r0, r3
 8005910:	46bd      	mov	sp, r7
 8005912:	b002      	add	sp, #8
 8005914:	bd80      	pop	{r7, pc}
 8005916:	46c0      	nop			; (mov r8, r8)
 8005918:	ffffc000 	.word	0xffffc000

0800591c <LL_DMA_IsActiveFlag_TE4>:
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF4) == (DMA_ISR_TEIF4));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	2380      	movs	r3, #128	; 0x80
 800592a:	021b      	lsls	r3, r3, #8
 800592c:	4013      	ands	r3, r2
 800592e:	4a05      	ldr	r2, [pc, #20]	; (8005944 <LL_DMA_IsActiveFlag_TE4+0x28>)
 8005930:	4694      	mov	ip, r2
 8005932:	4463      	add	r3, ip
 8005934:	425a      	negs	r2, r3
 8005936:	4153      	adcs	r3, r2
 8005938:	b2db      	uxtb	r3, r3
}
 800593a:	0018      	movs	r0, r3
 800593c:	46bd      	mov	sp, r7
 800593e:	b002      	add	sp, #8
 8005940:	bd80      	pop	{r7, pc}
 8005942:	46c0      	nop			; (mov r8, r8)
 8005944:	ffff8000 	.word	0xffff8000

08005948 <LL_DMA_ClearFlag_GI2>:
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF2);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2210      	movs	r2, #16
 8005954:	605a      	str	r2, [r3, #4]
}
 8005956:	46c0      	nop			; (mov r8, r8)
 8005958:	46bd      	mov	sp, r7
 800595a:	b002      	add	sp, #8
 800595c:	bd80      	pop	{r7, pc}

0800595e <LL_DMA_ClearFlag_GI3>:
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b082      	sub	sp, #8
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2280      	movs	r2, #128	; 0x80
 800596a:	0052      	lsls	r2, r2, #1
 800596c:	605a      	str	r2, [r3, #4]
}
 800596e:	46c0      	nop			; (mov r8, r8)
 8005970:	46bd      	mov	sp, r7
 8005972:	b002      	add	sp, #8
 8005974:	bd80      	pop	{r7, pc}

08005976 <LL_DMA_ClearFlag_GI4>:
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b082      	sub	sp, #8
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF4);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2280      	movs	r2, #128	; 0x80
 8005982:	0152      	lsls	r2, r2, #5
 8005984:	605a      	str	r2, [r3, #4]
}
 8005986:	46c0      	nop			; (mov r8, r8)
 8005988:	46bd      	mov	sp, r7
 800598a:	b002      	add	sp, #8
 800598c:	bd80      	pop	{r7, pc}

0800598e <LL_DMA_ClearFlag_GI5>:
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b082      	sub	sp, #8
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF5);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2280      	movs	r2, #128	; 0x80
 800599a:	0252      	lsls	r2, r2, #9
 800599c:	605a      	str	r2, [r3, #4]
}
 800599e:	46c0      	nop			; (mov r8, r8)
 80059a0:	46bd      	mov	sp, r7
 80059a2:	b002      	add	sp, #8
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <LL_DMA_ClearFlag_TC1>:
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b082      	sub	sp, #8
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2202      	movs	r2, #2
 80059b2:	605a      	str	r2, [r3, #4]
}
 80059b4:	46c0      	nop			; (mov r8, r8)
 80059b6:	46bd      	mov	sp, r7
 80059b8:	b002      	add	sp, #8
 80059ba:	bd80      	pop	{r7, pc}

080059bc <LL_DMA_ClearFlag_HT4>:
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF4);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2280      	movs	r2, #128	; 0x80
 80059c8:	01d2      	lsls	r2, r2, #7
 80059ca:	605a      	str	r2, [r3, #4]
}
 80059cc:	46c0      	nop			; (mov r8, r8)
 80059ce:	46bd      	mov	sp, r7
 80059d0:	b002      	add	sp, #8
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <LL_DMA_ClearFlag_TE4>:
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF4);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2280      	movs	r2, #128	; 0x80
 80059e0:	0212      	lsls	r2, r2, #8
 80059e2:	605a      	str	r2, [r3, #4]
}
 80059e4:	46c0      	nop			; (mov r8, r8)
 80059e6:	46bd      	mov	sp, r7
 80059e8:	b002      	add	sp, #8
 80059ea:	bd80      	pop	{r7, pc}

080059ec <LL_TIM_SetCounter>:
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	625a      	str	r2, [r3, #36]	; 0x24
}
 80059fc:	46c0      	nop			; (mov r8, r8)
 80059fe:	46bd      	mov	sp, r7
 8005a00:	b002      	add	sp, #8
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <LL_TIM_IC_SetPolarity>:
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d01e      	beq.n	8005a54 <LL_TIM_IC_SetPolarity+0x50>
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	2b04      	cmp	r3, #4
 8005a1a:	d019      	beq.n	8005a50 <LL_TIM_IC_SetPolarity+0x4c>
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2b10      	cmp	r3, #16
 8005a20:	d014      	beq.n	8005a4c <LL_TIM_IC_SetPolarity+0x48>
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	2b40      	cmp	r3, #64	; 0x40
 8005a26:	d00f      	beq.n	8005a48 <LL_TIM_IC_SetPolarity+0x44>
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	2380      	movs	r3, #128	; 0x80
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d008      	beq.n	8005a44 <LL_TIM_IC_SetPolarity+0x40>
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	2380      	movs	r3, #128	; 0x80
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d101      	bne.n	8005a40 <LL_TIM_IC_SetPolarity+0x3c>
 8005a3c:	2305      	movs	r3, #5
 8005a3e:	e00a      	b.n	8005a56 <LL_TIM_IC_SetPolarity+0x52>
 8005a40:	2306      	movs	r3, #6
 8005a42:	e008      	b.n	8005a56 <LL_TIM_IC_SetPolarity+0x52>
 8005a44:	2304      	movs	r3, #4
 8005a46:	e006      	b.n	8005a56 <LL_TIM_IC_SetPolarity+0x52>
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e004      	b.n	8005a56 <LL_TIM_IC_SetPolarity+0x52>
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	e002      	b.n	8005a56 <LL_TIM_IC_SetPolarity+0x52>
 8005a50:	2301      	movs	r3, #1
 8005a52:	e000      	b.n	8005a56 <LL_TIM_IC_SetPolarity+0x52>
 8005a54:	2300      	movs	r3, #0
 8005a56:	2017      	movs	r0, #23
 8005a58:	183a      	adds	r2, r7, r0
 8005a5a:	7013      	strb	r3, [r2, #0]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6a1b      	ldr	r3, [r3, #32]
 8005a60:	183a      	adds	r2, r7, r0
 8005a62:	7812      	ldrb	r2, [r2, #0]
 8005a64:	490a      	ldr	r1, [pc, #40]	; (8005a90 <LL_TIM_IC_SetPolarity+0x8c>)
 8005a66:	5c8a      	ldrb	r2, [r1, r2]
 8005a68:	0011      	movs	r1, r2
 8005a6a:	220a      	movs	r2, #10
 8005a6c:	408a      	lsls	r2, r1
 8005a6e:	43d2      	mvns	r2, r2
 8005a70:	401a      	ands	r2, r3
 8005a72:	183b      	adds	r3, r7, r0
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	4906      	ldr	r1, [pc, #24]	; (8005a90 <LL_TIM_IC_SetPolarity+0x8c>)
 8005a78:	5ccb      	ldrb	r3, [r1, r3]
 8005a7a:	0019      	movs	r1, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	408b      	lsls	r3, r1
 8005a80:	431a      	orrs	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	621a      	str	r2, [r3, #32]
}
 8005a86:	46c0      	nop			; (mov r8, r8)
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	b006      	add	sp, #24
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	46c0      	nop			; (mov r8, r8)
 8005a90:	08007488 	.word	0x08007488

08005a94 <LL_TIM_IC_GetPolarity>:
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d01e      	beq.n	8005ae2 <LL_TIM_IC_GetPolarity+0x4e>
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	d019      	beq.n	8005ade <LL_TIM_IC_GetPolarity+0x4a>
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	2b10      	cmp	r3, #16
 8005aae:	d014      	beq.n	8005ada <LL_TIM_IC_GetPolarity+0x46>
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	2b40      	cmp	r3, #64	; 0x40
 8005ab4:	d00f      	beq.n	8005ad6 <LL_TIM_IC_GetPolarity+0x42>
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	2380      	movs	r3, #128	; 0x80
 8005aba:	005b      	lsls	r3, r3, #1
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d008      	beq.n	8005ad2 <LL_TIM_IC_GetPolarity+0x3e>
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	2380      	movs	r3, #128	; 0x80
 8005ac4:	00db      	lsls	r3, r3, #3
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d101      	bne.n	8005ace <LL_TIM_IC_GetPolarity+0x3a>
 8005aca:	2305      	movs	r3, #5
 8005acc:	e00a      	b.n	8005ae4 <LL_TIM_IC_GetPolarity+0x50>
 8005ace:	2306      	movs	r3, #6
 8005ad0:	e008      	b.n	8005ae4 <LL_TIM_IC_GetPolarity+0x50>
 8005ad2:	2304      	movs	r3, #4
 8005ad4:	e006      	b.n	8005ae4 <LL_TIM_IC_GetPolarity+0x50>
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e004      	b.n	8005ae4 <LL_TIM_IC_GetPolarity+0x50>
 8005ada:	2302      	movs	r3, #2
 8005adc:	e002      	b.n	8005ae4 <LL_TIM_IC_GetPolarity+0x50>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e000      	b.n	8005ae4 <LL_TIM_IC_GetPolarity+0x50>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	200f      	movs	r0, #15
 8005ae6:	183a      	adds	r2, r7, r0
 8005ae8:	7013      	strb	r3, [r2, #0]
  return (READ_BIT(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel])) >>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	183a      	adds	r2, r7, r0
 8005af0:	7812      	ldrb	r2, [r2, #0]
 8005af2:	4907      	ldr	r1, [pc, #28]	; (8005b10 <LL_TIM_IC_GetPolarity+0x7c>)
 8005af4:	5c8a      	ldrb	r2, [r1, r2]
 8005af6:	0011      	movs	r1, r2
 8005af8:	220a      	movs	r2, #10
 8005afa:	408a      	lsls	r2, r1
 8005afc:	4013      	ands	r3, r2
          SHIFT_TAB_CCxP[iChannel]);
 8005afe:	183a      	adds	r2, r7, r0
 8005b00:	7812      	ldrb	r2, [r2, #0]
 8005b02:	4903      	ldr	r1, [pc, #12]	; (8005b10 <LL_TIM_IC_GetPolarity+0x7c>)
 8005b04:	5c8a      	ldrb	r2, [r1, r2]
  return (READ_BIT(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel])) >>
 8005b06:	40d3      	lsrs	r3, r2
}
 8005b08:	0018      	movs	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	b004      	add	sp, #16
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	08007488 	.word	0x08007488

08005b14 <LL_TIM_ClearFlag_UPDATE>:
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	4252      	negs	r2, r2
 8005b22:	611a      	str	r2, [r3, #16]
}
 8005b24:	46c0      	nop			; (mov r8, r8)
 8005b26:	46bd      	mov	sp, r7
 8005b28:	b002      	add	sp, #8
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <LL_TIM_IsActiveFlag_UPDATE>:
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8005b40:	2301      	movs	r3, #1
 8005b42:	e000      	b.n	8005b46 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	0018      	movs	r0, r3
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	b002      	add	sp, #8
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <LL_TIM_ClearFlag_CC1>:
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b082      	sub	sp, #8
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2203      	movs	r2, #3
 8005b5a:	4252      	negs	r2, r2
 8005b5c:	611a      	str	r2, [r3, #16]
}
 8005b5e:	46c0      	nop			; (mov r8, r8)
 8005b60:	46bd      	mov	sp, r7
 8005b62:	b002      	add	sp, #8
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <LL_TIM_IsActiveFlag_CC1>:
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b082      	sub	sp, #8
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	2202      	movs	r2, #2
 8005b74:	4013      	ands	r3, r2
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d101      	bne.n	8005b7e <LL_TIM_IsActiveFlag_CC1+0x18>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e000      	b.n	8005b80 <LL_TIM_IsActiveFlag_CC1+0x1a>
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	0018      	movs	r0, r3
 8005b82:	46bd      	mov	sp, r7
 8005b84:	b002      	add	sp, #8
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005b8c:	e7fe      	b.n	8005b8c <NMI_Handler+0x4>

08005b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b92:	e7fe      	b.n	8005b92 <HardFault_Handler+0x4>

08005b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005b98:	46c0      	nop			; (mov r8, r8)
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005ba2:	46c0      	nop			; (mov r8, r8)
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005bac:	46c0      	nop			; (mov r8, r8)
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
	...

08005bb4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
    if (LL_DMA_IsActiveFlag_TC1(DMA1)) {
 8005bb8:	4b07      	ldr	r3, [pc, #28]	; (8005bd8 <DMA1_Channel1_IRQHandler+0x24>)
 8005bba:	0018      	movs	r0, r3
 8005bbc:	f7ff fe36 	bl	800582c <LL_DMA_IsActiveFlag_TC1>
 8005bc0:	1e03      	subs	r3, r0, #0
 8005bc2:	d005      	beq.n	8005bd0 <DMA1_Channel1_IRQHandler+0x1c>
        LL_DMA_ClearFlag_TC1(DMA1);
 8005bc4:	4b04      	ldr	r3, [pc, #16]	; (8005bd8 <DMA1_Channel1_IRQHandler+0x24>)
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	f7ff feed 	bl	80059a6 <LL_DMA_ClearFlag_TC1>

        updateAdcValues();
 8005bcc:	f7fc ffc6 	bl	8002b5c <updateAdcValues>
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005bd0:	46c0      	nop			; (mov r8, r8)
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	46c0      	nop			; (mov r8, r8)
 8005bd8:	40020000 	.word	0x40020000

08005bdc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */
    if (LL_DMA_IsActiveFlag_TC2(DMA1)) {
 8005be0:	4b0b      	ldr	r3, [pc, #44]	; (8005c10 <DMA1_Channel2_3_IRQHandler+0x34>)
 8005be2:	0018      	movs	r0, r3
 8005be4:	f7ff fe32 	bl	800584c <LL_DMA_IsActiveFlag_TC2>
 8005be8:	1e03      	subs	r3, r0, #0
 8005bea:	d003      	beq.n	8005bf4 <DMA1_Channel2_3_IRQHandler+0x18>
      LL_DMA_ClearFlag_GI2(DMA1);
 8005bec:	4b08      	ldr	r3, [pc, #32]	; (8005c10 <DMA1_Channel2_3_IRQHandler+0x34>)
 8005bee:	0018      	movs	r0, r3
 8005bf0:	f7ff feaa 	bl	8005948 <LL_DMA_ClearFlag_GI2>
    }
    if (LL_DMA_IsActiveFlag_TC3(DMA1)) {
 8005bf4:	4b06      	ldr	r3, [pc, #24]	; (8005c10 <DMA1_Channel2_3_IRQHandler+0x34>)
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f7ff fe38 	bl	800586c <LL_DMA_IsActiveFlag_TC3>
 8005bfc:	1e03      	subs	r3, r0, #0
 8005bfe:	d003      	beq.n	8005c08 <DMA1_Channel2_3_IRQHandler+0x2c>
      LL_DMA_ClearFlag_GI3(DMA1);
 8005c00:	4b03      	ldr	r3, [pc, #12]	; (8005c10 <DMA1_Channel2_3_IRQHandler+0x34>)
 8005c02:	0018      	movs	r0, r3
 8005c04:	f7ff feab 	bl	800595e <LL_DMA_ClearFlag_GI3>
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8005c08:	46c0      	nop			; (mov r8, r8)
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	46c0      	nop			; (mov r8, r8)
 8005c10:	40020000 	.word	0x40020000

08005c14 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */
    if (LL_DMA_IsActiveFlag_TC5(DMA1)) {
 8005c18:	4b1e      	ldr	r3, [pc, #120]	; (8005c94 <DMA1_Channel4_5_IRQHandler+0x80>)
 8005c1a:	0018      	movs	r0, r3
 8005c1c:	f7ff fe52 	bl	80058c4 <LL_DMA_IsActiveFlag_TC5>
 8005c20:	1e03      	subs	r3, r0, #0
 8005c22:	d003      	beq.n	8005c2c <DMA1_Channel4_5_IRQHandler+0x18>
      LL_DMA_ClearFlag_GI5(DMA1);
 8005c24:	4b1b      	ldr	r3, [pc, #108]	; (8005c94 <DMA1_Channel4_5_IRQHandler+0x80>)
 8005c26:	0018      	movs	r0, r3
 8005c28:	f7ff feb1 	bl	800598e <LL_DMA_ClearFlag_GI5>
    }
  /* USER CODE END DMA1_Channel4_5_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */
    if(LL_DMA_IsActiveFlag_HT4(DMA1)){
 8005c2c:	4b19      	ldr	r3, [pc, #100]	; (8005c94 <DMA1_Channel4_5_IRQHandler+0x80>)
 8005c2e:	0018      	movs	r0, r3
 8005c30:	f7ff fe5e 	bl	80058f0 <LL_DMA_IsActiveFlag_HT4>
 8005c34:	1e03      	subs	r3, r0, #0
 8005c36:	d009      	beq.n	8005c4c <DMA1_Channel4_5_IRQHandler+0x38>
        LL_TIM_IC_SetPolarity(IC_TIMER_REGISTER, IC_TIMER_CHANNEL, LL_TIM_IC_POLARITY_FALLING);
 8005c38:	4b17      	ldr	r3, [pc, #92]	; (8005c98 <DMA1_Channel4_5_IRQHandler+0x84>)
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	0018      	movs	r0, r3
 8005c40:	f7ff fee0 	bl	8005a04 <LL_TIM_IC_SetPolarity>
        LL_DMA_ClearFlag_HT4(DMA1);
 8005c44:	4b13      	ldr	r3, [pc, #76]	; (8005c94 <DMA1_Channel4_5_IRQHandler+0x80>)
 8005c46:	0018      	movs	r0, r3
 8005c48:	f7ff feb8 	bl	80059bc <LL_DMA_ClearFlag_HT4>
    }

    if (LL_DMA_IsActiveFlag_TC4(DMA1)) {
 8005c4c:	4b11      	ldr	r3, [pc, #68]	; (8005c94 <DMA1_Channel4_5_IRQHandler+0x80>)
 8005c4e:	0018      	movs	r0, r3
 8005c50:	f7ff fe22 	bl	8005898 <LL_DMA_IsActiveFlag_TC4>
 8005c54:	1e03      	subs	r3, r0, #0
 8005c56:	d00f      	beq.n	8005c78 <DMA1_Channel4_5_IRQHandler+0x64>
      signal.dmac = 1;
 8005c58:	4a10      	ldr	r2, [pc, #64]	; (8005c9c <DMA1_Channel4_5_IRQHandler+0x88>)
 8005c5a:	2386      	movs	r3, #134	; 0x86
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	2101      	movs	r1, #1
 8005c60:	54d1      	strb	r1, [r2, r3]
      LL_TIM_IC_SetPolarity(IC_TIMER_REGISTER, IC_TIMER_CHANNEL, LL_TIM_IC_POLARITY_RISING);
 8005c62:	4b0d      	ldr	r3, [pc, #52]	; (8005c98 <DMA1_Channel4_5_IRQHandler+0x84>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	2101      	movs	r1, #1
 8005c68:	0018      	movs	r0, r3
 8005c6a:	f7ff fecb 	bl	8005a04 <LL_TIM_IC_SetPolarity>
      LL_DMA_ClearFlag_GI4(DMA1);
 8005c6e:	4b09      	ldr	r3, [pc, #36]	; (8005c94 <DMA1_Channel4_5_IRQHandler+0x80>)
 8005c70:	0018      	movs	r0, r3
 8005c72:	f7ff fe80 	bl	8005976 <LL_DMA_ClearFlag_GI4>
    else if (0 != LL_DMA_IsActiveFlag_TE4(DMA1))
    {
      LL_DMA_ClearFlag_TE4(DMA1);
    }
  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8005c76:	e009      	b.n	8005c8c <DMA1_Channel4_5_IRQHandler+0x78>
    else if (0 != LL_DMA_IsActiveFlag_TE4(DMA1))
 8005c78:	4b06      	ldr	r3, [pc, #24]	; (8005c94 <DMA1_Channel4_5_IRQHandler+0x80>)
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	f7ff fe4e 	bl	800591c <LL_DMA_IsActiveFlag_TE4>
 8005c80:	1e03      	subs	r3, r0, #0
 8005c82:	d003      	beq.n	8005c8c <DMA1_Channel4_5_IRQHandler+0x78>
      LL_DMA_ClearFlag_TE4(DMA1);
 8005c84:	4b03      	ldr	r3, [pc, #12]	; (8005c94 <DMA1_Channel4_5_IRQHandler+0x80>)
 8005c86:	0018      	movs	r0, r3
 8005c88:	f7ff fea4 	bl	80059d4 <LL_DMA_ClearFlag_TE4>
}
 8005c8c:	46c0      	nop			; (mov r8, r8)
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	46c0      	nop			; (mov r8, r8)
 8005c94:	40020000 	.word	0x40020000
 8005c98:	40000400 	.word	0x40000400
 8005c9c:	20000058 	.word	0x20000058

08005ca0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

    if(LL_TIM_IsActiveFlag_UPDATE(IC_TIMER_REGISTER) == 1){
 8005ca4:	4b07      	ldr	r3, [pc, #28]	; (8005cc4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x24>)
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	f7ff ff40 	bl	8005b2c <LL_TIM_IsActiveFlag_UPDATE>
 8005cac:	0003      	movs	r3, r0
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d103      	bne.n	8005cba <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1a>
        LL_TIM_ClearFlag_UPDATE(IC_TIMER_REGISTER);
 8005cb2:	4b04      	ldr	r3, [pc, #16]	; (8005cc4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x24>)
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	f7ff ff2d 	bl	8005b14 <LL_TIM_ClearFlag_UPDATE>
    }

    timer_sinus_callback();
 8005cba:	f7ff fcb1 	bl	8005620 <timer_sinus_callback>
  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8005cbe:	46c0      	nop			; (mov r8, r8)
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	40000400 	.word	0x40000400

08005cc8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	af00      	add	r7, sp, #0
    if(LL_TIM_IsActiveFlag_UPDATE(IC_TIMER_REGISTER) == 1){
        LL_TIM_ClearFlag_UPDATE(IC_TIMER_REGISTER);

    }
#else
    if(LL_TIM_IsActiveFlag_CC1(IC_TIMER_REGISTER) == 1){
 8005ccc:	4b25      	ldr	r3, [pc, #148]	; (8005d64 <TIM3_IRQHandler+0x9c>)
 8005cce:	0018      	movs	r0, r3
 8005cd0:	f7ff ff49 	bl	8005b66 <LL_TIM_IsActiveFlag_CC1>
 8005cd4:	0003      	movs	r3, r0
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d140      	bne.n	8005d5c <TIM3_IRQHandler+0x94>
        if(LL_TIM_IC_GetPolarity(IC_TIMER_REGISTER, IC_TIMER_CHANNEL) == LL_TIM_IC_POLARITY_RISING) // yükselen kenar ile mi tetiklenmiş ?
 8005cda:	4b22      	ldr	r3, [pc, #136]	; (8005d64 <TIM3_IRQHandler+0x9c>)
 8005cdc:	2101      	movs	r1, #1
 8005cde:	0018      	movs	r0, r3
 8005ce0:	f7ff fed8 	bl	8005a94 <LL_TIM_IC_GetPolarity>
 8005ce4:	1e03      	subs	r3, r0, #0
 8005ce6:	d10d      	bne.n	8005d04 <TIM3_IRQHandler+0x3c>
        {
            signal.rise = IC_TIMER_REGISTER->CCR1;
 8005ce8:	4b1e      	ldr	r3, [pc, #120]	; (8005d64 <TIM3_IRQHandler+0x9c>)
 8005cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cec:	0019      	movs	r1, r3
 8005cee:	4a1e      	ldr	r2, [pc, #120]	; (8005d68 <TIM3_IRQHandler+0xa0>)
 8005cf0:	238a      	movs	r3, #138	; 0x8a
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	50d1      	str	r1, [r2, r3]
            LL_TIM_IC_SetPolarity(IC_TIMER_REGISTER, IC_TIMER_CHANNEL, LL_TIM_IC_POLARITY_FALLING);
 8005cf6:	4b1b      	ldr	r3, [pc, #108]	; (8005d64 <TIM3_IRQHandler+0x9c>)
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	0018      	movs	r0, r3
 8005cfe:	f7ff fe81 	bl	8005a04 <LL_TIM_IC_SetPolarity>
#endif
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005d02:	e02b      	b.n	8005d5c <TIM3_IRQHandler+0x94>
            signal.dmac = 1;
 8005d04:	4a18      	ldr	r2, [pc, #96]	; (8005d68 <TIM3_IRQHandler+0xa0>)
 8005d06:	2386      	movs	r3, #134	; 0x86
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	54d1      	strb	r1, [r2, r3]
            signal.fall = IC_TIMER_REGISTER->CCR1;
 8005d0e:	4b15      	ldr	r3, [pc, #84]	; (8005d64 <TIM3_IRQHandler+0x9c>)
 8005d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d12:	0019      	movs	r1, r3
 8005d14:	4a14      	ldr	r2, [pc, #80]	; (8005d68 <TIM3_IRQHandler+0xa0>)
 8005d16:	2388      	movs	r3, #136	; 0x88
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	50d1      	str	r1, [r2, r3]
            signal.capture  = signal.fall - signal.rise;
 8005d1c:	4a12      	ldr	r2, [pc, #72]	; (8005d68 <TIM3_IRQHandler+0xa0>)
 8005d1e:	2388      	movs	r3, #136	; 0x88
 8005d20:	005b      	lsls	r3, r3, #1
 8005d22:	58d2      	ldr	r2, [r2, r3]
 8005d24:	4910      	ldr	r1, [pc, #64]	; (8005d68 <TIM3_IRQHandler+0xa0>)
 8005d26:	238a      	movs	r3, #138	; 0x8a
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	58cb      	ldr	r3, [r1, r3]
 8005d2c:	1ad2      	subs	r2, r2, r3
 8005d2e:	4b0e      	ldr	r3, [pc, #56]	; (8005d68 <TIM3_IRQHandler+0xa0>)
 8005d30:	609a      	str	r2, [r3, #8]
            if(signal.capture < 0)signal.capture += 0xFFFF;// eger sonuc negatifse taban tumleme yap
 8005d32:	4b0d      	ldr	r3, [pc, #52]	; (8005d68 <TIM3_IRQHandler+0xa0>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	da05      	bge.n	8005d46 <TIM3_IRQHandler+0x7e>
 8005d3a:	4b0b      	ldr	r3, [pc, #44]	; (8005d68 <TIM3_IRQHandler+0xa0>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	4a0b      	ldr	r2, [pc, #44]	; (8005d6c <TIM3_IRQHandler+0xa4>)
 8005d40:	189a      	adds	r2, r3, r2
 8005d42:	4b09      	ldr	r3, [pc, #36]	; (8005d68 <TIM3_IRQHandler+0xa0>)
 8005d44:	609a      	str	r2, [r3, #8]
            LL_TIM_IC_SetPolarity(IC_TIMER_REGISTER, IC_TIMER_CHANNEL, LL_TIM_IC_POLARITY_RISING);
 8005d46:	4b07      	ldr	r3, [pc, #28]	; (8005d64 <TIM3_IRQHandler+0x9c>)
 8005d48:	2200      	movs	r2, #0
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	f7ff fe59 	bl	8005a04 <LL_TIM_IC_SetPolarity>
            LL_TIM_SetCounter(IC_TIMER_REGISTER, 0);
 8005d52:	4b04      	ldr	r3, [pc, #16]	; (8005d64 <TIM3_IRQHandler+0x9c>)
 8005d54:	2100      	movs	r1, #0
 8005d56:	0018      	movs	r0, r3
 8005d58:	f7ff fe48 	bl	80059ec <LL_TIM_SetCounter>
}
 8005d5c:	46c0      	nop			; (mov r8, r8)
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	46c0      	nop			; (mov r8, r8)
 8005d64:	40000400 	.word	0x40000400
 8005d68:	20000058 	.word	0x20000058
 8005d6c:	0000ffff 	.word	0x0000ffff

08005d70 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */
    //300hz timer
    if(LL_TIM_IsActiveFlag_CC1(TIM14) == 1){
 8005d74:	4b0d      	ldr	r3, [pc, #52]	; (8005dac <TIM14_IRQHandler+0x3c>)
 8005d76:	0018      	movs	r0, r3
 8005d78:	f7ff fef5 	bl	8005b66 <LL_TIM_IsActiveFlag_CC1>
 8005d7c:	0003      	movs	r3, r0
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d103      	bne.n	8005d8a <TIM14_IRQHandler+0x1a>
      LL_TIM_ClearFlag_CC1(TIM14);
 8005d82:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <TIM14_IRQHandler+0x3c>)
 8005d84:	0018      	movs	r0, r3
 8005d86:	f7ff fee2 	bl	8005b4e <LL_TIM_ClearFlag_CC1>
    }

    if(LL_TIM_IsActiveFlag_UPDATE(TIM14) == 1){
 8005d8a:	4b08      	ldr	r3, [pc, #32]	; (8005dac <TIM14_IRQHandler+0x3c>)
 8005d8c:	0018      	movs	r0, r3
 8005d8e:	f7ff fecd 	bl	8005b2c <LL_TIM_IsActiveFlag_UPDATE>
 8005d92:	0003      	movs	r3, r0
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d103      	bne.n	8005da0 <TIM14_IRQHandler+0x30>
        LL_TIM_ClearFlag_UPDATE(TIM14);
 8005d98:	4b04      	ldr	r3, [pc, #16]	; (8005dac <TIM14_IRQHandler+0x3c>)
 8005d9a:	0018      	movs	r0, r3
 8005d9c:	f7ff feba 	bl	8005b14 <LL_TIM_ClearFlag_UPDATE>
    }

    comutate_timer_callback();
 8005da0:	f7ff fba8 	bl	80054f4 <comutate_timer_callback>
  /* USER CODE END TIM14_IRQn 0 */
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8005da4:	46c0      	nop			; (mov r8, r8)
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	46c0      	nop			; (mov r8, r8)
 8005dac:	40002000 	.word	0x40002000

08005db0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8005db4:	46c0      	nop			; (mov r8, r8)
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <uprintf>:
    for(uint8_t i=0;i<len;i++){//String write
        soft_write_byte(msg[i]);
    }
}

void uprintf(char*format, ...){
 8005dba:	b40f      	push	{r0, r1, r2, r3}
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	af00      	add	r7, sp, #0

    //send_telem_DMA();
    //HAL_Delay(100);
    //while(!LL_DMA_IsActiveFlag_TC2(DMA1));
#endif
}
 8005dc0:	46c0      	nop			; (mov r8, r8)
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bc80      	pop	{r7}
 8005dc6:	bc08      	pop	{r3}
 8005dc8:	b004      	add	sp, #16
 8005dca:	4718      	bx	r3

08005dcc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005dcc:	480d      	ldr	r0, [pc, #52]	; (8005e04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005dce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005dd0:	480d      	ldr	r0, [pc, #52]	; (8005e08 <LoopForever+0x6>)
  ldr r1, =_edata
 8005dd2:	490e      	ldr	r1, [pc, #56]	; (8005e0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005dd4:	4a0e      	ldr	r2, [pc, #56]	; (8005e10 <LoopForever+0xe>)
  movs r3, #0
 8005dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005dd8:	e002      	b.n	8005de0 <LoopCopyDataInit>

08005dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005dde:	3304      	adds	r3, #4

08005de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005de4:	d3f9      	bcc.n	8005dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005de6:	4a0b      	ldr	r2, [pc, #44]	; (8005e14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005de8:	4c0b      	ldr	r4, [pc, #44]	; (8005e18 <LoopForever+0x16>)
  movs r3, #0
 8005dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005dec:	e001      	b.n	8005df2 <LoopFillZerobss>

08005dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005df0:	3204      	adds	r2, #4

08005df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005df4:	d3fb      	bcc.n	8005dee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005df6:	f7ff ffdb 	bl	8005db0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005dfa:	f001 fa25 	bl	8007248 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005dfe:	f7ff fc8b 	bl	8005718 <main>

08005e02 <LoopForever>:

LoopForever:
    b LoopForever
 8005e02:	e7fe      	b.n	8005e02 <LoopForever>
  ldr   r0, =_estack
 8005e04:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8005e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e0c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8005e10:	080074b8 	.word	0x080074b8
  ldr r2, =_sbss
 8005e14:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8005e18:	200001c0 	.word	0x200001c0

08005e1c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005e1c:	e7fe      	b.n	8005e1c <ADC1_IRQHandler>
	...

08005e20 <LL_ADC_REG_SetTriggerSource>:
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	4a05      	ldr	r2, [pc, #20]	; (8005e44 <LL_ADC_REG_SetTriggerSource+0x24>)
 8005e30:	401a      	ands	r2, r3
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	431a      	orrs	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	60da      	str	r2, [r3, #12]
}
 8005e3a:	46c0      	nop			; (mov r8, r8)
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	b002      	add	sp, #8
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	46c0      	nop			; (mov r8, r8)
 8005e44:	fffff23f 	.word	0xfffff23f

08005e48 <LL_ADC_Disable>:
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	4a04      	ldr	r2, [pc, #16]	; (8005e68 <LL_ADC_Disable+0x20>)
 8005e56:	4013      	ands	r3, r2
 8005e58:	2202      	movs	r2, #2
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	609a      	str	r2, [r3, #8]
}
 8005e60:	46c0      	nop			; (mov r8, r8)
 8005e62:	46bd      	mov	sp, r7
 8005e64:	b002      	add	sp, #8
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	7fffffe8 	.word	0x7fffffe8

08005e6c <LL_ADC_IsEnabled>:
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	425a      	negs	r2, r3
 8005e80:	4153      	adcs	r3, r2
 8005e82:	b2db      	uxtb	r3, r3
}
 8005e84:	0018      	movs	r0, r3
 8005e86:	46bd      	mov	sp, r7
 8005e88:	b002      	add	sp, #8
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <LL_ADC_IsDisableOngoing>:
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	2202      	movs	r2, #2
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	3b02      	subs	r3, #2
 8005e9e:	425a      	negs	r2, r3
 8005ea0:	4153      	adcs	r3, r2
 8005ea2:	b2db      	uxtb	r3, r3
}
 8005ea4:	0018      	movs	r0, r3
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	b002      	add	sp, #8
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	4a04      	ldr	r2, [pc, #16]	; (8005ecc <LL_ADC_REG_StopConversion+0x20>)
 8005eba:	4013      	ands	r3, r2
 8005ebc:	2210      	movs	r2, #16
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005ec4:	46c0      	nop			; (mov r8, r8)
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	b002      	add	sp, #8
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	7fffffe8 	.word	0x7fffffe8

08005ed0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	2204      	movs	r2, #4
 8005ede:	4013      	ands	r3, r2
 8005ee0:	3b04      	subs	r3, #4
 8005ee2:	425a      	negs	r2, r3
 8005ee4:	4153      	adcs	r3, r2
 8005ee6:	b2db      	uxtb	r3, r3
}
 8005ee8:	0018      	movs	r0, r3
 8005eea:	46bd      	mov	sp, r7
 8005eec:	b002      	add	sp, #8
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <LL_ADC_REG_IsStopConversionOngoing>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_IsStopConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no command of conversion stop is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsStopConversionOngoing(ADC_TypeDef *ADCx)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	2210      	movs	r2, #16
 8005efe:	4013      	ands	r3, r2
 8005f00:	3b10      	subs	r3, #16
 8005f02:	425a      	negs	r2, r3
 8005f04:	4153      	adcs	r3, r2
 8005f06:	b2db      	uxtb	r3, r3
}
 8005f08:	0018      	movs	r0, r3
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	b002      	add	sp, #8
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <LL_APB1_GRP2_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_ForceReset(uint32_t Periphs)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8005f18:	4b04      	ldr	r3, [pc, #16]	; (8005f2c <LL_APB1_GRP2_ForceReset+0x1c>)
 8005f1a:	68d9      	ldr	r1, [r3, #12]
 8005f1c:	4b03      	ldr	r3, [pc, #12]	; (8005f2c <LL_APB1_GRP2_ForceReset+0x1c>)
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	60da      	str	r2, [r3, #12]
}
 8005f24:	46c0      	nop			; (mov r8, r8)
 8005f26:	46bd      	mov	sp, r7
 8005f28:	b002      	add	sp, #8
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	40021000 	.word	0x40021000

08005f30 <LL_APB1_GRP2_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_ReleaseReset(uint32_t Periphs)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8005f38:	4b05      	ldr	r3, [pc, #20]	; (8005f50 <LL_APB1_GRP2_ReleaseReset+0x20>)
 8005f3a:	68da      	ldr	r2, [r3, #12]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	43d9      	mvns	r1, r3
 8005f40:	4b03      	ldr	r3, [pc, #12]	; (8005f50 <LL_APB1_GRP2_ReleaseReset+0x20>)
 8005f42:	400a      	ands	r2, r1
 8005f44:	60da      	str	r2, [r3, #12]
}
 8005f46:	46c0      	nop			; (mov r8, r8)
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	b002      	add	sp, #8
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	46c0      	nop			; (mov r8, r8)
 8005f50:	40021000 	.word	0x40021000

08005f54 <LL_ADC_CommonDeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_ADC_CommonDeInit(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_COMMON_INSTANCE(ADCxy_COMMON));
  
  /* Force reset of ADC clock (core clock) */
  LL_APB1_GRP2_ForceReset(LL_APB1_GRP2_PERIPH_ADC1);
 8005f5c:	2380      	movs	r3, #128	; 0x80
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	0018      	movs	r0, r3
 8005f62:	f7ff ffd5 	bl	8005f10 <LL_APB1_GRP2_ForceReset>
  
  /* Release reset of ADC clock (core clock) */
  LL_APB1_GRP2_ReleaseReset(LL_APB1_GRP2_PERIPH_ADC1);
 8005f66:	2380      	movs	r3, #128	; 0x80
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	0018      	movs	r0, r3
 8005f6c:	f7ff ffe0 	bl	8005f30 <LL_APB1_GRP2_ReleaseReset>
  
  return SUCCESS;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	0018      	movs	r0, r3
 8005f74:	46bd      	mov	sp, r7
 8005f76:	b002      	add	sp, #8
 8005f78:	bd80      	pop	{r7, pc}
	...

08005f7c <LL_ADC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are de-initialized
  *          - ERROR: ADC registers are not de-initialized
  */
ErrorStatus LL_ADC_DeInit(ADC_TypeDef *ADCx)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8005f84:	230f      	movs	r3, #15
 8005f86:	18fb      	adds	r3, r7, r3
 8005f88:	2200      	movs	r2, #0
 8005f8a:	701a      	strb	r2, [r3, #0]
  
  __IO uint32_t timeout_cpu_cycles = 0U;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(ADCx));
  
  /* Disable ADC instance if not already disabled.                            */
  if(LL_ADC_IsEnabled(ADCx) == 1U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	0018      	movs	r0, r3
 8005f94:	f7ff ff6a 	bl	8005e6c <LL_ADC_IsEnabled>
 8005f98:	0003      	movs	r3, r0
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d148      	bne.n	8006030 <LL_ADC_DeInit+0xb4>
  {
    /* Set ADC group regular trigger source to SW start to ensure to not      */
    /* have an external trigger event occurring during the conversion stop    */
    /* ADC disable process.                                                   */
    LL_ADC_REG_SetTriggerSource(ADCx, LL_ADC_REG_TRIG_SOFTWARE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	0018      	movs	r0, r3
 8005fa4:	f7ff ff3c 	bl	8005e20 <LL_ADC_REG_SetTriggerSource>
    
    /* Stop potential ADC conversion on going on ADC group regular.           */
    if(LL_ADC_REG_IsConversionOngoing(ADCx) != 0U)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	0018      	movs	r0, r3
 8005fac:	f7ff ff90 	bl	8005ed0 <LL_ADC_REG_IsConversionOngoing>
 8005fb0:	1e03      	subs	r3, r0, #0
 8005fb2:	d009      	beq.n	8005fc8 <LL_ADC_DeInit+0x4c>
    {
      if(LL_ADC_REG_IsStopConversionOngoing(ADCx) == 0U)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	0018      	movs	r0, r3
 8005fb8:	f7ff ff9a 	bl	8005ef0 <LL_ADC_REG_IsStopConversionOngoing>
 8005fbc:	1e03      	subs	r3, r0, #0
 8005fbe:	d103      	bne.n	8005fc8 <LL_ADC_DeInit+0x4c>
      {
        LL_ADC_REG_StopConversion(ADCx);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	f7ff ff72 	bl	8005eac <LL_ADC_REG_StopConversion>
      }
    }
    
    /* Wait for ADC conversions are effectively stopped                       */
    timeout_cpu_cycles = ADC_TIMEOUT_STOP_CONVERSION_CPU_CYCLES;
 8005fc8:	2380      	movs	r3, #128	; 0x80
 8005fca:	021b      	lsls	r3, r3, #8
 8005fcc:	60bb      	str	r3, [r7, #8]
    while (LL_ADC_REG_IsStopConversionOngoing(ADCx) == 1U)
 8005fce:	e00c      	b.n	8005fea <LL_ADC_DeInit+0x6e>
    {
      if(timeout_cpu_cycles-- == 0U)
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	1e5a      	subs	r2, r3, #1
 8005fd4:	60ba      	str	r2, [r7, #8]
 8005fd6:	200f      	movs	r0, #15
 8005fd8:	183a      	adds	r2, r7, r0
 8005fda:	1839      	adds	r1, r7, r0
 8005fdc:	7809      	ldrb	r1, [r1, #0]
 8005fde:	7011      	strb	r1, [r2, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d102      	bne.n	8005fea <LL_ADC_DeInit+0x6e>
      {
        /* Time-out error */
        status = ERROR;
 8005fe4:	183b      	adds	r3, r7, r0
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	701a      	strb	r2, [r3, #0]
    while (LL_ADC_REG_IsStopConversionOngoing(ADCx) == 1U)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	0018      	movs	r0, r3
 8005fee:	f7ff ff7f 	bl	8005ef0 <LL_ADC_REG_IsStopConversionOngoing>
 8005ff2:	0003      	movs	r3, r0
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d0eb      	beq.n	8005fd0 <LL_ADC_DeInit+0x54>
      }
    }
    
    /* Disable the ADC instance */
    LL_ADC_Disable(ADCx);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	f7ff ff24 	bl	8005e48 <LL_ADC_Disable>
    
    /* Wait for ADC instance is effectively disabled */
    timeout_cpu_cycles = ADC_TIMEOUT_DISABLE_CPU_CYCLES;
 8006000:	2380      	movs	r3, #128	; 0x80
 8006002:	021b      	lsls	r3, r3, #8
 8006004:	60bb      	str	r3, [r7, #8]
    while (LL_ADC_IsDisableOngoing(ADCx) == 1U)
 8006006:	e00c      	b.n	8006022 <LL_ADC_DeInit+0xa6>
    {
      if(timeout_cpu_cycles-- == 0U)
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	1e5a      	subs	r2, r3, #1
 800600c:	60ba      	str	r2, [r7, #8]
 800600e:	200f      	movs	r0, #15
 8006010:	183a      	adds	r2, r7, r0
 8006012:	1839      	adds	r1, r7, r0
 8006014:	7809      	ldrb	r1, [r1, #0]
 8006016:	7011      	strb	r1, [r2, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d102      	bne.n	8006022 <LL_ADC_DeInit+0xa6>
      {
        /* Time-out error */
        status = ERROR;
 800601c:	183b      	adds	r3, r7, r0
 800601e:	2201      	movs	r2, #1
 8006020:	701a      	strb	r2, [r3, #0]
    while (LL_ADC_IsDisableOngoing(ADCx) == 1U)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	0018      	movs	r0, r3
 8006026:	f7ff ff31 	bl	8005e8c <LL_ADC_IsDisableOngoing>
 800602a:	0003      	movs	r3, r0
 800602c:	2b01      	cmp	r3, #1
 800602e:	d0eb      	beq.n	8006008 <LL_ADC_DeInit+0x8c>
      }
    }
  }
  
  /* Check whether ADC state is compliant with expected state */
  if(READ_BIT(ADCx->CR,
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	2217      	movs	r2, #23
 8006036:	4013      	ands	r3, r2
 8006038:	d12e      	bne.n	8006098 <LL_ADC_DeInit+0x11c>
             )
     == 0U)
  {
    /* ========== Reset ADC registers ========== */
    /* Reset register IER */
    CLEAR_BIT(ADCx->IER,
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	229f      	movs	r2, #159	; 0x9f
 8006040:	4393      	bics	r3, r2
 8006042:	001a      	movs	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	605a      	str	r2, [r3, #4]
               | LL_ADC_IT_EOSMP
               | LL_ADC_IT_AWD1 )
             );
    
    /* Reset register ISR */
    SET_BIT(ADCx->ISR,
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	229f      	movs	r2, #159	; 0x9f
 800604e:	431a      	orrs	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	601a      	str	r2, [r3, #0]
    /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
    /* "read-set": no direct reset applicable.                                */
    /* No action on register CR */
    
    /* Reset register CFGR1 */
    CLEAR_BIT(ADCx->CFGR1,
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	4a15      	ldr	r2, [pc, #84]	; (80060b0 <LL_ADC_DeInit+0x134>)
 800605a:	401a      	ands	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	60da      	str	r2, [r3, #12]
             );
    
    /* Reset register CFGR2 */
    /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
    /*       already done above.                                              */
    CLEAR_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	089a      	lsrs	r2, r3, #2
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	611a      	str	r2, [r3, #16]
    
    /* Reset register SMPR */
    CLEAR_BIT(ADCx->SMPR, ADC_SMPR_SMP);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	2207      	movs	r2, #7
 8006072:	4393      	bics	r3, r2
 8006074:	001a      	movs	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	615a      	str	r2, [r3, #20]

    /* Reset register TR */
    MODIFY_REG(ADCx->TR, ADC_TR_HT | ADC_TR_LT, ADC_TR_HT);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	4a0d      	ldr	r2, [pc, #52]	; (80060b4 <LL_ADC_DeInit+0x138>)
 8006080:	4013      	ands	r3, r2
 8006082:	4a0d      	ldr	r2, [pc, #52]	; (80060b8 <LL_ADC_DeInit+0x13c>)
 8006084:	431a      	orrs	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	621a      	str	r2, [r3, #32]
               | ADC_CHSELR_CHSEL11 | ADC_CHSELR_CHSEL10 | ADC_CHSELR_CHSEL9  | ADC_CHSELR_CHSEL8
               | ADC_CHSELR_CHSEL7  | ADC_CHSELR_CHSEL6  | ADC_CHSELR_CHSEL5  | ADC_CHSELR_CHSEL4
               | ADC_CHSELR_CHSEL3  | ADC_CHSELR_CHSEL2  | ADC_CHSELR_CHSEL1  | ADC_CHSELR_CHSEL0 )
             );
#else
    CLEAR_BIT(ADCx->CHSELR,
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608e:	0c9b      	lsrs	r3, r3, #18
 8006090:	049a      	lsls	r2, r3, #18
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	629a      	str	r2, [r3, #40]	; 0x28
 8006096:	e003      	b.n	80060a0 <LL_ADC_DeInit+0x124>
    /* Need to performing a hard reset of ADC instance, using high level      */
    /* clock source RCC ADC reset.                                            */
    /* Caution: On this STM32 serie, if several ADC instances are available   */
    /*          on the selected device, RCC ADC reset will reset              */
    /*          all ADC instances belonging to the common ADC instance.       */
    status = ERROR;
 8006098:	230f      	movs	r3, #15
 800609a:	18fb      	adds	r3, r7, r3
 800609c:	2201      	movs	r2, #1
 800609e:	701a      	strb	r2, [r3, #0]
  }
  
  return status;
 80060a0:	230f      	movs	r3, #15
 80060a2:	18fb      	adds	r3, r7, r3
 80060a4:	781b      	ldrb	r3, [r3, #0]
}
 80060a6:	0018      	movs	r0, r3
 80060a8:	46bd      	mov	sp, r7
 80060aa:	b004      	add	sp, #16
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	46c0      	nop			; (mov r8, r8)
 80060b0:	833e0200 	.word	0x833e0200
 80060b4:	f000f000 	.word	0xf000f000
 80060b8:	0fff0000 	.word	0x0fff0000

080060bc <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80060c6:	230f      	movs	r3, #15
 80060c8:	18fb      	adds	r3, r7, r3
 80060ca:	2200      	movs	r2, #0
 80060cc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	0018      	movs	r0, r3
 80060d2:	f7ff fecb 	bl	8005e6c <LL_ADC_IsEnabled>
 80060d6:	1e03      	subs	r3, r0, #0
 80060d8:	d118      	bne.n	800610c <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	4a11      	ldr	r2, [pc, #68]	; (8006124 <LL_ADC_Init+0x68>)
 80060e0:	401a      	ands	r2, r3
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	6859      	ldr	r1, [r3, #4]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	4319      	orrs	r1, r3
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	430b      	orrs	r3, r1
 80060f2:	431a      	orrs	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	60da      	str	r2, [r3, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );

    MODIFY_REG(ADCx->CFGR2,
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	089a      	lsrs	r2, r3, #2
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	431a      	orrs	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	611a      	str	r2, [r3, #16]
 800610a:	e003      	b.n	8006114 <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800610c:	230f      	movs	r3, #15
 800610e:	18fb      	adds	r3, r7, r3
 8006110:	2201      	movs	r2, #1
 8006112:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8006114:	230f      	movs	r3, #15
 8006116:	18fb      	adds	r3, r7, r3
 8006118:	781b      	ldrb	r3, [r3, #0]
}
 800611a:	0018      	movs	r0, r3
 800611c:	46bd      	mov	sp, r7
 800611e:	b004      	add	sp, #16
 8006120:	bd80      	pop	{r7, pc}
 8006122:	46c0      	nop			; (mov r8, r8)
 8006124:	ffff3fc7 	.word	0xffff3fc7

08006128 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8006132:	230f      	movs	r3, #15
 8006134:	18fb      	adds	r3, r7, r3
 8006136:	2200      	movs	r2, #0
 8006138:	701a      	strb	r2, [r3, #0]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	0018      	movs	r0, r3
 800613e:	f7ff fe95 	bl	8005e6c <LL_ADC_IsEnabled>
 8006142:	1e03      	subs	r3, r0, #0
 8006144:	d115      	bne.n	8006172 <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	4a0f      	ldr	r2, [pc, #60]	; (8006188 <LL_ADC_REG_Init+0x60>)
 800614c:	401a      	ands	r2, r3
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	6819      	ldr	r1, [r3, #0]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	4319      	orrs	r1, r3
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	4319      	orrs	r1, r3
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	4319      	orrs	r1, r3
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	430b      	orrs	r3, r1
 800616a:	431a      	orrs	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	60da      	str	r2, [r3, #12]
 8006170:	e003      	b.n	800617a <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8006172:	230f      	movs	r3, #15
 8006174:	18fb      	adds	r3, r7, r3
 8006176:	2201      	movs	r2, #1
 8006178:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800617a:	230f      	movs	r3, #15
 800617c:	18fb      	adds	r3, r7, r3
 800617e:	781b      	ldrb	r3, [r3, #0]
}
 8006180:	0018      	movs	r0, r3
 8006182:	46bd      	mov	sp, r7
 8006184:	b004      	add	sp, #16
 8006186:	bd80      	pop	{r7, pc}
 8006188:	fffec23c 	.word	0xfffec23c

0800618c <LL_DMA_ConfigTransfer>:
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	3b01      	subs	r3, #1
 800619c:	4a0b      	ldr	r2, [pc, #44]	; (80061cc <LL_DMA_ConfigTransfer+0x40>)
 800619e:	5cd3      	ldrb	r3, [r2, r3]
 80061a0:	001a      	movs	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	18d3      	adds	r3, r2, r3
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a09      	ldr	r2, [pc, #36]	; (80061d0 <LL_DMA_ConfigTransfer+0x44>)
 80061aa:	4013      	ands	r3, r2
 80061ac:	0019      	movs	r1, r3
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	3b01      	subs	r3, #1
 80061b2:	4a06      	ldr	r2, [pc, #24]	; (80061cc <LL_DMA_ConfigTransfer+0x40>)
 80061b4:	5cd3      	ldrb	r3, [r2, r3]
 80061b6:	001a      	movs	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	18d3      	adds	r3, r2, r3
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	430a      	orrs	r2, r1
 80061c0:	601a      	str	r2, [r3, #0]
}
 80061c2:	46c0      	nop			; (mov r8, r8)
 80061c4:	46bd      	mov	sp, r7
 80061c6:	b004      	add	sp, #16
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	46c0      	nop			; (mov r8, r8)
 80061cc:	080074a8 	.word	0x080074a8
 80061d0:	ffff800f 	.word	0xffff800f

080061d4 <LL_DMA_SetDataLength>:
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	3b01      	subs	r3, #1
 80061e4:	4a0a      	ldr	r2, [pc, #40]	; (8006210 <LL_DMA_SetDataLength+0x3c>)
 80061e6:	5cd3      	ldrb	r3, [r2, r3]
 80061e8:	001a      	movs	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	18d3      	adds	r3, r2, r3
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	0c1b      	lsrs	r3, r3, #16
 80061f2:	0419      	lsls	r1, r3, #16
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	3b01      	subs	r3, #1
 80061f8:	4a05      	ldr	r2, [pc, #20]	; (8006210 <LL_DMA_SetDataLength+0x3c>)
 80061fa:	5cd3      	ldrb	r3, [r2, r3]
 80061fc:	001a      	movs	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	18d3      	adds	r3, r2, r3
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	430a      	orrs	r2, r1
 8006206:	605a      	str	r2, [r3, #4]
}
 8006208:	46c0      	nop			; (mov r8, r8)
 800620a:	46bd      	mov	sp, r7
 800620c:	b004      	add	sp, #16
 800620e:	bd80      	pop	{r7, pc}
 8006210:	080074a8 	.word	0x080074a8

08006214 <LL_DMA_SetMemoryAddress>:
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	3b01      	subs	r3, #1
 8006224:	4a05      	ldr	r2, [pc, #20]	; (800623c <LL_DMA_SetMemoryAddress+0x28>)
 8006226:	5cd3      	ldrb	r3, [r2, r3]
 8006228:	001a      	movs	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	18d3      	adds	r3, r2, r3
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	60da      	str	r2, [r3, #12]
}
 8006232:	46c0      	nop			; (mov r8, r8)
 8006234:	46bd      	mov	sp, r7
 8006236:	b004      	add	sp, #16
 8006238:	bd80      	pop	{r7, pc}
 800623a:	46c0      	nop			; (mov r8, r8)
 800623c:	080074a8 	.word	0x080074a8

08006240 <LL_DMA_SetPeriphAddress>:
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	3b01      	subs	r3, #1
 8006250:	4a05      	ldr	r2, [pc, #20]	; (8006268 <LL_DMA_SetPeriphAddress+0x28>)
 8006252:	5cd3      	ldrb	r3, [r2, r3]
 8006254:	001a      	movs	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	18d3      	adds	r3, r2, r3
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	609a      	str	r2, [r3, #8]
}
 800625e:	46c0      	nop			; (mov r8, r8)
 8006260:	46bd      	mov	sp, r7
 8006262:	b004      	add	sp, #16
 8006264:	bd80      	pop	{r7, pc}
 8006266:	46c0      	nop			; (mov r8, r8)
 8006268:	080074a8 	.word	0x080074a8

0800626c <LL_DMA_ClearFlag_GI1>:
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF1);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	605a      	str	r2, [r3, #4]
}
 800627a:	46c0      	nop			; (mov r8, r8)
 800627c:	46bd      	mov	sp, r7
 800627e:	b002      	add	sp, #8
 8006280:	bd80      	pop	{r7, pc}

08006282 <LL_DMA_ClearFlag_GI2>:
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b082      	sub	sp, #8
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF2);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2210      	movs	r2, #16
 800628e:	605a      	str	r2, [r3, #4]
}
 8006290:	46c0      	nop			; (mov r8, r8)
 8006292:	46bd      	mov	sp, r7
 8006294:	b002      	add	sp, #8
 8006296:	bd80      	pop	{r7, pc}

08006298 <LL_DMA_ClearFlag_GI3>:
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2280      	movs	r2, #128	; 0x80
 80062a4:	0052      	lsls	r2, r2, #1
 80062a6:	605a      	str	r2, [r3, #4]
}
 80062a8:	46c0      	nop			; (mov r8, r8)
 80062aa:	46bd      	mov	sp, r7
 80062ac:	b002      	add	sp, #8
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <LL_DMA_ClearFlag_GI4>:
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF4);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2280      	movs	r2, #128	; 0x80
 80062bc:	0152      	lsls	r2, r2, #5
 80062be:	605a      	str	r2, [r3, #4]
}
 80062c0:	46c0      	nop			; (mov r8, r8)
 80062c2:	46bd      	mov	sp, r7
 80062c4:	b002      	add	sp, #8
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <LL_DMA_ClearFlag_GI5>:
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF5);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2280      	movs	r2, #128	; 0x80
 80062d4:	0252      	lsls	r2, r2, #9
 80062d6:	605a      	str	r2, [r3, #4]
}
 80062d8:	46c0      	nop			; (mov r8, r8)
 80062da:	46bd      	mov	sp, r7
 80062dc:	b002      	add	sp, #8
 80062de:	bd80      	pop	{r7, pc}

080062e0 <LL_DMA_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are de-initialized
  *          - ERROR: DMA registers are not de-initialized
  */
uint32_t LL_DMA_DeInit(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  DMA_Channel_TypeDef *tmp = (DMA_Channel_TypeDef *)DMA1_Channel1;
 80062ea:	4b3a      	ldr	r3, [pc, #232]	; (80063d4 <LL_DMA_DeInit+0xf4>)
 80062ec:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = SUCCESS;
 80062ee:	230f      	movs	r3, #15
 80062f0:	18fb      	adds	r3, r7, r3
 80062f2:	2200      	movs	r2, #0
 80062f4:	701a      	strb	r2, [r3, #0]

  /* Check the DMA Instance DMAx and Channel parameters*/
  assert_param(IS_LL_DMA_ALL_CHANNEL_INSTANCE(DMAx, Channel));

    tmp = (DMA_Channel_TypeDef *)(__LL_DMA_GET_CHANNEL_INSTANCE(DMAx, Channel));
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a37      	ldr	r2, [pc, #220]	; (80063d8 <LL_DMA_DeInit+0xf8>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d102      	bne.n	8006304 <LL_DMA_DeInit+0x24>
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d01e      	beq.n	8006342 <LL_DMA_DeInit+0x62>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a34      	ldr	r2, [pc, #208]	; (80063d8 <LL_DMA_DeInit+0xf8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d102      	bne.n	8006312 <LL_DMA_DeInit+0x32>
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	2b02      	cmp	r3, #2
 8006310:	d014      	beq.n	800633c <LL_DMA_DeInit+0x5c>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a30      	ldr	r2, [pc, #192]	; (80063d8 <LL_DMA_DeInit+0xf8>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d102      	bne.n	8006320 <LL_DMA_DeInit+0x40>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b03      	cmp	r3, #3
 800631e:	d00a      	beq.n	8006336 <LL_DMA_DeInit+0x56>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a2d      	ldr	r2, [pc, #180]	; (80063d8 <LL_DMA_DeInit+0xf8>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d104      	bne.n	8006332 <LL_DMA_DeInit+0x52>
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	2b04      	cmp	r3, #4
 800632c:	d101      	bne.n	8006332 <LL_DMA_DeInit+0x52>
 800632e:	4b2b      	ldr	r3, [pc, #172]	; (80063dc <LL_DMA_DeInit+0xfc>)
 8006330:	e003      	b.n	800633a <LL_DMA_DeInit+0x5a>
 8006332:	4b2b      	ldr	r3, [pc, #172]	; (80063e0 <LL_DMA_DeInit+0x100>)
 8006334:	e001      	b.n	800633a <LL_DMA_DeInit+0x5a>
 8006336:	4b2b      	ldr	r3, [pc, #172]	; (80063e4 <LL_DMA_DeInit+0x104>)
 8006338:	e002      	b.n	8006340 <LL_DMA_DeInit+0x60>
 800633a:	e001      	b.n	8006340 <LL_DMA_DeInit+0x60>
 800633c:	4b2a      	ldr	r3, [pc, #168]	; (80063e8 <LL_DMA_DeInit+0x108>)
 800633e:	e001      	b.n	8006344 <LL_DMA_DeInit+0x64>
 8006340:	e000      	b.n	8006344 <LL_DMA_DeInit+0x64>
 8006342:	4b24      	ldr	r3, [pc, #144]	; (80063d4 <LL_DMA_DeInit+0xf4>)
 8006344:	60bb      	str	r3, [r7, #8]

    /* Disable the selected DMAx_Channely */
    CLEAR_BIT(tmp->CCR, DMA_CCR_EN);
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2201      	movs	r2, #1
 800634c:	4393      	bics	r3, r2
 800634e:	001a      	movs	r2, r3
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	601a      	str	r2, [r3, #0]

    /* Reset DMAx_Channely control register */
    LL_DMA_WriteReg(tmp, CCR, 0U);
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	2200      	movs	r2, #0
 8006358:	601a      	str	r2, [r3, #0]

    /* Reset DMAx_Channely remaining bytes register */
    LL_DMA_WriteReg(tmp, CNDTR, 0U);
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2200      	movs	r2, #0
 800635e:	605a      	str	r2, [r3, #4]

    /* Reset DMAx_Channely peripheral address register */
    LL_DMA_WriteReg(tmp, CPAR, 0U);
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	2200      	movs	r2, #0
 8006364:	609a      	str	r2, [r3, #8]

    /* Reset DMAx_Channely memory address register */
    LL_DMA_WriteReg(tmp, CMAR, 0U);
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	2200      	movs	r2, #0
 800636a:	60da      	str	r2, [r3, #12]
#if (defined(DMA1_CSELR_DEFAULT)||defined(DMA2_CSELR_DEFAULT))
    /* Reset Request register field for DMAx Channel */
    LL_DMA_SetPeriphRequest(DMAx, Channel, LL_DMA_REQUEST_0);
#endif

    if (Channel == LL_DMA_CHANNEL_1)
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d104      	bne.n	800637c <LL_DMA_DeInit+0x9c>
    {
      /* Reset interrupt pending bits for DMAx Channel1 */
      LL_DMA_ClearFlag_GI1(DMAx);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	0018      	movs	r0, r3
 8006376:	f7ff ff79 	bl	800626c <LL_DMA_ClearFlag_GI1>
 800637a:	e023      	b.n	80063c4 <LL_DMA_DeInit+0xe4>
    }
    else if (Channel == LL_DMA_CHANNEL_2)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2b02      	cmp	r3, #2
 8006380:	d104      	bne.n	800638c <LL_DMA_DeInit+0xac>
    {
      /* Reset interrupt pending bits for DMAx Channel2 */
      LL_DMA_ClearFlag_GI2(DMAx);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	0018      	movs	r0, r3
 8006386:	f7ff ff7c 	bl	8006282 <LL_DMA_ClearFlag_GI2>
 800638a:	e01b      	b.n	80063c4 <LL_DMA_DeInit+0xe4>
    }
    else if (Channel == LL_DMA_CHANNEL_3)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2b03      	cmp	r3, #3
 8006390:	d104      	bne.n	800639c <LL_DMA_DeInit+0xbc>
    {
      /* Reset interrupt pending bits for DMAx Channel3 */
      LL_DMA_ClearFlag_GI3(DMAx);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	0018      	movs	r0, r3
 8006396:	f7ff ff7f 	bl	8006298 <LL_DMA_ClearFlag_GI3>
 800639a:	e013      	b.n	80063c4 <LL_DMA_DeInit+0xe4>
    }
    else if (Channel == LL_DMA_CHANNEL_4)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d104      	bne.n	80063ac <LL_DMA_DeInit+0xcc>
    {
      /* Reset interrupt pending bits for DMAx Channel4 */
      LL_DMA_ClearFlag_GI4(DMAx);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	0018      	movs	r0, r3
 80063a6:	f7ff ff83 	bl	80062b0 <LL_DMA_ClearFlag_GI4>
 80063aa:	e00b      	b.n	80063c4 <LL_DMA_DeInit+0xe4>
    }
    else if (Channel == LL_DMA_CHANNEL_5)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2b05      	cmp	r3, #5
 80063b0:	d104      	bne.n	80063bc <LL_DMA_DeInit+0xdc>
    {
      /* Reset interrupt pending bits for DMAx Channel5 */
      LL_DMA_ClearFlag_GI5(DMAx);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	0018      	movs	r0, r3
 80063b6:	f7ff ff87 	bl	80062c8 <LL_DMA_ClearFlag_GI5>
 80063ba:	e003      	b.n	80063c4 <LL_DMA_DeInit+0xe4>
      LL_DMA_ClearFlag_GI7(DMAx);
    }
#endif
    else
    {
      status = ERROR;
 80063bc:	230f      	movs	r3, #15
 80063be:	18fb      	adds	r3, r7, r3
 80063c0:	2201      	movs	r2, #1
 80063c2:	701a      	strb	r2, [r3, #0]
    }

  return status;
 80063c4:	230f      	movs	r3, #15
 80063c6:	18fb      	adds	r3, r7, r3
 80063c8:	781b      	ldrb	r3, [r3, #0]
}
 80063ca:	0018      	movs	r0, r3
 80063cc:	46bd      	mov	sp, r7
 80063ce:	b004      	add	sp, #16
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	46c0      	nop			; (mov r8, r8)
 80063d4:	40020008 	.word	0x40020008
 80063d8:	40020000 	.word	0x40020000
 80063dc:	40020044 	.word	0x40020044
 80063e0:	40020058 	.word	0x40020058
 80063e4:	40020030 	.word	0x40020030
 80063e8:	4002001c 	.word	0x4002001c

080063ec <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8006400:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 8006406:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800640c:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 8006412:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 8006418:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800641e:	431a      	orrs	r2, r3
 8006420:	68b9      	ldr	r1, [r7, #8]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	0018      	movs	r0, r3
 8006426:	f7ff feb1 	bl	800618c <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	68b9      	ldr	r1, [r7, #8]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	0018      	movs	r0, r3
 8006434:	f7ff feee 	bl	8006214 <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	68b9      	ldr	r1, [r7, #8]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	0018      	movs	r0, r3
 8006442:	f7ff fefd 	bl	8006240 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1a      	ldr	r2, [r3, #32]
 800644a:	68b9      	ldr	r1, [r7, #8]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	0018      	movs	r0, r3
 8006450:	f7ff fec0 	bl	80061d4 <LL_DMA_SetDataLength>
   * - PeriphRequest: DMA_CSELR[31:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
#endif

  return SUCCESS;
 8006454:	2300      	movs	r3, #0
}
 8006456:	0018      	movs	r0, r3
 8006458:	46bd      	mov	sp, r7
 800645a:	b004      	add	sp, #16
 800645c:	bd80      	pop	{r7, pc}

0800645e <LL_GPIO_SetPinMode>:
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	60f8      	str	r0, [r7, #12]
 8006466:	60b9      	str	r1, [r7, #8]
 8006468:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6819      	ldr	r1, [r3, #0]
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	435b      	muls	r3, r3
 8006472:	001a      	movs	r2, r3
 8006474:	0013      	movs	r3, r2
 8006476:	005b      	lsls	r3, r3, #1
 8006478:	189b      	adds	r3, r3, r2
 800647a:	43db      	mvns	r3, r3
 800647c:	400b      	ands	r3, r1
 800647e:	001a      	movs	r2, r3
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	435b      	muls	r3, r3
 8006484:	6879      	ldr	r1, [r7, #4]
 8006486:	434b      	muls	r3, r1
 8006488:	431a      	orrs	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	601a      	str	r2, [r3, #0]
}
 800648e:	46c0      	nop			; (mov r8, r8)
 8006490:	46bd      	mov	sp, r7
 8006492:	b004      	add	sp, #16
 8006494:	bd80      	pop	{r7, pc}

08006496 <LL_GPIO_SetPinOutputType>:
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b084      	sub	sp, #16
 800649a:	af00      	add	r7, sp, #0
 800649c:	60f8      	str	r0, [r7, #12]
 800649e:	60b9      	str	r1, [r7, #8]
 80064a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	43d2      	mvns	r2, r2
 80064aa:	401a      	ands	r2, r3
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	6879      	ldr	r1, [r7, #4]
 80064b0:	434b      	muls	r3, r1
 80064b2:	431a      	orrs	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	605a      	str	r2, [r3, #4]
}
 80064b8:	46c0      	nop			; (mov r8, r8)
 80064ba:	46bd      	mov	sp, r7
 80064bc:	b004      	add	sp, #16
 80064be:	bd80      	pop	{r7, pc}

080064c0 <LL_GPIO_SetPinSpeed>:
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6899      	ldr	r1, [r3, #8]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	435b      	muls	r3, r3
 80064d4:	001a      	movs	r2, r3
 80064d6:	0013      	movs	r3, r2
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	189b      	adds	r3, r3, r2
 80064dc:	43db      	mvns	r3, r3
 80064de:	400b      	ands	r3, r1
 80064e0:	001a      	movs	r2, r3
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	435b      	muls	r3, r3
 80064e6:	6879      	ldr	r1, [r7, #4]
 80064e8:	434b      	muls	r3, r1
 80064ea:	431a      	orrs	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	609a      	str	r2, [r3, #8]
}
 80064f0:	46c0      	nop			; (mov r8, r8)
 80064f2:	46bd      	mov	sp, r7
 80064f4:	b004      	add	sp, #16
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <LL_GPIO_SetPinPull>:
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	68d9      	ldr	r1, [r3, #12]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	435b      	muls	r3, r3
 800650c:	001a      	movs	r2, r3
 800650e:	0013      	movs	r3, r2
 8006510:	005b      	lsls	r3, r3, #1
 8006512:	189b      	adds	r3, r3, r2
 8006514:	43db      	mvns	r3, r3
 8006516:	400b      	ands	r3, r1
 8006518:	001a      	movs	r2, r3
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	435b      	muls	r3, r3
 800651e:	6879      	ldr	r1, [r7, #4]
 8006520:	434b      	muls	r3, r1
 8006522:	431a      	orrs	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	60da      	str	r2, [r3, #12]
}
 8006528:	46c0      	nop			; (mov r8, r8)
 800652a:	46bd      	mov	sp, r7
 800652c:	b004      	add	sp, #16
 800652e:	bd80      	pop	{r7, pc}

08006530 <LL_GPIO_SetAFPin_0_7>:
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6a19      	ldr	r1, [r3, #32]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	435b      	muls	r3, r3
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	4353      	muls	r3, r2
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	435a      	muls	r2, r3
 800654c:	0013      	movs	r3, r2
 800654e:	011b      	lsls	r3, r3, #4
 8006550:	1a9b      	subs	r3, r3, r2
 8006552:	43db      	mvns	r3, r3
 8006554:	400b      	ands	r3, r1
 8006556:	001a      	movs	r2, r3
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	435b      	muls	r3, r3
 800655c:	68b9      	ldr	r1, [r7, #8]
 800655e:	434b      	muls	r3, r1
 8006560:	68b9      	ldr	r1, [r7, #8]
 8006562:	434b      	muls	r3, r1
 8006564:	6879      	ldr	r1, [r7, #4]
 8006566:	434b      	muls	r3, r1
 8006568:	431a      	orrs	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	621a      	str	r2, [r3, #32]
}
 800656e:	46c0      	nop			; (mov r8, r8)
 8006570:	46bd      	mov	sp, r7
 8006572:	b004      	add	sp, #16
 8006574:	bd80      	pop	{r7, pc}

08006576 <LL_GPIO_SetAFPin_8_15>:
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b084      	sub	sp, #16
 800657a:	af00      	add	r7, sp, #0
 800657c:	60f8      	str	r0, [r7, #12]
 800657e:	60b9      	str	r1, [r7, #8]
 8006580:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	0a1b      	lsrs	r3, r3, #8
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	0a12      	lsrs	r2, r2, #8
 800658e:	4353      	muls	r3, r2
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	0a12      	lsrs	r2, r2, #8
 8006594:	4353      	muls	r3, r2
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	0a12      	lsrs	r2, r2, #8
 800659a:	435a      	muls	r2, r3
 800659c:	0013      	movs	r3, r2
 800659e:	011b      	lsls	r3, r3, #4
 80065a0:	1a9b      	subs	r3, r3, r2
 80065a2:	43db      	mvns	r3, r3
 80065a4:	400b      	ands	r3, r1
 80065a6:	001a      	movs	r2, r3
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	0a1b      	lsrs	r3, r3, #8
 80065ac:	68b9      	ldr	r1, [r7, #8]
 80065ae:	0a09      	lsrs	r1, r1, #8
 80065b0:	434b      	muls	r3, r1
 80065b2:	68b9      	ldr	r1, [r7, #8]
 80065b4:	0a09      	lsrs	r1, r1, #8
 80065b6:	434b      	muls	r3, r1
 80065b8:	68b9      	ldr	r1, [r7, #8]
 80065ba:	0a09      	lsrs	r1, r1, #8
 80065bc:	434b      	muls	r3, r1
 80065be:	6879      	ldr	r1, [r7, #4]
 80065c0:	434b      	muls	r3, r1
 80065c2:	431a      	orrs	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80065c8:	46c0      	nop			; (mov r8, r8)
 80065ca:	46bd      	mov	sp, r7
 80065cc:	b004      	add	sp, #16
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 80065da:	2300      	movs	r3, #0
 80065dc:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80065de:	e048      	b.n	8006672 <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2101      	movs	r1, #1
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	4091      	lsls	r1, r2
 80065ea:	000a      	movs	r2, r1
 80065ec:	4013      	ands	r3, r2
 80065ee:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d03a      	beq.n	800666c <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d003      	beq.n	8006606 <LL_GPIO_Init+0x36>
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	2b02      	cmp	r3, #2
 8006604:	d10e      	bne.n	8006624 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	689a      	ldr	r2, [r3, #8]
 800660a:	68b9      	ldr	r1, [r7, #8]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	0018      	movs	r0, r3
 8006610:	f7ff ff56 	bl	80064c0 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	6819      	ldr	r1, [r3, #0]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	68da      	ldr	r2, [r3, #12]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	0018      	movs	r0, r3
 8006620:	f7ff ff39 	bl	8006496 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	691a      	ldr	r2, [r3, #16]
 8006628:	68b9      	ldr	r1, [r7, #8]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	0018      	movs	r0, r3
 800662e:	f7ff ff63 	bl	80064f8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	2b02      	cmp	r3, #2
 8006638:	d111      	bne.n	800665e <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2bff      	cmp	r3, #255	; 0xff
 800663e:	d807      	bhi.n	8006650 <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	695a      	ldr	r2, [r3, #20]
 8006644:	68b9      	ldr	r1, [r7, #8]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	0018      	movs	r0, r3
 800664a:	f7ff ff71 	bl	8006530 <LL_GPIO_SetAFPin_0_7>
 800664e:	e006      	b.n	800665e <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	695a      	ldr	r2, [r3, #20]
 8006654:	68b9      	ldr	r1, [r7, #8]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	0018      	movs	r0, r3
 800665a:	f7ff ff8c 	bl	8006576 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	685a      	ldr	r2, [r3, #4]
 8006662:	68b9      	ldr	r1, [r7, #8]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	0018      	movs	r0, r3
 8006668:	f7ff fef9 	bl	800645e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	3301      	adds	r3, #1
 8006670:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	40da      	lsrs	r2, r3
 800667a:	1e13      	subs	r3, r2, #0
 800667c:	d1b0      	bne.n	80065e0 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800667e:	2300      	movs	r3, #0
}
 8006680:	0018      	movs	r0, r3
 8006682:	46bd      	mov	sp, r7
 8006684:	b004      	add	sp, #16
 8006686:	bd80      	pop	{r7, pc}

08006688 <LL_RCC_HSI_IsReady>:
{
 8006688:	b580      	push	{r7, lr}
 800668a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800668c:	4b05      	ldr	r3, [pc, #20]	; (80066a4 <LL_RCC_HSI_IsReady+0x1c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2202      	movs	r2, #2
 8006692:	4013      	ands	r3, r2
 8006694:	3b02      	subs	r3, #2
 8006696:	425a      	negs	r2, r3
 8006698:	4153      	adcs	r3, r2
 800669a:	b2db      	uxtb	r3, r3
}
 800669c:	0018      	movs	r0, r3
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	46c0      	nop			; (mov r8, r8)
 80066a4:	40021000 	.word	0x40021000

080066a8 <LL_RCC_LSE_IsReady>:
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80066ac:	4b05      	ldr	r3, [pc, #20]	; (80066c4 <LL_RCC_LSE_IsReady+0x1c>)
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	2202      	movs	r2, #2
 80066b2:	4013      	ands	r3, r2
 80066b4:	3b02      	subs	r3, #2
 80066b6:	425a      	negs	r2, r3
 80066b8:	4153      	adcs	r3, r2
 80066ba:	b2db      	uxtb	r3, r3
}
 80066bc:	0018      	movs	r0, r3
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	46c0      	nop			; (mov r8, r8)
 80066c4:	40021000 	.word	0x40021000

080066c8 <LL_RCC_GetSysClkSource>:
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80066cc:	4b03      	ldr	r3, [pc, #12]	; (80066dc <LL_RCC_GetSysClkSource+0x14>)
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	220c      	movs	r2, #12
 80066d2:	4013      	ands	r3, r2
}
 80066d4:	0018      	movs	r0, r3
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	46c0      	nop			; (mov r8, r8)
 80066dc:	40021000 	.word	0x40021000

080066e0 <LL_RCC_GetAHBPrescaler>:
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80066e4:	4b03      	ldr	r3, [pc, #12]	; (80066f4 <LL_RCC_GetAHBPrescaler+0x14>)
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	22f0      	movs	r2, #240	; 0xf0
 80066ea:	4013      	ands	r3, r2
}
 80066ec:	0018      	movs	r0, r3
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	46c0      	nop			; (mov r8, r8)
 80066f4:	40021000 	.word	0x40021000

080066f8 <LL_RCC_GetAPB1Prescaler>:
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80066fc:	4b03      	ldr	r3, [pc, #12]	; (800670c <LL_RCC_GetAPB1Prescaler+0x14>)
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	23e0      	movs	r3, #224	; 0xe0
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	4013      	ands	r3, r2
}
 8006706:	0018      	movs	r0, r3
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	40021000 	.word	0x40021000

08006710 <LL_RCC_GetUSARTClockSource>:
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8006718:	4b06      	ldr	r3, [pc, #24]	; (8006734 <LL_RCC_GetUSARTClockSource+0x24>)
 800671a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671c:	2103      	movs	r1, #3
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	4091      	lsls	r1, r2
 8006722:	000a      	movs	r2, r1
 8006724:	401a      	ands	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	061b      	lsls	r3, r3, #24
 800672a:	4313      	orrs	r3, r2
}
 800672c:	0018      	movs	r0, r3
 800672e:	46bd      	mov	sp, r7
 8006730:	b002      	add	sp, #8
 8006732:	bd80      	pop	{r7, pc}
 8006734:	40021000 	.word	0x40021000

08006738 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800673c:	4b03      	ldr	r3, [pc, #12]	; (800674c <LL_RCC_PLL_GetMainSource+0x14>)
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	2380      	movs	r3, #128	; 0x80
 8006742:	025b      	lsls	r3, r3, #9
 8006744:	4013      	ands	r3, r2
}
 8006746:	0018      	movs	r0, r3
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	40021000 	.word	0x40021000

08006750 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8006754:	4b03      	ldr	r3, [pc, #12]	; (8006764 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	23f0      	movs	r3, #240	; 0xf0
 800675a:	039b      	lsls	r3, r3, #14
 800675c:	4013      	ands	r3, r2
}
 800675e:	0018      	movs	r0, r3
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	40021000 	.word	0x40021000

08006768 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 800676c:	4b03      	ldr	r3, [pc, #12]	; (800677c <LL_RCC_PLL_GetPrediv+0x14>)
 800676e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006770:	220f      	movs	r2, #15
 8006772:	4013      	ands	r3, r2
}
 8006774:	0018      	movs	r0, r3
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	46c0      	nop			; (mov r8, r8)
 800677c:	40021000 	.word	0x40021000

08006780 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8006788:	2300      	movs	r3, #0
 800678a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d12d      	bne.n	80067ee <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	0018      	movs	r0, r3
 8006796:	f7ff ffbb 	bl	8006710 <LL_RCC_GetUSARTClockSource>
 800679a:	0003      	movs	r3, r0
 800679c:	2b03      	cmp	r3, #3
 800679e:	d00a      	beq.n	80067b6 <LL_RCC_GetUSARTClockFreq+0x36>
 80067a0:	d818      	bhi.n	80067d4 <LL_RCC_GetUSARTClockFreq+0x54>
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d002      	beq.n	80067ac <LL_RCC_GetUSARTClockFreq+0x2c>
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d00c      	beq.n	80067c4 <LL_RCC_GetUSARTClockFreq+0x44>
 80067aa:	e013      	b.n	80067d4 <LL_RCC_GetUSARTClockFreq+0x54>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80067ac:	f000 f82c 	bl	8006808 <RCC_GetSystemClockFreq>
 80067b0:	0003      	movs	r3, r0
 80067b2:	60fb      	str	r3, [r7, #12]
        break;
 80067b4:	e020      	b.n	80067f8 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80067b6:	f7ff ff67 	bl	8006688 <LL_RCC_HSI_IsReady>
 80067ba:	1e03      	subs	r3, r0, #0
 80067bc:	d019      	beq.n	80067f2 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 80067be:	4b11      	ldr	r3, [pc, #68]	; (8006804 <LL_RCC_GetUSARTClockFreq+0x84>)
 80067c0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80067c2:	e016      	b.n	80067f2 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80067c4:	f7ff ff70 	bl	80066a8 <LL_RCC_LSE_IsReady>
 80067c8:	1e03      	subs	r3, r0, #0
 80067ca:	d014      	beq.n	80067f6 <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 80067cc:	2380      	movs	r3, #128	; 0x80
 80067ce:	021b      	lsls	r3, r3, #8
 80067d0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80067d2:	e010      	b.n	80067f6 <LL_RCC_GetUSARTClockFreq+0x76>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80067d4:	f000 f818 	bl	8006808 <RCC_GetSystemClockFreq>
 80067d8:	0003      	movs	r3, r0
 80067da:	0018      	movs	r0, r3
 80067dc:	f000 f83a 	bl	8006854 <RCC_GetHCLKClockFreq>
 80067e0:	0003      	movs	r3, r0
 80067e2:	0018      	movs	r0, r3
 80067e4:	f000 f84c 	bl	8006880 <RCC_GetPCLK1ClockFreq>
 80067e8:	0003      	movs	r3, r0
 80067ea:	60fb      	str	r3, [r7, #12]
        break;
 80067ec:	e004      	b.n	80067f8 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 80067ee:	46c0      	nop			; (mov r8, r8)
 80067f0:	e002      	b.n	80067f8 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 80067f2:	46c0      	nop			; (mov r8, r8)
 80067f4:	e000      	b.n	80067f8 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 80067f6:	46c0      	nop			; (mov r8, r8)
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 80067f8:	68fb      	ldr	r3, [r7, #12]
}
 80067fa:	0018      	movs	r0, r3
 80067fc:	46bd      	mov	sp, r7
 80067fe:	b004      	add	sp, #16
 8006800:	bd80      	pop	{r7, pc}
 8006802:	46c0      	nop			; (mov r8, r8)
 8006804:	007a1200 	.word	0x007a1200

08006808 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800680e:	2300      	movs	r3, #0
 8006810:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8006812:	f7ff ff59 	bl	80066c8 <LL_RCC_GetSysClkSource>
 8006816:	0003      	movs	r3, r0
 8006818:	2b08      	cmp	r3, #8
 800681a:	d00b      	beq.n	8006834 <RCC_GetSystemClockFreq+0x2c>
 800681c:	d80f      	bhi.n	800683e <RCC_GetSystemClockFreq+0x36>
 800681e:	2b00      	cmp	r3, #0
 8006820:	d002      	beq.n	8006828 <RCC_GetSystemClockFreq+0x20>
 8006822:	2b04      	cmp	r3, #4
 8006824:	d003      	beq.n	800682e <RCC_GetSystemClockFreq+0x26>
 8006826:	e00a      	b.n	800683e <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8006828:	4b09      	ldr	r3, [pc, #36]	; (8006850 <RCC_GetSystemClockFreq+0x48>)
 800682a:	607b      	str	r3, [r7, #4]
      break;
 800682c:	e00a      	b.n	8006844 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800682e:	4b08      	ldr	r3, [pc, #32]	; (8006850 <RCC_GetSystemClockFreq+0x48>)
 8006830:	607b      	str	r3, [r7, #4]
      break;
 8006832:	e007      	b.n	8006844 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8006834:	f000 f838 	bl	80068a8 <RCC_PLL_GetFreqDomain_SYS>
 8006838:	0003      	movs	r3, r0
 800683a:	607b      	str	r3, [r7, #4]
      break;
 800683c:	e002      	b.n	8006844 <RCC_GetSystemClockFreq+0x3c>
      frequency = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800683e:	4b04      	ldr	r3, [pc, #16]	; (8006850 <RCC_GetSystemClockFreq+0x48>)
 8006840:	607b      	str	r3, [r7, #4]
      break;
 8006842:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8006844:	687b      	ldr	r3, [r7, #4]
}
 8006846:	0018      	movs	r0, r3
 8006848:	46bd      	mov	sp, r7
 800684a:	b002      	add	sp, #8
 800684c:	bd80      	pop	{r7, pc}
 800684e:	46c0      	nop			; (mov r8, r8)
 8006850:	007a1200 	.word	0x007a1200

08006854 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800685c:	f7ff ff40 	bl	80066e0 <LL_RCC_GetAHBPrescaler>
 8006860:	0003      	movs	r3, r0
 8006862:	091b      	lsrs	r3, r3, #4
 8006864:	220f      	movs	r2, #15
 8006866:	4013      	ands	r3, r2
 8006868:	4a04      	ldr	r2, [pc, #16]	; (800687c <RCC_GetHCLKClockFreq+0x28>)
 800686a:	5cd3      	ldrb	r3, [r2, r3]
 800686c:	001a      	movs	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	40d3      	lsrs	r3, r2
}
 8006872:	0018      	movs	r0, r3
 8006874:	46bd      	mov	sp, r7
 8006876:	b002      	add	sp, #8
 8006878:	bd80      	pop	{r7, pc}
 800687a:	46c0      	nop			; (mov r8, r8)
 800687c:	08007490 	.word	0x08007490

08006880 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006888:	f7ff ff36 	bl	80066f8 <LL_RCC_GetAPB1Prescaler>
 800688c:	0003      	movs	r3, r0
 800688e:	0a1b      	lsrs	r3, r3, #8
 8006890:	4a04      	ldr	r2, [pc, #16]	; (80068a4 <RCC_GetPCLK1ClockFreq+0x24>)
 8006892:	5cd3      	ldrb	r3, [r2, r3]
 8006894:	001a      	movs	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	40d3      	lsrs	r3, r2
}
 800689a:	0018      	movs	r0, r3
 800689c:	46bd      	mov	sp, r7
 800689e:	b002      	add	sp, #8
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	46c0      	nop			; (mov r8, r8)
 80068a4:	080074a0 	.word	0x080074a0

080068a8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80068a8:	b590      	push	{r4, r7, lr}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	607b      	str	r3, [r7, #4]
 80068b2:	2300      	movs	r3, #0
 80068b4:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80068b6:	f7ff ff3f 	bl	8006738 <LL_RCC_PLL_GetMainSource>
 80068ba:	0003      	movs	r3, r0
 80068bc:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d005      	beq.n	80068d0 <RCC_PLL_GetFreqDomain_SYS+0x28>
 80068c4:	683a      	ldr	r2, [r7, #0]
 80068c6:	2380      	movs	r3, #128	; 0x80
 80068c8:	025b      	lsls	r3, r3, #9
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d003      	beq.n	80068d6 <RCC_PLL_GetFreqDomain_SYS+0x2e>
 80068ce:	e005      	b.n	80068dc <RCC_PLL_GetFreqDomain_SYS+0x34>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80068d0:	4b0f      	ldr	r3, [pc, #60]	; (8006910 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 80068d2:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80068d4:	e005      	b.n	80068e2 <RCC_PLL_GetFreqDomain_SYS+0x3a>
      pllinputfreq = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80068d6:	4b0f      	ldr	r3, [pc, #60]	; (8006914 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80068d8:	607b      	str	r3, [r7, #4]
      break;
 80068da:	e002      	b.n	80068e2 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 80068dc:	4b0c      	ldr	r3, [pc, #48]	; (8006910 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 80068de:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80068e0:	46c0      	nop			; (mov r8, r8)
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 80068e2:	f7ff ff41 	bl	8006768 <LL_RCC_PLL_GetPrediv>
 80068e6:	0003      	movs	r3, r0
 80068e8:	3301      	adds	r3, #1
 80068ea:	0019      	movs	r1, r3
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7f9 fc0b 	bl	8000108 <__udivsi3>
 80068f2:	0003      	movs	r3, r0
 80068f4:	001c      	movs	r4, r3
 80068f6:	f7ff ff2b 	bl	8006750 <LL_RCC_PLL_GetMultiplicator>
 80068fa:	0003      	movs	r3, r0
 80068fc:	0c9b      	lsrs	r3, r3, #18
 80068fe:	220f      	movs	r2, #15
 8006900:	4013      	ands	r3, r2
 8006902:	3302      	adds	r3, #2
 8006904:	4363      	muls	r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8006906:	0018      	movs	r0, r3
 8006908:	46bd      	mov	sp, r7
 800690a:	b003      	add	sp, #12
 800690c:	bd90      	pop	{r4, r7, pc}
 800690e:	46c0      	nop			; (mov r8, r8)
 8006910:	003d0900 	.word	0x003d0900
 8006914:	007a1200 	.word	0x007a1200

08006918 <LL_TIM_SetPrescaler>:
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	683a      	ldr	r2, [r7, #0]
 8006926:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006928:	46c0      	nop			; (mov r8, r8)
 800692a:	46bd      	mov	sp, r7
 800692c:	b002      	add	sp, #8
 800692e:	bd80      	pop	{r7, pc}

08006930 <LL_TIM_SetAutoReload>:
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	683a      	ldr	r2, [r7, #0]
 800693e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006940:	46c0      	nop			; (mov r8, r8)
 8006942:	46bd      	mov	sp, r7
 8006944:	b002      	add	sp, #8
 8006946:	bd80      	pop	{r7, pc}

08006948 <LL_TIM_SetRepetitionCounter>:
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006958:	46c0      	nop			; (mov r8, r8)
 800695a:	46bd      	mov	sp, r7
 800695c:	b002      	add	sp, #8
 800695e:	bd80      	pop	{r7, pc}

08006960 <LL_TIM_OC_SetCompareCH1>:
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006970:	46c0      	nop			; (mov r8, r8)
 8006972:	46bd      	mov	sp, r7
 8006974:	b002      	add	sp, #8
 8006976:	bd80      	pop	{r7, pc}

08006978 <LL_TIM_OC_SetCompareCH2>:
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006988:	46c0      	nop			; (mov r8, r8)
 800698a:	46bd      	mov	sp, r7
 800698c:	b002      	add	sp, #8
 800698e:	bd80      	pop	{r7, pc}

08006990 <LL_TIM_OC_SetCompareCH3>:
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80069a0:	46c0      	nop			; (mov r8, r8)
 80069a2:	46bd      	mov	sp, r7
 80069a4:	b002      	add	sp, #8
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <LL_TIM_OC_SetCompareCH4>:
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80069b8:	46c0      	nop			; (mov r8, r8)
 80069ba:	46bd      	mov	sp, r7
 80069bc:	b002      	add	sp, #8
 80069be:	bd80      	pop	{r7, pc}

080069c0 <LL_TIM_GenerateEvent_UPDATE>:
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	2201      	movs	r2, #1
 80069ce:	431a      	orrs	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	615a      	str	r2, [r3, #20]
}
 80069d4:	46c0      	nop			; (mov r8, r8)
 80069d6:	46bd      	mov	sp, r7
 80069d8:	b002      	add	sp, #8
 80069da:	bd80      	pop	{r7, pc}

080069dc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a2c      	ldr	r2, [pc, #176]	; (8006aa0 <LL_TIM_Init+0xc4>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d003      	beq.n	80069fc <LL_TIM_Init+0x20>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a2b      	ldr	r2, [pc, #172]	; (8006aa4 <LL_TIM_Init+0xc8>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d107      	bne.n	8006a0c <LL_TIM_Init+0x30>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2270      	movs	r2, #112	; 0x70
 8006a00:	4393      	bics	r3, r2
 8006a02:	001a      	movs	r2, r3
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a24      	ldr	r2, [pc, #144]	; (8006aa0 <LL_TIM_Init+0xc4>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d00f      	beq.n	8006a34 <LL_TIM_Init+0x58>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a23      	ldr	r2, [pc, #140]	; (8006aa4 <LL_TIM_Init+0xc8>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d00b      	beq.n	8006a34 <LL_TIM_Init+0x58>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a22      	ldr	r2, [pc, #136]	; (8006aa8 <LL_TIM_Init+0xcc>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d007      	beq.n	8006a34 <LL_TIM_Init+0x58>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a21      	ldr	r2, [pc, #132]	; (8006aac <LL_TIM_Init+0xd0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d003      	beq.n	8006a34 <LL_TIM_Init+0x58>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a20      	ldr	r2, [pc, #128]	; (8006ab0 <LL_TIM_Init+0xd4>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d106      	bne.n	8006a42 <LL_TIM_Init+0x66>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4a1f      	ldr	r2, [pc, #124]	; (8006ab4 <LL_TIM_Init+0xd8>)
 8006a38:	401a      	ands	r2, r3
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	689a      	ldr	r2, [r3, #8]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	0011      	movs	r1, r2
 8006a50:	0018      	movs	r0, r3
 8006a52:	f7ff ff6d 	bl	8006930 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	001a      	movs	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	0011      	movs	r1, r2
 8006a60:	0018      	movs	r0, r3
 8006a62:	f7ff ff59 	bl	8006918 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a0d      	ldr	r2, [pc, #52]	; (8006aa0 <LL_TIM_Init+0xc4>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d007      	beq.n	8006a7e <LL_TIM_Init+0xa2>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a0e      	ldr	r2, [pc, #56]	; (8006aac <LL_TIM_Init+0xd0>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d003      	beq.n	8006a7e <LL_TIM_Init+0xa2>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a0d      	ldr	r2, [pc, #52]	; (8006ab0 <LL_TIM_Init+0xd4>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d106      	bne.n	8006a8c <LL_TIM_Init+0xb0>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	691a      	ldr	r2, [r3, #16]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	0011      	movs	r1, r2
 8006a86:	0018      	movs	r0, r3
 8006a88:	f7ff ff5e 	bl	8006948 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	0018      	movs	r0, r3
 8006a90:	f7ff ff96 	bl	80069c0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	0018      	movs	r0, r3
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	b004      	add	sp, #16
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	46c0      	nop			; (mov r8, r8)
 8006aa0:	40012c00 	.word	0x40012c00
 8006aa4:	40000400 	.word	0x40000400
 8006aa8:	40002000 	.word	0x40002000
 8006aac:	40014400 	.word	0x40014400
 8006ab0:	40014800 	.word	0x40014800
 8006ab4:	fffffcff 	.word	0xfffffcff

08006ab8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8006ab8:	b590      	push	{r4, r7, lr}
 8006aba:	b087      	sub	sp, #28
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8006ac4:	2317      	movs	r3, #23
 8006ac6:	18fb      	adds	r3, r7, r3
 8006ac8:	2201      	movs	r2, #1
 8006aca:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	2380      	movs	r3, #128	; 0x80
 8006ad0:	015b      	lsls	r3, r3, #5
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d036      	beq.n	8006b44 <LL_TIM_OC_Init+0x8c>
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	2380      	movs	r3, #128	; 0x80
 8006ada:	015b      	lsls	r3, r3, #5
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d83c      	bhi.n	8006b5a <LL_TIM_OC_Init+0xa2>
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	2380      	movs	r3, #128	; 0x80
 8006ae4:	005b      	lsls	r3, r3, #1
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d021      	beq.n	8006b2e <LL_TIM_OC_Init+0x76>
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	2380      	movs	r3, #128	; 0x80
 8006aee:	005b      	lsls	r3, r3, #1
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d832      	bhi.n	8006b5a <LL_TIM_OC_Init+0xa2>
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d003      	beq.n	8006b02 <LL_TIM_OC_Init+0x4a>
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	2b10      	cmp	r3, #16
 8006afe:	d00b      	beq.n	8006b18 <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8006b00:	e02b      	b.n	8006b5a <LL_TIM_OC_Init+0xa2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8006b02:	2317      	movs	r3, #23
 8006b04:	18fc      	adds	r4, r7, r3
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	0011      	movs	r1, r2
 8006b0c:	0018      	movs	r0, r3
 8006b0e:	f000 f883 	bl	8006c18 <OC1Config>
 8006b12:	0003      	movs	r3, r0
 8006b14:	7023      	strb	r3, [r4, #0]
      break;
 8006b16:	e021      	b.n	8006b5c <LL_TIM_OC_Init+0xa4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8006b18:	2317      	movs	r3, #23
 8006b1a:	18fc      	adds	r4, r7, r3
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	0011      	movs	r1, r2
 8006b22:	0018      	movs	r0, r3
 8006b24:	f000 f8f6 	bl	8006d14 <OC2Config>
 8006b28:	0003      	movs	r3, r0
 8006b2a:	7023      	strb	r3, [r4, #0]
      break;
 8006b2c:	e016      	b.n	8006b5c <LL_TIM_OC_Init+0xa4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8006b2e:	2317      	movs	r3, #23
 8006b30:	18fc      	adds	r4, r7, r3
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	0011      	movs	r1, r2
 8006b38:	0018      	movs	r0, r3
 8006b3a:	f000 f96f 	bl	8006e1c <OC3Config>
 8006b3e:	0003      	movs	r3, r0
 8006b40:	7023      	strb	r3, [r4, #0]
      break;
 8006b42:	e00b      	b.n	8006b5c <LL_TIM_OC_Init+0xa4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8006b44:	2317      	movs	r3, #23
 8006b46:	18fc      	adds	r4, r7, r3
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	0011      	movs	r1, r2
 8006b4e:	0018      	movs	r0, r3
 8006b50:	f000 f9e8 	bl	8006f24 <OC4Config>
 8006b54:	0003      	movs	r3, r0
 8006b56:	7023      	strb	r3, [r4, #0]
      break;
 8006b58:	e000      	b.n	8006b5c <LL_TIM_OC_Init+0xa4>
      break;
 8006b5a:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 8006b5c:	2317      	movs	r3, #23
 8006b5e:	18fb      	adds	r3, r7, r3
 8006b60:	781b      	ldrb	r3, [r3, #0]
}
 8006b62:	0018      	movs	r0, r3
 8006b64:	46bd      	mov	sp, r7
 8006b66:	b007      	add	sp, #28
 8006b68:	bd90      	pop	{r4, r7, pc}
	...

08006b6c <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8006b76:	2300      	movs	r3, #0
 8006b78:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	22ff      	movs	r2, #255	; 0xff
 8006b7e:	4393      	bics	r3, r2
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	7b12      	ldrb	r2, [r2, #12]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4a1c      	ldr	r2, [pc, #112]	; (8006bfc <LL_TIM_BDTR_Init+0x90>)
 8006b8c:	401a      	ands	r2, r3
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	4a19      	ldr	r2, [pc, #100]	; (8006c00 <LL_TIM_BDTR_Init+0x94>)
 8006b9a:	401a      	ands	r2, r3
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4a17      	ldr	r2, [pc, #92]	; (8006c04 <LL_TIM_BDTR_Init+0x98>)
 8006ba8:	401a      	ands	r2, r3
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	4a14      	ldr	r2, [pc, #80]	; (8006c08 <LL_TIM_BDTR_Init+0x9c>)
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	89d2      	ldrh	r2, [r2, #14]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4a12      	ldr	r2, [pc, #72]	; (8006c0c <LL_TIM_BDTR_Init+0xa0>)
 8006bc4:	401a      	ands	r2, r3
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	4a0f      	ldr	r2, [pc, #60]	; (8006c10 <LL_TIM_BDTR_Init+0xa4>)
 8006bd2:	401a      	ands	r2, r3
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4a0d      	ldr	r2, [pc, #52]	; (8006c14 <LL_TIM_BDTR_Init+0xa8>)
 8006be0:	401a      	ands	r2, r3
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	0018      	movs	r0, r3
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	b004      	add	sp, #16
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	46c0      	nop			; (mov r8, r8)
 8006bfc:	fffffcff 	.word	0xfffffcff
 8006c00:	fffffbff 	.word	0xfffffbff
 8006c04:	fffff7ff 	.word	0xfffff7ff
 8006c08:	ffffefff 	.word	0xffffefff
 8006c0c:	ffffdfff 	.word	0xffffdfff
 8006c10:	ffffbfff 	.word	0xffffbfff
 8006c14:	ffff7fff 	.word	0xffff7fff

08006c18 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	2201      	movs	r2, #1
 8006c28:	4393      	bics	r3, r2
 8006c2a:	001a      	movs	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2203      	movs	r2, #3
 8006c46:	4393      	bics	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2270      	movs	r2, #112	; 0x70
 8006c4e:	4393      	bics	r3, r2
 8006c50:	001a      	movs	r2, r3
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	2202      	movs	r2, #2
 8006c5e:	4393      	bics	r3, r2
 8006c60:	001a      	movs	r2, r3
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	4393      	bics	r3, r2
 8006c70:	001a      	movs	r2, r3
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a20      	ldr	r2, [pc, #128]	; (8006d00 <OC1Config+0xe8>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d007      	beq.n	8006c92 <OC1Config+0x7a>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a1f      	ldr	r2, [pc, #124]	; (8006d04 <OC1Config+0xec>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d003      	beq.n	8006c92 <OC1Config+0x7a>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a1e      	ldr	r2, [pc, #120]	; (8006d08 <OC1Config+0xf0>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d120      	bne.n	8006cd4 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	2208      	movs	r2, #8
 8006c96:	4393      	bics	r3, r2
 8006c98:	001a      	movs	r2, r3
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	2204      	movs	r2, #4
 8006ca8:	4393      	bics	r3, r2
 8006caa:	001a      	movs	r2, r3
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	4a14      	ldr	r2, [pc, #80]	; (8006d0c <OC1Config+0xf4>)
 8006cba:	401a      	ands	r2, r3
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	4a12      	ldr	r2, [pc, #72]	; (8006d10 <OC1Config+0xf8>)
 8006cc8:	401a      	ands	r2, r3
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	005b      	lsls	r3, r3, #1
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	68da      	ldr	r2, [r3, #12]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	0011      	movs	r1, r2
 8006ce8:	0018      	movs	r0, r3
 8006cea:	f7ff fe39 	bl	8006960 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	0018      	movs	r0, r3
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	b006      	add	sp, #24
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	46c0      	nop			; (mov r8, r8)
 8006d00:	40012c00 	.word	0x40012c00
 8006d04:	40014400 	.word	0x40014400
 8006d08:	40014800 	.word	0x40014800
 8006d0c:	fffffeff 	.word	0xfffffeff
 8006d10:	fffffdff 	.word	0xfffffdff

08006d14 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	2210      	movs	r2, #16
 8006d24:	4393      	bics	r3, r2
 8006d26:	001a      	movs	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
 8006d30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	4a2f      	ldr	r2, [pc, #188]	; (8006e00 <OC2Config+0xec>)
 8006d42:	4013      	ands	r3, r2
 8006d44:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	4a2e      	ldr	r2, [pc, #184]	; (8006e04 <OC2Config+0xf0>)
 8006d4a:	401a      	ands	r2, r3
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	021b      	lsls	r3, r3, #8
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2220      	movs	r2, #32
 8006d5a:	4393      	bics	r3, r2
 8006d5c:	001a      	movs	r2, r3
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	011b      	lsls	r3, r3, #4
 8006d64:	4313      	orrs	r3, r2
 8006d66:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	2210      	movs	r2, #16
 8006d6c:	4393      	bics	r3, r2
 8006d6e:	001a      	movs	r2, r3
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	011b      	lsls	r3, r3, #4
 8006d76:	4313      	orrs	r3, r2
 8006d78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a22      	ldr	r2, [pc, #136]	; (8006e08 <OC2Config+0xf4>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d007      	beq.n	8006d92 <OC2Config+0x7e>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a21      	ldr	r2, [pc, #132]	; (8006e0c <OC2Config+0xf8>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d003      	beq.n	8006d92 <OC2Config+0x7e>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a20      	ldr	r2, [pc, #128]	; (8006e10 <OC2Config+0xfc>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d121      	bne.n	8006dd6 <OC2Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	2280      	movs	r2, #128	; 0x80
 8006d96:	4393      	bics	r3, r2
 8006d98:	001a      	movs	r2, r3
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	019b      	lsls	r3, r3, #6
 8006da0:	4313      	orrs	r3, r2
 8006da2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	2240      	movs	r2, #64	; 0x40
 8006da8:	4393      	bics	r3, r2
 8006daa:	001a      	movs	r2, r3
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	019b      	lsls	r3, r3, #6
 8006db2:	4313      	orrs	r3, r2
 8006db4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	4a16      	ldr	r2, [pc, #88]	; (8006e14 <OC2Config+0x100>)
 8006dba:	401a      	ands	r2, r3
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	4a13      	ldr	r2, [pc, #76]	; (8006e18 <OC2Config+0x104>)
 8006dca:	401a      	ands	r2, r3
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	69db      	ldr	r3, [r3, #28]
 8006dd0:	00db      	lsls	r3, r3, #3
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	68da      	ldr	r2, [r3, #12]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	0011      	movs	r1, r2
 8006dea:	0018      	movs	r0, r3
 8006dec:	f7ff fdc4 	bl	8006978 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	0018      	movs	r0, r3
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	b006      	add	sp, #24
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	fffffcff 	.word	0xfffffcff
 8006e04:	ffff8fff 	.word	0xffff8fff
 8006e08:	40012c00 	.word	0x40012c00
 8006e0c:	40014400 	.word	0x40014400
 8006e10:	40014800 	.word	0x40014800
 8006e14:	fffffbff 	.word	0xfffffbff
 8006e18:	fffff7ff 	.word	0xfffff7ff

08006e1c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	4a35      	ldr	r2, [pc, #212]	; (8006f00 <OC3Config+0xe4>)
 8006e2c:	401a      	ands	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2203      	movs	r2, #3
 8006e48:	4393      	bics	r3, r2
 8006e4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2270      	movs	r2, #112	; 0x70
 8006e50:	4393      	bics	r3, r2
 8006e52:	001a      	movs	r2, r3
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	4a29      	ldr	r2, [pc, #164]	; (8006f04 <OC3Config+0xe8>)
 8006e60:	401a      	ands	r2, r3
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	021b      	lsls	r3, r3, #8
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	4a24      	ldr	r2, [pc, #144]	; (8006f00 <OC3Config+0xe4>)
 8006e70:	401a      	ands	r2, r3
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	021b      	lsls	r3, r3, #8
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a22      	ldr	r2, [pc, #136]	; (8006f08 <OC3Config+0xec>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d007      	beq.n	8006e94 <OC3Config+0x78>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a21      	ldr	r2, [pc, #132]	; (8006f0c <OC3Config+0xf0>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d003      	beq.n	8006e94 <OC3Config+0x78>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a20      	ldr	r2, [pc, #128]	; (8006f10 <OC3Config+0xf4>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d11f      	bne.n	8006ed4 <OC3Config+0xb8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	4a1f      	ldr	r2, [pc, #124]	; (8006f14 <OC3Config+0xf8>)
 8006e98:	401a      	ands	r2, r3
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	029b      	lsls	r3, r3, #10
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	4a1c      	ldr	r2, [pc, #112]	; (8006f18 <OC3Config+0xfc>)
 8006ea8:	401a      	ands	r2, r3
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	029b      	lsls	r3, r3, #10
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	4a19      	ldr	r2, [pc, #100]	; (8006f1c <OC3Config+0x100>)
 8006eb8:	401a      	ands	r2, r3
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	011b      	lsls	r3, r3, #4
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	4a16      	ldr	r2, [pc, #88]	; (8006f20 <OC3Config+0x104>)
 8006ec8:	401a      	ands	r2, r3
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	015b      	lsls	r3, r3, #5
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	68da      	ldr	r2, [r3, #12]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	0011      	movs	r1, r2
 8006ee8:	0018      	movs	r0, r3
 8006eea:	f7ff fd51 	bl	8006990 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	697a      	ldr	r2, [r7, #20]
 8006ef2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	0018      	movs	r0, r3
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	b006      	add	sp, #24
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	46c0      	nop			; (mov r8, r8)
 8006f00:	fffffeff 	.word	0xfffffeff
 8006f04:	fffffdff 	.word	0xfffffdff
 8006f08:	40012c00 	.word	0x40012c00
 8006f0c:	40014400 	.word	0x40014400
 8006f10:	40014800 	.word	0x40014800
 8006f14:	fffff7ff 	.word	0xfffff7ff
 8006f18:	fffffbff 	.word	0xfffffbff
 8006f1c:	ffffefff 	.word	0xffffefff
 8006f20:	ffffdfff 	.word	0xffffdfff

08006f24 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	4a29      	ldr	r2, [pc, #164]	; (8006fd8 <OC4Config+0xb4>)
 8006f34:	401a      	ands	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	4a23      	ldr	r2, [pc, #140]	; (8006fdc <OC4Config+0xb8>)
 8006f50:	4013      	ands	r3, r2
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4a22      	ldr	r2, [pc, #136]	; (8006fe0 <OC4Config+0xbc>)
 8006f58:	401a      	ands	r2, r3
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	021b      	lsls	r3, r3, #8
 8006f60:	4313      	orrs	r3, r2
 8006f62:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	4a1f      	ldr	r2, [pc, #124]	; (8006fe4 <OC4Config+0xc0>)
 8006f68:	401a      	ands	r2, r3
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	031b      	lsls	r3, r3, #12
 8006f70:	4313      	orrs	r3, r2
 8006f72:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	4a18      	ldr	r2, [pc, #96]	; (8006fd8 <OC4Config+0xb4>)
 8006f78:	401a      	ands	r2, r3
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	031b      	lsls	r3, r3, #12
 8006f80:	4313      	orrs	r3, r2
 8006f82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a18      	ldr	r2, [pc, #96]	; (8006fe8 <OC4Config+0xc4>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d007      	beq.n	8006f9c <OC4Config+0x78>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a17      	ldr	r2, [pc, #92]	; (8006fec <OC4Config+0xc8>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d003      	beq.n	8006f9c <OC4Config+0x78>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a16      	ldr	r2, [pc, #88]	; (8006ff0 <OC4Config+0xcc>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d107      	bne.n	8006fac <OC4Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	4a15      	ldr	r2, [pc, #84]	; (8006ff4 <OC4Config+0xd0>)
 8006fa0:	401a      	ands	r2, r3
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	019b      	lsls	r3, r3, #6
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	68da      	ldr	r2, [r3, #12]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	0011      	movs	r1, r2
 8006fc0:	0018      	movs	r0, r3
 8006fc2:	f7ff fcf1 	bl	80069a8 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	0018      	movs	r0, r3
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	b006      	add	sp, #24
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	46c0      	nop			; (mov r8, r8)
 8006fd8:	ffffefff 	.word	0xffffefff
 8006fdc:	fffffcff 	.word	0xfffffcff
 8006fe0:	ffff8fff 	.word	0xffff8fff
 8006fe4:	ffffdfff 	.word	0xffffdfff
 8006fe8:	40012c00 	.word	0x40012c00
 8006fec:	40014400 	.word	0x40014400
 8006ff0:	40014800 	.word	0x40014800
 8006ff4:	ffffbfff 	.word	0xffffbfff

08006ff8 <LL_USART_IsEnabled>:
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2201      	movs	r2, #1
 8007006:	4013      	ands	r3, r2
 8007008:	2b01      	cmp	r3, #1
 800700a:	d101      	bne.n	8007010 <LL_USART_IsEnabled+0x18>
 800700c:	2301      	movs	r3, #1
 800700e:	e000      	b.n	8007012 <LL_USART_IsEnabled+0x1a>
 8007010:	2300      	movs	r3, #0
}
 8007012:	0018      	movs	r0, r3
 8007014:	46bd      	mov	sp, r7
 8007016:	b002      	add	sp, #8
 8007018:	bd80      	pop	{r7, pc}
	...

0800701c <LL_USART_SetStopBitsLength>:
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	4a05      	ldr	r2, [pc, #20]	; (8007040 <LL_USART_SetStopBitsLength+0x24>)
 800702c:	401a      	ands	r2, r3
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	431a      	orrs	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	605a      	str	r2, [r3, #4]
}
 8007036:	46c0      	nop			; (mov r8, r8)
 8007038:	46bd      	mov	sp, r7
 800703a:	b002      	add	sp, #8
 800703c:	bd80      	pop	{r7, pc}
 800703e:	46c0      	nop			; (mov r8, r8)
 8007040:	ffffcfff 	.word	0xffffcfff

08007044 <LL_USART_SetHWFlowCtrl>:
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	4a05      	ldr	r2, [pc, #20]	; (8007068 <LL_USART_SetHWFlowCtrl+0x24>)
 8007054:	401a      	ands	r2, r3
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	431a      	orrs	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	609a      	str	r2, [r3, #8]
}
 800705e:	46c0      	nop			; (mov r8, r8)
 8007060:	46bd      	mov	sp, r7
 8007062:	b002      	add	sp, #8
 8007064:	bd80      	pop	{r7, pc}
 8007066:	46c0      	nop			; (mov r8, r8)
 8007068:	fffffcff 	.word	0xfffffcff

0800706c <LL_USART_SetBaudRate>:
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
 8007078:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	2380      	movs	r3, #128	; 0x80
 800707e:	021b      	lsls	r3, r3, #8
 8007080:	429a      	cmp	r2, r3
 8007082:	d11c      	bne.n	80070be <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	005a      	lsls	r2, r3, #1
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	085b      	lsrs	r3, r3, #1
 800708c:	18d3      	adds	r3, r2, r3
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	0018      	movs	r0, r3
 8007092:	f7f9 f839 	bl	8000108 <__udivsi3>
 8007096:	0003      	movs	r3, r0
 8007098:	b29b      	uxth	r3, r3
 800709a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	4a10      	ldr	r2, [pc, #64]	; (80070e0 <LL_USART_SetBaudRate+0x74>)
 80070a0:	4013      	ands	r3, r2
 80070a2:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	085b      	lsrs	r3, r3, #1
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	001a      	movs	r2, r3
 80070ac:	2307      	movs	r3, #7
 80070ae:	4013      	ands	r3, r2
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	60da      	str	r2, [r3, #12]
}
 80070bc:	e00c      	b.n	80070d8 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	085a      	lsrs	r2, r3, #1
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	18d3      	adds	r3, r2, r3
 80070c6:	6839      	ldr	r1, [r7, #0]
 80070c8:	0018      	movs	r0, r3
 80070ca:	f7f9 f81d 	bl	8000108 <__udivsi3>
 80070ce:	0003      	movs	r3, r0
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	001a      	movs	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	60da      	str	r2, [r3, #12]
}
 80070d8:	46c0      	nop			; (mov r8, r8)
 80070da:	46bd      	mov	sp, r7
 80070dc:	b006      	add	sp, #24
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	0000fff0 	.word	0x0000fff0

080070e4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80070ee:	230f      	movs	r3, #15
 80070f0:	18fb      	adds	r3, r7, r3
 80070f2:	2201      	movs	r2, #1
 80070f4:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80070f6:	2300      	movs	r3, #0
 80070f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	0018      	movs	r0, r3
 80070fe:	f7ff ff7b 	bl	8006ff8 <LL_USART_IsEnabled>
 8007102:	1e03      	subs	r3, r0, #0
 8007104:	d13b      	bne.n	800717e <LL_USART_Init+0x9a>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a20      	ldr	r2, [pc, #128]	; (800718c <LL_USART_Init+0xa8>)
 800710c:	401a      	ands	r2, r3
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	6859      	ldr	r1, [r3, #4]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	4319      	orrs	r1, r3
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	4319      	orrs	r1, r3
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	430b      	orrs	r3, r1
 8007124:	431a      	orrs	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	689a      	ldr	r2, [r3, #8]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	0011      	movs	r1, r2
 8007132:	0018      	movs	r0, r3
 8007134:	f7ff ff72 	bl	800701c <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	695a      	ldr	r2, [r3, #20]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	0011      	movs	r1, r2
 8007140:	0018      	movs	r0, r3
 8007142:	f7ff ff7f 	bl	8007044 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a11      	ldr	r2, [pc, #68]	; (8007190 <LL_USART_Init+0xac>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d104      	bne.n	8007158 <LL_USART_Init+0x74>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800714e:	2000      	movs	r0, #0
 8007150:	f7ff fb16 	bl	8006780 <LL_RCC_GetUSARTClockFreq>
 8007154:	0003      	movs	r3, r0
 8007156:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00f      	beq.n	800717e <LL_USART_Init+0x9a>
        && (USART_InitStruct->BaudRate != 0U))
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00b      	beq.n	800717e <LL_USART_Init+0x9a>
    {
      status = SUCCESS;
 8007166:	230f      	movs	r3, #15
 8007168:	18fb      	adds	r3, r7, r3
 800716a:	2200      	movs	r2, #0
 800716c:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	699a      	ldr	r2, [r3, #24]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68b9      	ldr	r1, [r7, #8]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7ff ff77 	bl	800706c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800717e:	230f      	movs	r3, #15
 8007180:	18fb      	adds	r3, r7, r3
 8007182:	781b      	ldrb	r3, [r3, #0]
}
 8007184:	0018      	movs	r0, r3
 8007186:	46bd      	mov	sp, r7
 8007188:	b004      	add	sp, #16
 800718a:	bd80      	pop	{r7, pc}
 800718c:	ffff69f3 	.word	0xffff69f3
 8007190:	40013800 	.word	0x40013800

08007194 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800719e:	6839      	ldr	r1, [r7, #0]
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7f8 ffb1 	bl	8000108 <__udivsi3>
 80071a6:	0003      	movs	r3, r0
 80071a8:	001a      	movs	r2, r3
 80071aa:	4b06      	ldr	r3, [pc, #24]	; (80071c4 <LL_InitTick+0x30>)
 80071ac:	3a01      	subs	r2, #1
 80071ae:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80071b0:	4b04      	ldr	r3, [pc, #16]	; (80071c4 <LL_InitTick+0x30>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80071b6:	4b03      	ldr	r3, [pc, #12]	; (80071c4 <LL_InitTick+0x30>)
 80071b8:	2205      	movs	r2, #5
 80071ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80071bc:	46c0      	nop			; (mov r8, r8)
 80071be:	46bd      	mov	sp, r7
 80071c0:	b002      	add	sp, #8
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	e000e010 	.word	0xe000e010

080071c8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80071d0:	23fa      	movs	r3, #250	; 0xfa
 80071d2:	009a      	lsls	r2, r3, #2
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	0011      	movs	r1, r2
 80071d8:	0018      	movs	r0, r3
 80071da:	f7ff ffdb 	bl	8007194 <LL_InitTick>
}
 80071de:	46c0      	nop			; (mov r8, r8)
 80071e0:	46bd      	mov	sp, r7
 80071e2:	b002      	add	sp, #8
 80071e4:	bd80      	pop	{r7, pc}
	...

080071e8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80071f0:	4b0d      	ldr	r3, [pc, #52]	; (8007228 <LL_mDelay+0x40>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80071f6:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	3301      	adds	r3, #1
 80071fc:	d00c      	beq.n	8007218 <LL_mDelay+0x30>
  {
    Delay++;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	3301      	adds	r3, #1
 8007202:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8007204:	e008      	b.n	8007218 <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8007206:	4b08      	ldr	r3, [pc, #32]	; (8007228 <LL_mDelay+0x40>)
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	2380      	movs	r3, #128	; 0x80
 800720c:	025b      	lsls	r3, r3, #9
 800720e:	4013      	ands	r3, r2
 8007210:	d002      	beq.n	8007218 <LL_mDelay+0x30>
    {
      Delay--;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	3b01      	subs	r3, #1
 8007216:	607b      	str	r3, [r7, #4]
  while (Delay)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1f3      	bne.n	8007206 <LL_mDelay+0x1e>
    }
  }
}
 800721e:	46c0      	nop			; (mov r8, r8)
 8007220:	46c0      	nop			; (mov r8, r8)
 8007222:	46bd      	mov	sp, r7
 8007224:	b004      	add	sp, #16
 8007226:	bd80      	pop	{r7, pc}
 8007228:	e000e010 	.word	0xe000e010

0800722c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8007234:	4b03      	ldr	r3, [pc, #12]	; (8007244 <LL_SetSystemCoreClock+0x18>)
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	601a      	str	r2, [r3, #0]
}
 800723a:	46c0      	nop			; (mov r8, r8)
 800723c:	46bd      	mov	sp, r7
 800723e:	b002      	add	sp, #8
 8007240:	bd80      	pop	{r7, pc}
 8007242:	46c0      	nop			; (mov r8, r8)
 8007244:	2000000c 	.word	0x2000000c

08007248 <__libc_init_array>:
 8007248:	b570      	push	{r4, r5, r6, lr}
 800724a:	2600      	movs	r6, #0
 800724c:	4d0c      	ldr	r5, [pc, #48]	; (8007280 <__libc_init_array+0x38>)
 800724e:	4c0d      	ldr	r4, [pc, #52]	; (8007284 <__libc_init_array+0x3c>)
 8007250:	1b64      	subs	r4, r4, r5
 8007252:	10a4      	asrs	r4, r4, #2
 8007254:	42a6      	cmp	r6, r4
 8007256:	d109      	bne.n	800726c <__libc_init_array+0x24>
 8007258:	2600      	movs	r6, #0
 800725a:	f000 f82b 	bl	80072b4 <_init>
 800725e:	4d0a      	ldr	r5, [pc, #40]	; (8007288 <__libc_init_array+0x40>)
 8007260:	4c0a      	ldr	r4, [pc, #40]	; (800728c <__libc_init_array+0x44>)
 8007262:	1b64      	subs	r4, r4, r5
 8007264:	10a4      	asrs	r4, r4, #2
 8007266:	42a6      	cmp	r6, r4
 8007268:	d105      	bne.n	8007276 <__libc_init_array+0x2e>
 800726a:	bd70      	pop	{r4, r5, r6, pc}
 800726c:	00b3      	lsls	r3, r6, #2
 800726e:	58eb      	ldr	r3, [r5, r3]
 8007270:	4798      	blx	r3
 8007272:	3601      	adds	r6, #1
 8007274:	e7ee      	b.n	8007254 <__libc_init_array+0xc>
 8007276:	00b3      	lsls	r3, r6, #2
 8007278:	58eb      	ldr	r3, [r5, r3]
 800727a:	4798      	blx	r3
 800727c:	3601      	adds	r6, #1
 800727e:	e7f2      	b.n	8007266 <__libc_init_array+0x1e>
 8007280:	080074b0 	.word	0x080074b0
 8007284:	080074b0 	.word	0x080074b0
 8007288:	080074b0 	.word	0x080074b0
 800728c:	080074b4 	.word	0x080074b4

08007290 <memcpy>:
 8007290:	2300      	movs	r3, #0
 8007292:	b510      	push	{r4, lr}
 8007294:	429a      	cmp	r2, r3
 8007296:	d100      	bne.n	800729a <memcpy+0xa>
 8007298:	bd10      	pop	{r4, pc}
 800729a:	5ccc      	ldrb	r4, [r1, r3]
 800729c:	54c4      	strb	r4, [r0, r3]
 800729e:	3301      	adds	r3, #1
 80072a0:	e7f8      	b.n	8007294 <memcpy+0x4>

080072a2 <memset>:
 80072a2:	0003      	movs	r3, r0
 80072a4:	1882      	adds	r2, r0, r2
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d100      	bne.n	80072ac <memset+0xa>
 80072aa:	4770      	bx	lr
 80072ac:	7019      	strb	r1, [r3, #0]
 80072ae:	3301      	adds	r3, #1
 80072b0:	e7f9      	b.n	80072a6 <memset+0x4>
	...

080072b4 <_init>:
 80072b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b6:	46c0      	nop			; (mov r8, r8)
 80072b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ba:	bc08      	pop	{r3}
 80072bc:	469e      	mov	lr, r3
 80072be:	4770      	bx	lr

080072c0 <_fini>:
 80072c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c2:	46c0      	nop			; (mov r8, r8)
 80072c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072c6:	bc08      	pop	{r3}
 80072c8:	469e      	mov	lr, r3
 80072ca:	4770      	bx	lr
